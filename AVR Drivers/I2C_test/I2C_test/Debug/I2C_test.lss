
I2C_test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000de  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000132  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000132  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000164  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000068  00000000  00000000  000001a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007af  00000000  00000000  00000208  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000672  00000000  00000000  000009b7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000038d  00000000  00000000  00001029  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000098  00000000  00000000  000013b8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000374  00000000  00000000  00001450  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000004e  00000000  00000000  000017c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  00001812  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 50 00 	call	0xa0	; 0xa0 <main>
  64:	0c 94 6d 00 	jmp	0xda	; 0xda <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <TWI_start>:
}


unsigned char TWI_status(){
	return (TWSR & (0xF8));
}
  6c:	84 ea       	ldi	r24, 0xA4	; 164
  6e:	86 bf       	out	0x36, r24	; 54
  70:	06 b6       	in	r0, 0x36	; 54
  72:	07 fe       	sbrs	r0, 7
  74:	fd cf       	rjmp	.-6      	; 0x70 <TWI_start+0x4>
  76:	81 e0       	ldi	r24, 0x01	; 1
  78:	08 95       	ret

0000007a <TWI_stop>:
  7a:	84 e9       	ldi	r24, 0x94	; 148
  7c:	86 bf       	out	0x36, r24	; 54
  7e:	08 95       	ret

00000080 <TWI_MY_ADRESS>:
  80:	82 b9       	out	0x02, r24	; 2
  82:	08 95       	ret

00000084 <TW_init>:
  84:	10 b8       	out	0x00, r1	; 0
  86:	0e 94 40 00 	call	0x80	; 0x80 <TWI_MY_ADRESS>
  8a:	84 e8       	ldi	r24, 0x84	; 132
  8c:	86 bf       	out	0x36, r24	; 54
  8e:	08 95       	ret

00000090 <TWI_DATA>:

unsigned char TWI_DATA(unsigned char data){
	TWDR=data;
  90:	83 b9       	out	0x03, r24	; 3
	TWCR = (1<<TWINT)|(1<<TWEN);
  92:	84 e8       	ldi	r24, 0x84	; 132
  94:	86 bf       	out	0x36, r24	; 54
	while (!(TWCR&(1<<TWINT)));
  96:	06 b6       	in	r0, 0x36	; 54
  98:	07 fe       	sbrs	r0, 7
  9a:	fd cf       	rjmp	.-6      	; 0x96 <TWI_DATA+0x6>
	return true;
  9c:	81 e0       	ldi	r24, 0x01	; 1
  9e:	08 95       	ret

000000a0 <main>:



int main(void)
{
	TW_init(0x05);//0b00000101
  a0:	85 e0       	ldi	r24, 0x05	; 5
  a2:	0e 94 42 00 	call	0x84	; 0x84 <TW_init>
    /* Replace with your application code */
    while (1) 
    {
		if (TWI_start()==0x08)
  a6:	0e 94 36 00 	call	0x6c	; 0x6c <TWI_start>
  aa:	88 30       	cpi	r24, 0x08	; 8
  ac:	e1 f7       	brne	.-8      	; 0xa6 <main+0x6>
		{
			if (TWI_DATA(0b00000011)==0x18)
  ae:	83 e0       	ldi	r24, 0x03	; 3
  b0:	0e 94 48 00 	call	0x90	; 0x90 <TWI_DATA>
  b4:	88 31       	cpi	r24, 0x18	; 24
  b6:	b9 f7       	brne	.-18     	; 0xa6 <main+0x6>
			{
				if (TWI_DATA('M')==0x28)
  b8:	8d e4       	ldi	r24, 0x4D	; 77
  ba:	0e 94 48 00 	call	0x90	; 0x90 <TWI_DATA>
  be:	88 32       	cpi	r24, 0x28	; 40
  c0:	91 f7       	brne	.-28     	; 0xa6 <main+0x6>
				{
					TWI_stop();
  c2:	0e 94 3d 00 	call	0x7a	; 0x7a <TWI_stop>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c6:	2f ef       	ldi	r18, 0xFF	; 255
  c8:	83 ed       	ldi	r24, 0xD3	; 211
  ca:	90 e3       	ldi	r25, 0x30	; 48
  cc:	21 50       	subi	r18, 0x01	; 1
  ce:	80 40       	sbci	r24, 0x00	; 0
  d0:	90 40       	sbci	r25, 0x00	; 0
  d2:	e1 f7       	brne	.-8      	; 0xcc <main+0x2c>
  d4:	00 c0       	rjmp	.+0      	; 0xd6 <main+0x36>
  d6:	00 00       	nop
  d8:	e6 cf       	rjmp	.-52     	; 0xa6 <main+0x6>

000000da <_exit>:
  da:	f8 94       	cli

000000dc <__stop_program>:
  dc:	ff cf       	rjmp	.-2      	; 0xdc <__stop_program>
