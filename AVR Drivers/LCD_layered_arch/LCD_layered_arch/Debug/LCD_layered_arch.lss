
LCD_layered_arch.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000005ae  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000078  00800060  000005ae  00000622  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000069a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000006cc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000b8  00000000  00000000  00000708  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001482  00000000  00000000  000007c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000864  00000000  00000000  00001c42  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000074a  00000000  00000000  000024a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000014c  00000000  00000000  00002bf0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000726  00000000  00000000  00002d3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000b15  00000000  00000000  00003462  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000078  00000000  00000000  00003f77  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee ea       	ldi	r30, 0xAE	; 174
  68:	f5 e0       	ldi	r31, 0x05	; 5
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 3d       	cpi	r26, 0xD8	; 216
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 3f 02 	call	0x47e	; 0x47e <main>
  7a:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <DIO_Init>:

void DIO_Init(void){
	DIO_ChannelTypes DIO_channel;
	DIO_PortTypes PortX;
	uint8 count=0;
	for(count=DIO_ChannelA0;count<pin_count;count++)
  82:	80 e0       	ldi	r24, 0x00	; 0
  84:	a0 c0       	rjmp	.+320    	; 0x1c6 <DIO_Init+0x144>
	{
		PortX=count/8;
  86:	98 2f       	mov	r25, r24
  88:	96 95       	lsr	r25
  8a:	96 95       	lsr	r25
  8c:	96 95       	lsr	r25
		DIO_channel=count%8;
  8e:	28 2f       	mov	r18, r24
  90:	27 70       	andi	r18, 0x07	; 7
		switch(PortX){
  92:	91 30       	cpi	r25, 0x01	; 1
  94:	61 f1       	breq	.+88     	; 0xee <DIO_Init+0x6c>
  96:	38 f0       	brcs	.+14     	; 0xa6 <DIO_Init+0x24>
  98:	92 30       	cpi	r25, 0x02	; 2
  9a:	09 f4       	brne	.+2      	; 0x9e <DIO_Init+0x1c>
  9c:	4c c0       	rjmp	.+152    	; 0x136 <DIO_Init+0xb4>
  9e:	93 30       	cpi	r25, 0x03	; 3
  a0:	09 f4       	brne	.+2      	; 0xa4 <DIO_Init+0x22>
  a2:	6d c0       	rjmp	.+218    	; 0x17e <DIO_Init+0xfc>
  a4:	8f c0       	rjmp	.+286    	; 0x1c4 <DIO_Init+0x142>
			case DIO_PortA :
			if (PinCfg[count].PinDir == Output)
  a6:	e8 2f       	mov	r30, r24
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	ee 0f       	add	r30, r30
  ac:	ff 1f       	adc	r31, r31
  ae:	e0 56       	subi	r30, 0x60	; 96
  b0:	ff 4f       	sbci	r31, 0xFF	; 255
  b2:	90 81       	ld	r25, Z
  b4:	91 30       	cpi	r25, 0x01	; 1
  b6:	69 f4       	brne	.+26     	; 0xd2 <DIO_Init+0x50>
			{
				set_bit(DDRA_reg,DIO_channel);
  b8:	9a b3       	in	r25, 0x1a	; 26
  ba:	41 e0       	ldi	r20, 0x01	; 1
  bc:	50 e0       	ldi	r21, 0x00	; 0
  be:	ba 01       	movw	r22, r20
  c0:	02 c0       	rjmp	.+4      	; 0xc6 <DIO_Init+0x44>
  c2:	66 0f       	add	r22, r22
  c4:	77 1f       	adc	r23, r23
  c6:	2a 95       	dec	r18
  c8:	e2 f7       	brpl	.-8      	; 0xc2 <DIO_Init+0x40>
  ca:	9b 01       	movw	r18, r22
  cc:	29 2b       	or	r18, r25
  ce:	2a bb       	out	0x1a, r18	; 26
  d0:	79 c0       	rjmp	.+242    	; 0x1c4 <DIO_Init+0x142>
			}
			else{
				reset_bit(DDRA_reg,DIO_channel);
  d2:	9a b3       	in	r25, 0x1a	; 26
  d4:	41 e0       	ldi	r20, 0x01	; 1
  d6:	50 e0       	ldi	r21, 0x00	; 0
  d8:	ba 01       	movw	r22, r20
  da:	02 c0       	rjmp	.+4      	; 0xe0 <DIO_Init+0x5e>
  dc:	66 0f       	add	r22, r22
  de:	77 1f       	adc	r23, r23
  e0:	2a 95       	dec	r18
  e2:	e2 f7       	brpl	.-8      	; 0xdc <DIO_Init+0x5a>
  e4:	9b 01       	movw	r18, r22
  e6:	20 95       	com	r18
  e8:	29 23       	and	r18, r25
  ea:	2a bb       	out	0x1a, r18	; 26
  ec:	6b c0       	rjmp	.+214    	; 0x1c4 <DIO_Init+0x142>
			}
			break;
			case DIO_PortB :
			if (PinCfg[count].PinDir == Output)
  ee:	e8 2f       	mov	r30, r24
  f0:	f0 e0       	ldi	r31, 0x00	; 0
  f2:	ee 0f       	add	r30, r30
  f4:	ff 1f       	adc	r31, r31
  f6:	e0 56       	subi	r30, 0x60	; 96
  f8:	ff 4f       	sbci	r31, 0xFF	; 255
  fa:	90 81       	ld	r25, Z
  fc:	91 30       	cpi	r25, 0x01	; 1
  fe:	69 f4       	brne	.+26     	; 0x11a <DIO_Init+0x98>
			{
				set_bit(DDRB_reg,DIO_channel);
 100:	97 b3       	in	r25, 0x17	; 23
 102:	41 e0       	ldi	r20, 0x01	; 1
 104:	50 e0       	ldi	r21, 0x00	; 0
 106:	ba 01       	movw	r22, r20
 108:	02 c0       	rjmp	.+4      	; 0x10e <DIO_Init+0x8c>
 10a:	66 0f       	add	r22, r22
 10c:	77 1f       	adc	r23, r23
 10e:	2a 95       	dec	r18
 110:	e2 f7       	brpl	.-8      	; 0x10a <DIO_Init+0x88>
 112:	9b 01       	movw	r18, r22
 114:	29 2b       	or	r18, r25
 116:	27 bb       	out	0x17, r18	; 23
 118:	55 c0       	rjmp	.+170    	; 0x1c4 <DIO_Init+0x142>
			}
			else{
				reset_bit(DDRB_reg,DIO_channel);
 11a:	97 b3       	in	r25, 0x17	; 23
 11c:	41 e0       	ldi	r20, 0x01	; 1
 11e:	50 e0       	ldi	r21, 0x00	; 0
 120:	ba 01       	movw	r22, r20
 122:	02 c0       	rjmp	.+4      	; 0x128 <DIO_Init+0xa6>
 124:	66 0f       	add	r22, r22
 126:	77 1f       	adc	r23, r23
 128:	2a 95       	dec	r18
 12a:	e2 f7       	brpl	.-8      	; 0x124 <DIO_Init+0xa2>
 12c:	9b 01       	movw	r18, r22
 12e:	20 95       	com	r18
 130:	29 23       	and	r18, r25
 132:	27 bb       	out	0x17, r18	; 23
 134:	47 c0       	rjmp	.+142    	; 0x1c4 <DIO_Init+0x142>
			}
			break;
			case DIO_PortC :
			if (PinCfg[count].PinDir == Output)
 136:	e8 2f       	mov	r30, r24
 138:	f0 e0       	ldi	r31, 0x00	; 0
 13a:	ee 0f       	add	r30, r30
 13c:	ff 1f       	adc	r31, r31
 13e:	e0 56       	subi	r30, 0x60	; 96
 140:	ff 4f       	sbci	r31, 0xFF	; 255
 142:	90 81       	ld	r25, Z
 144:	91 30       	cpi	r25, 0x01	; 1
 146:	69 f4       	brne	.+26     	; 0x162 <DIO_Init+0xe0>
			{
				set_bit(DDRC_reg,DIO_channel);
 148:	94 b3       	in	r25, 0x14	; 20
 14a:	41 e0       	ldi	r20, 0x01	; 1
 14c:	50 e0       	ldi	r21, 0x00	; 0
 14e:	ba 01       	movw	r22, r20
 150:	02 c0       	rjmp	.+4      	; 0x156 <DIO_Init+0xd4>
 152:	66 0f       	add	r22, r22
 154:	77 1f       	adc	r23, r23
 156:	2a 95       	dec	r18
 158:	e2 f7       	brpl	.-8      	; 0x152 <DIO_Init+0xd0>
 15a:	9b 01       	movw	r18, r22
 15c:	29 2b       	or	r18, r25
 15e:	24 bb       	out	0x14, r18	; 20
 160:	31 c0       	rjmp	.+98     	; 0x1c4 <DIO_Init+0x142>
			}
			else{
				reset_bit(DDRC_reg,DIO_channel);
 162:	94 b3       	in	r25, 0x14	; 20
 164:	41 e0       	ldi	r20, 0x01	; 1
 166:	50 e0       	ldi	r21, 0x00	; 0
 168:	ba 01       	movw	r22, r20
 16a:	02 c0       	rjmp	.+4      	; 0x170 <DIO_Init+0xee>
 16c:	66 0f       	add	r22, r22
 16e:	77 1f       	adc	r23, r23
 170:	2a 95       	dec	r18
 172:	e2 f7       	brpl	.-8      	; 0x16c <DIO_Init+0xea>
 174:	9b 01       	movw	r18, r22
 176:	20 95       	com	r18
 178:	29 23       	and	r18, r25
 17a:	24 bb       	out	0x14, r18	; 20
 17c:	23 c0       	rjmp	.+70     	; 0x1c4 <DIO_Init+0x142>
			}
			break;
			case DIO_PortD :
			if (PinCfg[count].PinDir == Output)
 17e:	e8 2f       	mov	r30, r24
 180:	f0 e0       	ldi	r31, 0x00	; 0
 182:	ee 0f       	add	r30, r30
 184:	ff 1f       	adc	r31, r31
 186:	e0 56       	subi	r30, 0x60	; 96
 188:	ff 4f       	sbci	r31, 0xFF	; 255
 18a:	90 81       	ld	r25, Z
 18c:	91 30       	cpi	r25, 0x01	; 1
 18e:	69 f4       	brne	.+26     	; 0x1aa <DIO_Init+0x128>
			{
				set_bit(DDRD_reg,DIO_channel);
 190:	91 b3       	in	r25, 0x11	; 17
 192:	41 e0       	ldi	r20, 0x01	; 1
 194:	50 e0       	ldi	r21, 0x00	; 0
 196:	ba 01       	movw	r22, r20
 198:	02 c0       	rjmp	.+4      	; 0x19e <DIO_Init+0x11c>
 19a:	66 0f       	add	r22, r22
 19c:	77 1f       	adc	r23, r23
 19e:	2a 95       	dec	r18
 1a0:	e2 f7       	brpl	.-8      	; 0x19a <DIO_Init+0x118>
 1a2:	9b 01       	movw	r18, r22
 1a4:	29 2b       	or	r18, r25
 1a6:	21 bb       	out	0x11, r18	; 17
 1a8:	0d c0       	rjmp	.+26     	; 0x1c4 <DIO_Init+0x142>
			}
			else{
				reset_bit(DDRD_reg,DIO_channel);
 1aa:	91 b3       	in	r25, 0x11	; 17
 1ac:	41 e0       	ldi	r20, 0x01	; 1
 1ae:	50 e0       	ldi	r21, 0x00	; 0
 1b0:	ba 01       	movw	r22, r20
 1b2:	02 c0       	rjmp	.+4      	; 0x1b8 <DIO_Init+0x136>
 1b4:	66 0f       	add	r22, r22
 1b6:	77 1f       	adc	r23, r23
 1b8:	2a 95       	dec	r18
 1ba:	e2 f7       	brpl	.-8      	; 0x1b4 <DIO_Init+0x132>
 1bc:	9b 01       	movw	r18, r22
 1be:	20 95       	com	r18
 1c0:	29 23       	and	r18, r25
 1c2:	21 bb       	out	0x11, r18	; 17

void DIO_Init(void){
	DIO_ChannelTypes DIO_channel;
	DIO_PortTypes PortX;
	uint8 count=0;
	for(count=DIO_ChannelA0;count<pin_count;count++)
 1c4:	8f 5f       	subi	r24, 0xFF	; 255
 1c6:	80 32       	cpi	r24, 0x20	; 32
 1c8:	08 f4       	brcc	.+2      	; 0x1cc <DIO_Init+0x14a>
 1ca:	5d cf       	rjmp	.-326    	; 0x86 <DIO_Init+0x4>
			}
			break;
			
		}
	}
}
 1cc:	08 95       	ret

000001ce <DIO_write>:
		case DIO_PIND :
		return get_bit(PIND_reg,Channelpos);
		break;
	}
	
}
 1ce:	98 2f       	mov	r25, r24
 1d0:	96 95       	lsr	r25
 1d2:	96 95       	lsr	r25
 1d4:	96 95       	lsr	r25
 1d6:	87 70       	andi	r24, 0x07	; 7
 1d8:	91 30       	cpi	r25, 0x01	; 1
 1da:	21 f1       	breq	.+72     	; 0x224 <DIO_write+0x56>
 1dc:	30 f0       	brcs	.+12     	; 0x1ea <DIO_write+0x1c>
 1de:	92 30       	cpi	r25, 0x02	; 2
 1e0:	f1 f1       	breq	.+124    	; 0x25e <DIO_write+0x90>
 1e2:	93 30       	cpi	r25, 0x03	; 3
 1e4:	09 f4       	brne	.+2      	; 0x1e8 <DIO_write+0x1a>
 1e6:	58 c0       	rjmp	.+176    	; 0x298 <DIO_write+0xca>
 1e8:	08 95       	ret
 1ea:	61 30       	cpi	r22, 0x01	; 1
 1ec:	69 f4       	brne	.+26     	; 0x208 <DIO_write+0x3a>
 1ee:	4b b3       	in	r20, 0x1b	; 27
 1f0:	21 e0       	ldi	r18, 0x01	; 1
 1f2:	30 e0       	ldi	r19, 0x00	; 0
 1f4:	b9 01       	movw	r22, r18
 1f6:	02 c0       	rjmp	.+4      	; 0x1fc <DIO_write+0x2e>
 1f8:	66 0f       	add	r22, r22
 1fa:	77 1f       	adc	r23, r23
 1fc:	8a 95       	dec	r24
 1fe:	e2 f7       	brpl	.-8      	; 0x1f8 <DIO_write+0x2a>
 200:	cb 01       	movw	r24, r22
 202:	84 2b       	or	r24, r20
 204:	8b bb       	out	0x1b, r24	; 27
 206:	08 95       	ret
 208:	4b b3       	in	r20, 0x1b	; 27
 20a:	21 e0       	ldi	r18, 0x01	; 1
 20c:	30 e0       	ldi	r19, 0x00	; 0
 20e:	b9 01       	movw	r22, r18
 210:	02 c0       	rjmp	.+4      	; 0x216 <DIO_write+0x48>
 212:	66 0f       	add	r22, r22
 214:	77 1f       	adc	r23, r23
 216:	8a 95       	dec	r24
 218:	e2 f7       	brpl	.-8      	; 0x212 <DIO_write+0x44>
 21a:	cb 01       	movw	r24, r22
 21c:	80 95       	com	r24
 21e:	84 23       	and	r24, r20
 220:	8b bb       	out	0x1b, r24	; 27
 222:	08 95       	ret
 224:	61 30       	cpi	r22, 0x01	; 1
 226:	69 f4       	brne	.+26     	; 0x242 <DIO_write+0x74>
 228:	48 b3       	in	r20, 0x18	; 24
 22a:	21 e0       	ldi	r18, 0x01	; 1
 22c:	30 e0       	ldi	r19, 0x00	; 0
 22e:	b9 01       	movw	r22, r18
 230:	02 c0       	rjmp	.+4      	; 0x236 <DIO_write+0x68>
 232:	66 0f       	add	r22, r22
 234:	77 1f       	adc	r23, r23
 236:	8a 95       	dec	r24
 238:	e2 f7       	brpl	.-8      	; 0x232 <DIO_write+0x64>
 23a:	cb 01       	movw	r24, r22
 23c:	84 2b       	or	r24, r20
 23e:	88 bb       	out	0x18, r24	; 24
 240:	08 95       	ret
 242:	48 b3       	in	r20, 0x18	; 24
 244:	21 e0       	ldi	r18, 0x01	; 1
 246:	30 e0       	ldi	r19, 0x00	; 0
 248:	b9 01       	movw	r22, r18
 24a:	02 c0       	rjmp	.+4      	; 0x250 <DIO_write+0x82>
 24c:	66 0f       	add	r22, r22
 24e:	77 1f       	adc	r23, r23
 250:	8a 95       	dec	r24
 252:	e2 f7       	brpl	.-8      	; 0x24c <DIO_write+0x7e>
 254:	cb 01       	movw	r24, r22
 256:	80 95       	com	r24
 258:	84 23       	and	r24, r20
 25a:	88 bb       	out	0x18, r24	; 24
 25c:	08 95       	ret
 25e:	61 30       	cpi	r22, 0x01	; 1
 260:	69 f4       	brne	.+26     	; 0x27c <DIO_write+0xae>
 262:	45 b3       	in	r20, 0x15	; 21
 264:	21 e0       	ldi	r18, 0x01	; 1
 266:	30 e0       	ldi	r19, 0x00	; 0
 268:	b9 01       	movw	r22, r18
 26a:	02 c0       	rjmp	.+4      	; 0x270 <DIO_write+0xa2>
 26c:	66 0f       	add	r22, r22
 26e:	77 1f       	adc	r23, r23
 270:	8a 95       	dec	r24
 272:	e2 f7       	brpl	.-8      	; 0x26c <DIO_write+0x9e>
 274:	cb 01       	movw	r24, r22
 276:	84 2b       	or	r24, r20
 278:	85 bb       	out	0x15, r24	; 21
 27a:	08 95       	ret
 27c:	45 b3       	in	r20, 0x15	; 21
 27e:	21 e0       	ldi	r18, 0x01	; 1
 280:	30 e0       	ldi	r19, 0x00	; 0
 282:	b9 01       	movw	r22, r18
 284:	02 c0       	rjmp	.+4      	; 0x28a <DIO_write+0xbc>
 286:	66 0f       	add	r22, r22
 288:	77 1f       	adc	r23, r23
 28a:	8a 95       	dec	r24
 28c:	e2 f7       	brpl	.-8      	; 0x286 <DIO_write+0xb8>
 28e:	cb 01       	movw	r24, r22
 290:	80 95       	com	r24
 292:	84 23       	and	r24, r20
 294:	85 bb       	out	0x15, r24	; 21
 296:	08 95       	ret
 298:	61 30       	cpi	r22, 0x01	; 1
 29a:	69 f4       	brne	.+26     	; 0x2b6 <DIO_write+0xe8>
 29c:	42 b3       	in	r20, 0x12	; 18
 29e:	21 e0       	ldi	r18, 0x01	; 1
 2a0:	30 e0       	ldi	r19, 0x00	; 0
 2a2:	b9 01       	movw	r22, r18
 2a4:	02 c0       	rjmp	.+4      	; 0x2aa <DIO_write+0xdc>
 2a6:	66 0f       	add	r22, r22
 2a8:	77 1f       	adc	r23, r23
 2aa:	8a 95       	dec	r24
 2ac:	e2 f7       	brpl	.-8      	; 0x2a6 <DIO_write+0xd8>
 2ae:	cb 01       	movw	r24, r22
 2b0:	84 2b       	or	r24, r20
 2b2:	82 bb       	out	0x12, r24	; 18
 2b4:	08 95       	ret
 2b6:	42 b3       	in	r20, 0x12	; 18
 2b8:	21 e0       	ldi	r18, 0x01	; 1
 2ba:	30 e0       	ldi	r19, 0x00	; 0
 2bc:	b9 01       	movw	r22, r18
 2be:	02 c0       	rjmp	.+4      	; 0x2c4 <DIO_write+0xf6>
 2c0:	66 0f       	add	r22, r22
 2c2:	77 1f       	adc	r23, r23
 2c4:	8a 95       	dec	r24
 2c6:	e2 f7       	brpl	.-8      	; 0x2c0 <DIO_write+0xf2>
 2c8:	cb 01       	movw	r24, r22
 2ca:	80 95       	com	r24
 2cc:	84 23       	and	r24, r20
 2ce:	82 bb       	out	0x12, r24	; 18
 2d0:	08 95       	ret

000002d2 <DIO_WritePort>:

void DIO_WritePort(DIO_PortTypes portx, uint8 data){
	switch(portx){
 2d2:	81 30       	cpi	r24, 0x01	; 1
 2d4:	41 f0       	breq	.+16     	; 0x2e6 <DIO_WritePort+0x14>
 2d6:	28 f0       	brcs	.+10     	; 0x2e2 <DIO_WritePort+0x10>
 2d8:	82 30       	cpi	r24, 0x02	; 2
 2da:	39 f0       	breq	.+14     	; 0x2ea <DIO_WritePort+0x18>
 2dc:	83 30       	cpi	r24, 0x03	; 3
 2de:	39 f0       	breq	.+14     	; 0x2ee <DIO_WritePort+0x1c>
 2e0:	08 95       	ret
		case DIO_PortA:
		PORTA_reg= data;
 2e2:	6b bb       	out	0x1b, r22	; 27
		break;
 2e4:	08 95       	ret
		
		case DIO_PortB:
		PORTB_reg= data;
 2e6:	68 bb       	out	0x18, r22	; 24
		break;
 2e8:	08 95       	ret
		
		case DIO_PortC:
		PORTC_reg= data;
 2ea:	65 bb       	out	0x15, r22	; 21
		break;
 2ec:	08 95       	ret
		
		case DIO_PortD:
		PORTD_reg= data;
 2ee:	62 bb       	out	0x12, r22	; 18
 2f0:	08 95       	ret

000002f2 <LCD_Command>:
		LCD_Command((0xC0|(pos & 0x0F)));
		LCD_string(data);
		break;
	}
	
}
 2f2:	cf 93       	push	r28
 2f4:	c8 2f       	mov	r28, r24
 2f6:	68 2f       	mov	r22, r24
 2f8:	60 7f       	andi	r22, 0xF0	; 240
 2fa:	80 e0       	ldi	r24, 0x00	; 0
 2fc:	0e 94 69 01 	call	0x2d2	; 0x2d2 <DIO_WritePort>
 300:	60 e0       	ldi	r22, 0x00	; 0
 302:	89 e0       	ldi	r24, 0x09	; 9
 304:	0e 94 e7 00 	call	0x1ce	; 0x1ce <DIO_write>
 308:	60 e0       	ldi	r22, 0x00	; 0
 30a:	8b e0       	ldi	r24, 0x0B	; 11
 30c:	0e 94 e7 00 	call	0x1ce	; 0x1ce <DIO_write>
 310:	8f e3       	ldi	r24, 0x3F	; 63
 312:	9f e1       	ldi	r25, 0x1F	; 31
 314:	01 97       	sbiw	r24, 0x01	; 1
 316:	f1 f7       	brne	.-4      	; 0x314 <LCD_Command+0x22>
 318:	00 c0       	rjmp	.+0      	; 0x31a <LCD_Command+0x28>
 31a:	00 00       	nop
 31c:	61 e0       	ldi	r22, 0x01	; 1
 31e:	8b e0       	ldi	r24, 0x0B	; 11
 320:	0e 94 e7 00 	call	0x1ce	; 0x1ce <DIO_write>
 324:	8f e3       	ldi	r24, 0x3F	; 63
 326:	9c e9       	ldi	r25, 0x9C	; 156
 328:	01 97       	sbiw	r24, 0x01	; 1
 32a:	f1 f7       	brne	.-4      	; 0x328 <LCD_Command+0x36>
 32c:	00 c0       	rjmp	.+0      	; 0x32e <LCD_Command+0x3c>
 32e:	00 00       	nop
 330:	6c 2f       	mov	r22, r28
 332:	62 95       	swap	r22
 334:	60 7f       	andi	r22, 0xF0	; 240
 336:	80 e0       	ldi	r24, 0x00	; 0
 338:	0e 94 69 01 	call	0x2d2	; 0x2d2 <DIO_WritePort>
 33c:	60 e0       	ldi	r22, 0x00	; 0
 33e:	89 e0       	ldi	r24, 0x09	; 9
 340:	0e 94 e7 00 	call	0x1ce	; 0x1ce <DIO_write>
 344:	60 e0       	ldi	r22, 0x00	; 0
 346:	8b e0       	ldi	r24, 0x0B	; 11
 348:	0e 94 e7 00 	call	0x1ce	; 0x1ce <DIO_write>
 34c:	8f e3       	ldi	r24, 0x3F	; 63
 34e:	9f e1       	ldi	r25, 0x1F	; 31
 350:	01 97       	sbiw	r24, 0x01	; 1
 352:	f1 f7       	brne	.-4      	; 0x350 <LCD_Command+0x5e>
 354:	00 c0       	rjmp	.+0      	; 0x356 <LCD_Command+0x64>
 356:	00 00       	nop
 358:	61 e0       	ldi	r22, 0x01	; 1
 35a:	8b e0       	ldi	r24, 0x0B	; 11
 35c:	0e 94 e7 00 	call	0x1ce	; 0x1ce <DIO_write>
 360:	8f e3       	ldi	r24, 0x3F	; 63
 362:	9f e1       	ldi	r25, 0x1F	; 31
 364:	01 97       	sbiw	r24, 0x01	; 1
 366:	f1 f7       	brne	.-4      	; 0x364 <LCD_Command+0x72>
 368:	00 c0       	rjmp	.+0      	; 0x36a <LCD_Command+0x78>
 36a:	00 00       	nop
 36c:	cf 91       	pop	r28
 36e:	08 95       	ret

00000370 <LCD_init>:
 370:	60 e0       	ldi	r22, 0x00	; 0
 372:	8a e0       	ldi	r24, 0x0A	; 10
 374:	0e 94 e7 00 	call	0x1ce	; 0x1ce <DIO_write>
 378:	2f ef       	ldi	r18, 0xFF	; 255
 37a:	89 ef       	ldi	r24, 0xF9	; 249
 37c:	90 e0       	ldi	r25, 0x00	; 0
 37e:	21 50       	subi	r18, 0x01	; 1
 380:	80 40       	sbci	r24, 0x00	; 0
 382:	90 40       	sbci	r25, 0x00	; 0
 384:	e1 f7       	brne	.-8      	; 0x37e <LCD_init+0xe>
 386:	00 c0       	rjmp	.+0      	; 0x388 <LCD_init+0x18>
 388:	00 00       	nop
 38a:	83 e3       	ldi	r24, 0x33	; 51
 38c:	0e 94 79 01 	call	0x2f2	; 0x2f2 <LCD_Command>
 390:	8f e3       	ldi	r24, 0x3F	; 63
 392:	9f e1       	ldi	r25, 0x1F	; 31
 394:	01 97       	sbiw	r24, 0x01	; 1
 396:	f1 f7       	brne	.-4      	; 0x394 <LCD_init+0x24>
 398:	00 c0       	rjmp	.+0      	; 0x39a <LCD_init+0x2a>
 39a:	00 00       	nop
 39c:	82 e3       	ldi	r24, 0x32	; 50
 39e:	0e 94 79 01 	call	0x2f2	; 0x2f2 <LCD_Command>
 3a2:	88 e2       	ldi	r24, 0x28	; 40
 3a4:	0e 94 79 01 	call	0x2f2	; 0x2f2 <LCD_Command>
 3a8:	86 e0       	ldi	r24, 0x06	; 6
 3aa:	0e 94 79 01 	call	0x2f2	; 0x2f2 <LCD_Command>
 3ae:	8c e0       	ldi	r24, 0x0C	; 12
 3b0:	0e 94 79 01 	call	0x2f2	; 0x2f2 <LCD_Command>
 3b4:	81 e0       	ldi	r24, 0x01	; 1
 3b6:	0e 94 79 01 	call	0x2f2	; 0x2f2 <LCD_Command>
 3ba:	8f e3       	ldi	r24, 0x3F	; 63
 3bc:	9f e1       	ldi	r25, 0x1F	; 31
 3be:	01 97       	sbiw	r24, 0x01	; 1
 3c0:	f1 f7       	brne	.-4      	; 0x3be <LCD_init+0x4e>
 3c2:	00 c0       	rjmp	.+0      	; 0x3c4 <LCD_init+0x54>
 3c4:	00 00       	nop
 3c6:	08 95       	ret

000003c8 <LCD_Send_Char>:
 3c8:	cf 93       	push	r28
 3ca:	c8 2f       	mov	r28, r24
 3cc:	68 2f       	mov	r22, r24
 3ce:	60 7f       	andi	r22, 0xF0	; 240
 3d0:	80 e0       	ldi	r24, 0x00	; 0
 3d2:	0e 94 69 01 	call	0x2d2	; 0x2d2 <DIO_WritePort>
 3d6:	61 e0       	ldi	r22, 0x01	; 1
 3d8:	89 e0       	ldi	r24, 0x09	; 9
 3da:	0e 94 e7 00 	call	0x1ce	; 0x1ce <DIO_write>
 3de:	60 e0       	ldi	r22, 0x00	; 0
 3e0:	8b e0       	ldi	r24, 0x0B	; 11
 3e2:	0e 94 e7 00 	call	0x1ce	; 0x1ce <DIO_write>
 3e6:	8f e3       	ldi	r24, 0x3F	; 63
 3e8:	9f e1       	ldi	r25, 0x1F	; 31
 3ea:	01 97       	sbiw	r24, 0x01	; 1
 3ec:	f1 f7       	brne	.-4      	; 0x3ea <LCD_Send_Char+0x22>
 3ee:	00 c0       	rjmp	.+0      	; 0x3f0 <LCD_Send_Char+0x28>
 3f0:	00 00       	nop
 3f2:	61 e0       	ldi	r22, 0x01	; 1
 3f4:	8b e0       	ldi	r24, 0x0B	; 11
 3f6:	0e 94 e7 00 	call	0x1ce	; 0x1ce <DIO_write>
 3fa:	8f e3       	ldi	r24, 0x3F	; 63
 3fc:	9c e9       	ldi	r25, 0x9C	; 156
 3fe:	01 97       	sbiw	r24, 0x01	; 1
 400:	f1 f7       	brne	.-4      	; 0x3fe <LCD_Send_Char+0x36>
 402:	00 c0       	rjmp	.+0      	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
 404:	00 00       	nop
 406:	6c 2f       	mov	r22, r28
 408:	62 95       	swap	r22
 40a:	60 7f       	andi	r22, 0xF0	; 240
 40c:	80 e0       	ldi	r24, 0x00	; 0
 40e:	0e 94 69 01 	call	0x2d2	; 0x2d2 <DIO_WritePort>
 412:	61 e0       	ldi	r22, 0x01	; 1
 414:	89 e0       	ldi	r24, 0x09	; 9
 416:	0e 94 e7 00 	call	0x1ce	; 0x1ce <DIO_write>
 41a:	60 e0       	ldi	r22, 0x00	; 0
 41c:	8b e0       	ldi	r24, 0x0B	; 11
 41e:	0e 94 e7 00 	call	0x1ce	; 0x1ce <DIO_write>
 422:	8f e3       	ldi	r24, 0x3F	; 63
 424:	9f e1       	ldi	r25, 0x1F	; 31
 426:	01 97       	sbiw	r24, 0x01	; 1
 428:	f1 f7       	brne	.-4      	; 0x426 <__EEPROM_REGION_LENGTH__+0x26>
 42a:	00 c0       	rjmp	.+0      	; 0x42c <__EEPROM_REGION_LENGTH__+0x2c>
 42c:	00 00       	nop
 42e:	61 e0       	ldi	r22, 0x01	; 1
 430:	8b e0       	ldi	r24, 0x0B	; 11
 432:	0e 94 e7 00 	call	0x1ce	; 0x1ce <DIO_write>
 436:	8f e3       	ldi	r24, 0x3F	; 63
 438:	9f e1       	ldi	r25, 0x1F	; 31
 43a:	01 97       	sbiw	r24, 0x01	; 1
 43c:	f1 f7       	brne	.-4      	; 0x43a <__EEPROM_REGION_LENGTH__+0x3a>
 43e:	00 c0       	rjmp	.+0      	; 0x440 <__EEPROM_REGION_LENGTH__+0x40>
 440:	00 00       	nop
 442:	cf 91       	pop	r28
 444:	08 95       	ret

00000446 <LCD_Custom_Char>:

void LCD_Custom_Char (unsigned char loc, unsigned char *msg)
{
 446:	0f 93       	push	r16
 448:	1f 93       	push	r17
 44a:	cf 93       	push	r28
	unsigned char i;
	if(loc<8)
 44c:	88 30       	cpi	r24, 0x08	; 8
 44e:	98 f4       	brcc	.+38     	; 0x476 <LCD_Custom_Char+0x30>
 450:	8b 01       	movw	r16, r22
	{
		LCD_Command (0x40 + (loc*8));	/* Command 0x40 and onwards forces the device to point CGRAM address */
 452:	90 e0       	ldi	r25, 0x00	; 0
 454:	08 96       	adiw	r24, 0x08	; 8
 456:	88 0f       	add	r24, r24
 458:	88 0f       	add	r24, r24
 45a:	88 0f       	add	r24, r24
 45c:	0e 94 79 01 	call	0x2f2	; 0x2f2 <LCD_Command>
		for(i=0;i<8;i++)	/* Write 8 byte for generation of 1 character */
 460:	c0 e0       	ldi	r28, 0x00	; 0
 462:	07 c0       	rjmp	.+14     	; 0x472 <LCD_Custom_Char+0x2c>
		LCD_Send_Char(msg[i]);
 464:	f8 01       	movw	r30, r16
 466:	ec 0f       	add	r30, r28
 468:	f1 1d       	adc	r31, r1
 46a:	80 81       	ld	r24, Z
 46c:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <LCD_Send_Char>
{
	unsigned char i;
	if(loc<8)
	{
		LCD_Command (0x40 + (loc*8));	/* Command 0x40 and onwards forces the device to point CGRAM address */
		for(i=0;i<8;i++)	/* Write 8 byte for generation of 1 character */
 470:	cf 5f       	subi	r28, 0xFF	; 255
 472:	c8 30       	cpi	r28, 0x08	; 8
 474:	b8 f3       	brcs	.-18     	; 0x464 <LCD_Custom_Char+0x1e>
		LCD_Send_Char(msg[i]);
	}
}
 476:	cf 91       	pop	r28
 478:	1f 91       	pop	r17
 47a:	0f 91       	pop	r16
 47c:	08 95       	ret

0000047e <main>:
#include "DIO.h"
#include "LCD.h"


int main(void)
{
 47e:	cf 93       	push	r28
 480:	df 93       	push	r29
 482:	cd b7       	in	r28, 0x3d	; 61
 484:	de b7       	in	r29, 0x3e	; 62
 486:	c0 54       	subi	r28, 0x40	; 64
 488:	d1 09       	sbc	r29, r1
 48a:	0f b6       	in	r0, 0x3f	; 63
 48c:	f8 94       	cli
 48e:	de bf       	out	0x3e, r29	; 62
 490:	0f be       	out	0x3f, r0	; 63
 492:	cd bf       	out	0x3d, r28	; 61
	



	DIO_Init();
 494:	0e 94 41 00 	call	0x82	; 0x82 <DIO_Init>
	LCD_init();
 498:	0e 94 b8 01 	call	0x370	; 0x370 <LCD_init>
	unsigned char Character1[8] = { 0x00, 0x0A, 0x15, 0x11, 0x0A, 0x04, 0x00, 0x00 };  /* Custom char set for alphanumeric LCD Module */
 49c:	88 e0       	ldi	r24, 0x08	; 8
 49e:	e0 e6       	ldi	r30, 0x60	; 96
 4a0:	f0 e0       	ldi	r31, 0x00	; 0
 4a2:	de 01       	movw	r26, r28
 4a4:	11 96       	adiw	r26, 0x01	; 1
 4a6:	01 90       	ld	r0, Z+
 4a8:	0d 92       	st	X+, r0
 4aa:	8a 95       	dec	r24
 4ac:	e1 f7       	brne	.-8      	; 0x4a6 <main+0x28>
	unsigned char Character2[8] = { 0x04, 0x1F, 0x11, 0x11, 0x1F, 0x1F, 0x1F, 0x1F };
 4ae:	88 e0       	ldi	r24, 0x08	; 8
 4b0:	e8 e6       	ldi	r30, 0x68	; 104
 4b2:	f0 e0       	ldi	r31, 0x00	; 0
 4b4:	de 01       	movw	r26, r28
 4b6:	19 96       	adiw	r26, 0x09	; 9
 4b8:	01 90       	ld	r0, Z+
 4ba:	0d 92       	st	X+, r0
 4bc:	8a 95       	dec	r24
 4be:	e1 f7       	brne	.-8      	; 0x4b8 <main+0x3a>
	unsigned char Character3[8] = { 0x04, 0x0E, 0x0E, 0x0E, 0x1F, 0x00, 0x04, 0x00 };
 4c0:	88 e0       	ldi	r24, 0x08	; 8
 4c2:	e0 e7       	ldi	r30, 0x70	; 112
 4c4:	f0 e0       	ldi	r31, 0x00	; 0
 4c6:	de 01       	movw	r26, r28
 4c8:	51 96       	adiw	r26, 0x11	; 17
 4ca:	01 90       	ld	r0, Z+
 4cc:	0d 92       	st	X+, r0
 4ce:	8a 95       	dec	r24
 4d0:	e1 f7       	brne	.-8      	; 0x4ca <main+0x4c>
	unsigned char Character4[8] = { 0x01, 0x03, 0x07, 0x1F, 0x1F, 0x07, 0x03, 0x01 };
 4d2:	88 e0       	ldi	r24, 0x08	; 8
 4d4:	e8 e7       	ldi	r30, 0x78	; 120
 4d6:	f0 e0       	ldi	r31, 0x00	; 0
 4d8:	de 01       	movw	r26, r28
 4da:	59 96       	adiw	r26, 0x19	; 25
 4dc:	01 90       	ld	r0, Z+
 4de:	0d 92       	st	X+, r0
 4e0:	8a 95       	dec	r24
 4e2:	e1 f7       	brne	.-8      	; 0x4dc <main+0x5e>
	unsigned char Character5[8] = { 0x01, 0x03, 0x05, 0x09, 0x09, 0x0B, 0x1B, 0x18 };
 4e4:	88 e0       	ldi	r24, 0x08	; 8
 4e6:	e0 e8       	ldi	r30, 0x80	; 128
 4e8:	f0 e0       	ldi	r31, 0x00	; 0
 4ea:	de 01       	movw	r26, r28
 4ec:	91 96       	adiw	r26, 0x21	; 33
 4ee:	01 90       	ld	r0, Z+
 4f0:	0d 92       	st	X+, r0
 4f2:	8a 95       	dec	r24
 4f4:	e1 f7       	brne	.-8      	; 0x4ee <main+0x70>
	unsigned char Character6[8] = { 0x0A, 0x0A, 0x1F, 0x11, 0x11, 0x0E, 0x04, 0x04 };
 4f6:	88 e0       	ldi	r24, 0x08	; 8
 4f8:	e8 e8       	ldi	r30, 0x88	; 136
 4fa:	f0 e0       	ldi	r31, 0x00	; 0
 4fc:	de 01       	movw	r26, r28
 4fe:	99 96       	adiw	r26, 0x29	; 41
 500:	01 90       	ld	r0, Z+
 502:	0d 92       	st	X+, r0
 504:	8a 95       	dec	r24
 506:	e1 f7       	brne	.-8      	; 0x500 <main+0x82>
	unsigned char Character7[8] = { 0x00, 0x00, 0x0A, 0x00, 0x04, 0x11, 0x0E, 0x00 };
 508:	88 e0       	ldi	r24, 0x08	; 8
 50a:	e0 e9       	ldi	r30, 0x90	; 144
 50c:	f0 e0       	ldi	r31, 0x00	; 0
 50e:	de 01       	movw	r26, r28
 510:	d1 96       	adiw	r26, 0x31	; 49
 512:	01 90       	ld	r0, Z+
 514:	0d 92       	st	X+, r0
 516:	8a 95       	dec	r24
 518:	e1 f7       	brne	.-8      	; 0x512 <main+0x94>
	unsigned char Character8[8] = { 0x00, 0x0A, 0x1F, 0x1F, 0x0E, 0x04, 0x00, 0x00 };
 51a:	88 e0       	ldi	r24, 0x08	; 8
 51c:	e8 e9       	ldi	r30, 0x98	; 152
 51e:	f0 e0       	ldi	r31, 0x00	; 0
 520:	de 01       	movw	r26, r28
 522:	d9 96       	adiw	r26, 0x39	; 57
 524:	01 90       	ld	r0, Z+
 526:	0d 92       	st	X+, r0
 528:	8a 95       	dec	r24
 52a:	e1 f7       	brne	.-8      	; 0x524 <main+0xa6>
	LCD_Custom_Char(0, Character1);  /* Build Character1 at position 0 */
 52c:	be 01       	movw	r22, r28
 52e:	6f 5f       	subi	r22, 0xFF	; 255
 530:	7f 4f       	sbci	r23, 0xFF	; 255
 532:	80 e0       	ldi	r24, 0x00	; 0
 534:	0e 94 23 02 	call	0x446	; 0x446 <LCD_Custom_Char>
	LCD_Custom_Char(1, Character2);  /* Build Character2 at position 1 */
 538:	be 01       	movw	r22, r28
 53a:	67 5f       	subi	r22, 0xF7	; 247
 53c:	7f 4f       	sbci	r23, 0xFF	; 255
 53e:	81 e0       	ldi	r24, 0x01	; 1
 540:	0e 94 23 02 	call	0x446	; 0x446 <LCD_Custom_Char>
	LCD_Custom_Char(2, Character3);  /* Build Character3 at position 2 */
 544:	be 01       	movw	r22, r28
 546:	6f 5e       	subi	r22, 0xEF	; 239
 548:	7f 4f       	sbci	r23, 0xFF	; 255
 54a:	82 e0       	ldi	r24, 0x02	; 2
 54c:	0e 94 23 02 	call	0x446	; 0x446 <LCD_Custom_Char>
	LCD_Custom_Char(3, Character4);  /* Build Character4 at position 3 */
 550:	be 01       	movw	r22, r28
 552:	67 5e       	subi	r22, 0xE7	; 231
 554:	7f 4f       	sbci	r23, 0xFF	; 255
 556:	83 e0       	ldi	r24, 0x03	; 3
 558:	0e 94 23 02 	call	0x446	; 0x446 <LCD_Custom_Char>
	LCD_Custom_Char(4, Character5);  /* Build Character5 at position 4 */
 55c:	be 01       	movw	r22, r28
 55e:	6f 5d       	subi	r22, 0xDF	; 223
 560:	7f 4f       	sbci	r23, 0xFF	; 255
 562:	84 e0       	ldi	r24, 0x04	; 4
 564:	0e 94 23 02 	call	0x446	; 0x446 <LCD_Custom_Char>
	LCD_Custom_Char(5, Character6);  /* Build Character6 at position 5 */
 568:	be 01       	movw	r22, r28
 56a:	67 5d       	subi	r22, 0xD7	; 215
 56c:	7f 4f       	sbci	r23, 0xFF	; 255
 56e:	85 e0       	ldi	r24, 0x05	; 5
 570:	0e 94 23 02 	call	0x446	; 0x446 <LCD_Custom_Char>
	LCD_Custom_Char(6, Character7);  /* Build Character6 at position 6 */
 574:	be 01       	movw	r22, r28
 576:	6f 5c       	subi	r22, 0xCF	; 207
 578:	7f 4f       	sbci	r23, 0xFF	; 255
 57a:	86 e0       	ldi	r24, 0x06	; 6
 57c:	0e 94 23 02 	call	0x446	; 0x446 <LCD_Custom_Char>
	LCD_Custom_Char(7, Character8);  /* Build Character6 at position 7 */
 580:	be 01       	movw	r22, r28
 582:	67 5c       	subi	r22, 0xC7	; 199
 584:	7f 4f       	sbci	r23, 0xFF	; 255
 586:	87 e0       	ldi	r24, 0x07	; 7
 588:	0e 94 23 02 	call	0x446	; 0x446 <LCD_Custom_Char>
	LCD_Command(0xC0);
 58c:	80 ec       	ldi	r24, 0xC0	; 192
 58e:	0e 94 79 01 	call	0x2f2	; 0x2f2 <LCD_Command>
//	LCD_Send_Char("I LOVE ARAFAT");
	//char arr[]="MOHAMED ARAFAT";
	//LCD_string(arr);
	// LCD_GoTo (2,5,arr);
	uint8 i=0;
	for(i=0;i<8;i++){
 592:	10 e0       	ldi	r17, 0x00	; 0
 594:	07 c0       	rjmp	.+14     	; 0x5a4 <main+0x126>
		LCD_Send_Char(i);
 596:	81 2f       	mov	r24, r17
 598:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <LCD_Send_Char>
		LCD_Send_Char(' ');
 59c:	80 e2       	ldi	r24, 0x20	; 32
 59e:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <LCD_Send_Char>
//	LCD_Send_Char("I LOVE ARAFAT");
	//char arr[]="MOHAMED ARAFAT";
	//LCD_string(arr);
	// LCD_GoTo (2,5,arr);
	uint8 i=0;
	for(i=0;i<8;i++){
 5a2:	1f 5f       	subi	r17, 0xFF	; 255
 5a4:	18 30       	cpi	r17, 0x08	; 8
 5a6:	b8 f3       	brcs	.-18     	; 0x596 <main+0x118>
 5a8:	ff cf       	rjmp	.-2      	; 0x5a8 <main+0x12a>

000005aa <_exit>:
 5aa:	f8 94       	cli

000005ac <__stop_program>:
 5ac:	ff cf       	rjmp	.-2      	; 0x5ac <__stop_program>
