
KEYPAD_layered_arch.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000208  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000025c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000025c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000028c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000058  00000000  00000000  000002c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000690  00000000  00000000  00000320  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000055c  00000000  00000000  000009b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000439  00000000  00000000  00000f0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000078  00000000  00000000  00001348  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000031b  00000000  00000000  000013c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000038  00000000  00000000  000016db  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e0       	ldi	r30, 0x08	; 8
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <main>
  7a:	0c 94 02 01 	jmp	0x204	; 0x204 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <check1>:

#include "KeyPad.h"
#include "bit_math.h"

void check1(void){
	PORTD_reg=0xEF;
  82:	8f ee       	ldi	r24, 0xEF	; 239
  84:	82 bb       	out	0x12, r24	; 18
	if(get_bit(PIND_reg,C1) == 0){
  86:	80 99       	sbic	0x10, 0	; 16
  88:	09 c0       	rjmp	.+18     	; 0x9c <check1+0x1a>
		set_bit(PORTC,1);
  8a:	85 b3       	in	r24, 0x15	; 21
  8c:	82 60       	ori	r24, 0x02	; 2
  8e:	85 bb       	out	0x15, r24	; 21
		while(get_bit(PIND_reg,C1) == 0);
  90:	80 9b       	sbis	0x10, 0	; 16
  92:	fe cf       	rjmp	.-4      	; 0x90 <check1+0xe>
		reset_bit(PORTC,1);
  94:	85 b3       	in	r24, 0x15	; 21
  96:	8d 7f       	andi	r24, 0xFD	; 253
  98:	85 bb       	out	0x15, r24	; 21
  9a:	08 95       	ret
	}
	else if (get_bit(PIND_reg,C2) == 0)
  9c:	81 99       	sbic	0x10, 1	; 16
  9e:	09 c0       	rjmp	.+18     	; 0xb2 <check1+0x30>
	{
		set_bit(PORTC,1);
  a0:	85 b3       	in	r24, 0x15	; 21
  a2:	82 60       	ori	r24, 0x02	; 2
  a4:	85 bb       	out	0x15, r24	; 21
		while(get_bit(PIND_reg,C2) == 0);
  a6:	81 9b       	sbis	0x10, 1	; 16
  a8:	fe cf       	rjmp	.-4      	; 0xa6 <check1+0x24>
		reset_bit(PORTC,1);
  aa:	85 b3       	in	r24, 0x15	; 21
  ac:	8d 7f       	andi	r24, 0xFD	; 253
  ae:	85 bb       	out	0x15, r24	; 21
  b0:	08 95       	ret
	}
	else if (get_bit(PIND_reg,C3) == 0)
  b2:	82 99       	sbic	0x10, 2	; 16
  b4:	09 c0       	rjmp	.+18     	; 0xc8 <check1+0x46>
	{
		set_bit(PORTC,1);
  b6:	85 b3       	in	r24, 0x15	; 21
  b8:	82 60       	ori	r24, 0x02	; 2
  ba:	85 bb       	out	0x15, r24	; 21
		while(get_bit(PIND_reg,C3) == 0);
  bc:	82 9b       	sbis	0x10, 2	; 16
  be:	fe cf       	rjmp	.-4      	; 0xbc <check1+0x3a>
		reset_bit(PORTC,1);
  c0:	85 b3       	in	r24, 0x15	; 21
  c2:	8d 7f       	andi	r24, 0xFD	; 253
  c4:	85 bb       	out	0x15, r24	; 21
  c6:	08 95       	ret
	}
	else if (get_bit(PIND_reg,C4) == 0)
  c8:	83 99       	sbic	0x10, 3	; 16
  ca:	08 c0       	rjmp	.+16     	; 0xdc <check1+0x5a>
	{
		set_bit(PORTC,1);
  cc:	85 b3       	in	r24, 0x15	; 21
  ce:	82 60       	ori	r24, 0x02	; 2
  d0:	85 bb       	out	0x15, r24	; 21
		while(get_bit(PIND_reg,C4) == 0);
  d2:	83 9b       	sbis	0x10, 3	; 16
  d4:	fe cf       	rjmp	.-4      	; 0xd2 <check1+0x50>
		reset_bit(PORTC,1);
  d6:	85 b3       	in	r24, 0x15	; 21
  d8:	8d 7f       	andi	r24, 0xFD	; 253
  da:	85 bb       	out	0x15, r24	; 21
  dc:	08 95       	ret

000000de <check2>:
	}
}


void check2(void){
	PORTD_reg=0xDF;
  de:	8f ed       	ldi	r24, 0xDF	; 223
  e0:	82 bb       	out	0x12, r24	; 18
	if(get_bit(PIND_reg,C1) == 0){
  e2:	80 99       	sbic	0x10, 0	; 16
  e4:	09 c0       	rjmp	.+18     	; 0xf8 <check2+0x1a>
		set_bit(PORTC,1);
  e6:	85 b3       	in	r24, 0x15	; 21
  e8:	82 60       	ori	r24, 0x02	; 2
  ea:	85 bb       	out	0x15, r24	; 21
		while(get_bit(PIND_reg,C1) == 0);
  ec:	80 9b       	sbis	0x10, 0	; 16
  ee:	fe cf       	rjmp	.-4      	; 0xec <check2+0xe>
		reset_bit(PORTC,1);
  f0:	85 b3       	in	r24, 0x15	; 21
  f2:	8d 7f       	andi	r24, 0xFD	; 253
  f4:	85 bb       	out	0x15, r24	; 21
  f6:	08 95       	ret
	}
	else if (get_bit(PIND_reg,C2) == 0)
  f8:	81 99       	sbic	0x10, 1	; 16
  fa:	09 c0       	rjmp	.+18     	; 0x10e <check2+0x30>
	{
		set_bit(PORTC,1);
  fc:	85 b3       	in	r24, 0x15	; 21
  fe:	82 60       	ori	r24, 0x02	; 2
 100:	85 bb       	out	0x15, r24	; 21
		while(get_bit(PIND_reg,C2) == 0);
 102:	81 9b       	sbis	0x10, 1	; 16
 104:	fe cf       	rjmp	.-4      	; 0x102 <check2+0x24>
		reset_bit(PORTC,1);
 106:	85 b3       	in	r24, 0x15	; 21
 108:	8d 7f       	andi	r24, 0xFD	; 253
 10a:	85 bb       	out	0x15, r24	; 21
 10c:	08 95       	ret
	}
	else if (get_bit(PIND_reg,C3) == 0)
 10e:	82 99       	sbic	0x10, 2	; 16
 110:	09 c0       	rjmp	.+18     	; 0x124 <check2+0x46>
	{
		set_bit(PORTC,1);
 112:	85 b3       	in	r24, 0x15	; 21
 114:	82 60       	ori	r24, 0x02	; 2
 116:	85 bb       	out	0x15, r24	; 21
		while(get_bit(PIND_reg,C3) == 0);
 118:	82 9b       	sbis	0x10, 2	; 16
 11a:	fe cf       	rjmp	.-4      	; 0x118 <check2+0x3a>
		reset_bit(PORTC,1);
 11c:	85 b3       	in	r24, 0x15	; 21
 11e:	8d 7f       	andi	r24, 0xFD	; 253
 120:	85 bb       	out	0x15, r24	; 21
 122:	08 95       	ret
	}
	else if (get_bit(PIND_reg,C4) == 0)
 124:	83 99       	sbic	0x10, 3	; 16
 126:	08 c0       	rjmp	.+16     	; 0x138 <check2+0x5a>
	{
		set_bit(PORTC,1);
 128:	85 b3       	in	r24, 0x15	; 21
 12a:	82 60       	ori	r24, 0x02	; 2
 12c:	85 bb       	out	0x15, r24	; 21
		while(get_bit(PIND_reg,C4) == 0);
 12e:	83 9b       	sbis	0x10, 3	; 16
 130:	fe cf       	rjmp	.-4      	; 0x12e <check2+0x50>
		reset_bit(PORTC,1);
 132:	85 b3       	in	r24, 0x15	; 21
 134:	8d 7f       	andi	r24, 0xFD	; 253
 136:	85 bb       	out	0x15, r24	; 21
 138:	08 95       	ret

0000013a <check3>:
	}
	
}
void check3(void){
	PORTD_reg=0xBF;
 13a:	8f eb       	ldi	r24, 0xBF	; 191
 13c:	82 bb       	out	0x12, r24	; 18
	if(get_bit(PIND_reg,C1) == 0){
 13e:	80 99       	sbic	0x10, 0	; 16
 140:	09 c0       	rjmp	.+18     	; 0x154 <check3+0x1a>
		set_bit(PORTC,1);
 142:	85 b3       	in	r24, 0x15	; 21
 144:	82 60       	ori	r24, 0x02	; 2
 146:	85 bb       	out	0x15, r24	; 21
		while(get_bit(PIND_reg,C1) == 0);
 148:	80 9b       	sbis	0x10, 0	; 16
 14a:	fe cf       	rjmp	.-4      	; 0x148 <check3+0xe>
		reset_bit(PORTC,1);
 14c:	85 b3       	in	r24, 0x15	; 21
 14e:	8d 7f       	andi	r24, 0xFD	; 253
 150:	85 bb       	out	0x15, r24	; 21
 152:	08 95       	ret
	}
	else if (get_bit(PIND_reg,C2) == 0)
 154:	81 99       	sbic	0x10, 1	; 16
 156:	09 c0       	rjmp	.+18     	; 0x16a <check3+0x30>
	{
		set_bit(PORTC,1);
 158:	85 b3       	in	r24, 0x15	; 21
 15a:	82 60       	ori	r24, 0x02	; 2
 15c:	85 bb       	out	0x15, r24	; 21
		while(get_bit(PIND_reg,C2) == 0);
 15e:	81 9b       	sbis	0x10, 1	; 16
 160:	fe cf       	rjmp	.-4      	; 0x15e <check3+0x24>
		reset_bit(PORTC,1);
 162:	85 b3       	in	r24, 0x15	; 21
 164:	8d 7f       	andi	r24, 0xFD	; 253
 166:	85 bb       	out	0x15, r24	; 21
 168:	08 95       	ret
	}
	else if (get_bit(PIND_reg,C3) == 0)
 16a:	82 99       	sbic	0x10, 2	; 16
 16c:	09 c0       	rjmp	.+18     	; 0x180 <check3+0x46>
	{
		set_bit(PORTC,1);
 16e:	85 b3       	in	r24, 0x15	; 21
 170:	82 60       	ori	r24, 0x02	; 2
 172:	85 bb       	out	0x15, r24	; 21
		while(get_bit(PIND_reg,C3) == 0);
 174:	82 9b       	sbis	0x10, 2	; 16
 176:	fe cf       	rjmp	.-4      	; 0x174 <check3+0x3a>
		reset_bit(PORTC,1);
 178:	85 b3       	in	r24, 0x15	; 21
 17a:	8d 7f       	andi	r24, 0xFD	; 253
 17c:	85 bb       	out	0x15, r24	; 21
 17e:	08 95       	ret
	}
	else if (get_bit(PIND_reg,C4) == 0)
 180:	83 99       	sbic	0x10, 3	; 16
 182:	08 c0       	rjmp	.+16     	; 0x194 <check3+0x5a>
	{
		set_bit(PORTC,1);
 184:	85 b3       	in	r24, 0x15	; 21
 186:	82 60       	ori	r24, 0x02	; 2
 188:	85 bb       	out	0x15, r24	; 21
		while(get_bit(PIND_reg,C4) == 0);
 18a:	83 9b       	sbis	0x10, 3	; 16
 18c:	fe cf       	rjmp	.-4      	; 0x18a <check3+0x50>
		reset_bit(PORTC,1);
 18e:	85 b3       	in	r24, 0x15	; 21
 190:	8d 7f       	andi	r24, 0xFD	; 253
 192:	85 bb       	out	0x15, r24	; 21
 194:	08 95       	ret

00000196 <check4>:
	}
}
void check4(void){
	PORTD_reg=0x7F;
 196:	8f e7       	ldi	r24, 0x7F	; 127
 198:	82 bb       	out	0x12, r24	; 18
	if(get_bit(PIND_reg,C1) == 0){
 19a:	80 99       	sbic	0x10, 0	; 16
 19c:	09 c0       	rjmp	.+18     	; 0x1b0 <check4+0x1a>
		set_bit(PORTC,1);
 19e:	85 b3       	in	r24, 0x15	; 21
 1a0:	82 60       	ori	r24, 0x02	; 2
 1a2:	85 bb       	out	0x15, r24	; 21
		while(get_bit(PIND_reg,C1) == 0);
 1a4:	80 9b       	sbis	0x10, 0	; 16
 1a6:	fe cf       	rjmp	.-4      	; 0x1a4 <check4+0xe>
		reset_bit(PORTC,1);
 1a8:	85 b3       	in	r24, 0x15	; 21
 1aa:	8d 7f       	andi	r24, 0xFD	; 253
 1ac:	85 bb       	out	0x15, r24	; 21
 1ae:	08 95       	ret
	}
	else if (get_bit(PIND_reg,C2) == 0)
 1b0:	81 99       	sbic	0x10, 1	; 16
 1b2:	09 c0       	rjmp	.+18     	; 0x1c6 <check4+0x30>
	{
		set_bit(PORTC,1);
 1b4:	85 b3       	in	r24, 0x15	; 21
 1b6:	82 60       	ori	r24, 0x02	; 2
 1b8:	85 bb       	out	0x15, r24	; 21
		while(get_bit(PIND_reg,C2) == 0);
 1ba:	81 9b       	sbis	0x10, 1	; 16
 1bc:	fe cf       	rjmp	.-4      	; 0x1ba <check4+0x24>
		reset_bit(PORTC,1);
 1be:	85 b3       	in	r24, 0x15	; 21
 1c0:	8d 7f       	andi	r24, 0xFD	; 253
 1c2:	85 bb       	out	0x15, r24	; 21
 1c4:	08 95       	ret
	}
	else if (get_bit(PIND_reg,C3) == 0)
 1c6:	82 99       	sbic	0x10, 2	; 16
 1c8:	09 c0       	rjmp	.+18     	; 0x1dc <check4+0x46>
	{
		set_bit(PORTC,1);
 1ca:	85 b3       	in	r24, 0x15	; 21
 1cc:	82 60       	ori	r24, 0x02	; 2
 1ce:	85 bb       	out	0x15, r24	; 21
		while(get_bit(PIND_reg,C3) == 0);
 1d0:	82 9b       	sbis	0x10, 2	; 16
 1d2:	fe cf       	rjmp	.-4      	; 0x1d0 <check4+0x3a>
		reset_bit(PORTC,1);
 1d4:	85 b3       	in	r24, 0x15	; 21
 1d6:	8d 7f       	andi	r24, 0xFD	; 253
 1d8:	85 bb       	out	0x15, r24	; 21
 1da:	08 95       	ret
	}
	else if (get_bit(PIND_reg,C4) == 0)
 1dc:	83 99       	sbic	0x10, 3	; 16
 1de:	08 c0       	rjmp	.+16     	; 0x1f0 <check4+0x5a>
	{
		set_bit(PORTC,1);
 1e0:	85 b3       	in	r24, 0x15	; 21
 1e2:	82 60       	ori	r24, 0x02	; 2
 1e4:	85 bb       	out	0x15, r24	; 21
		while(get_bit(PIND_reg,C4) == 0);
 1e6:	83 9b       	sbis	0x10, 3	; 16
 1e8:	fe cf       	rjmp	.-4      	; 0x1e6 <check4+0x50>
		reset_bit(PORTC,1);
 1ea:	85 b3       	in	r24, 0x15	; 21
 1ec:	8d 7f       	andi	r24, 0xFD	; 253
 1ee:	85 bb       	out	0x15, r24	; 21
 1f0:	08 95       	ret

000001f2 <main>:
{
	
	/* Replace with your application code */
	while (1)
	{
		check1();
 1f2:	0e 94 41 00 	call	0x82	; 0x82 <check1>
		check2();
 1f6:	0e 94 6f 00 	call	0xde	; 0xde <check2>
		check3();
 1fa:	0e 94 9d 00 	call	0x13a	; 0x13a <check3>
		check4();
 1fe:	0e 94 cb 00 	call	0x196	; 0x196 <check4>
 202:	f7 cf       	rjmp	.-18     	; 0x1f2 <main>

00000204 <_exit>:
 204:	f8 94       	cli

00000206 <__stop_program>:
 206:	ff cf       	rjmp	.-2      	; 0x206 <__stop_program>
