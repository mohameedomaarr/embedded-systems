
SPI_Master.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000fc  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000150  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000150  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000180  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  000001bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000678  00000000  00000000  000001ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005d3  00000000  00000000  00000864  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002c2  00000000  00000000  00000e37  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  000010fc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000343  00000000  00000000  00001140  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000059  00000000  00000000  00001483  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  000014dc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 60 00 	call	0xc0	; 0xc0 <main>
  64:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <SPI_INT>:
		}
	}
}

void SPI_INT(char control){
	switch(control){
  6c:	8d 34       	cpi	r24, 0x4D	; 77
  6e:	19 f0       	breq	.+6      	; 0x76 <SPI_INT+0xa>
  70:	83 35       	cpi	r24, 0x53	; 83
  72:	71 f0       	breq	.+28     	; 0x90 <SPI_INT+0x24>
  74:	19 c0       	rjmp	.+50     	; 0xa8 <SPI_INT+0x3c>
		case 'M':
		set_bit(SPI_DIR,SS);
  76:	87 b3       	in	r24, 0x17	; 23
  78:	80 61       	ori	r24, 0x10	; 16
  7a:	87 bb       	out	0x17, r24	; 23
		set_bit(SPI_DIR,MOSI);
  7c:	87 b3       	in	r24, 0x17	; 23
  7e:	80 62       	ori	r24, 0x20	; 32
  80:	87 bb       	out	0x17, r24	; 23
		set_bit(SPI_DIR,CLK);
  82:	87 b3       	in	r24, 0x17	; 23
  84:	80 68       	ori	r24, 0x80	; 128
  86:	87 bb       	out	0x17, r24	; 23
		reset_bit(SPI_DIR,MISO);
  88:	87 b3       	in	r24, 0x17	; 23
  8a:	8f 7b       	andi	r24, 0xBF	; 191
  8c:	87 bb       	out	0x17, r24	; 23
		break;
  8e:	0c c0       	rjmp	.+24     	; 0xa8 <SPI_INT+0x3c>
		case'S':
		reset_bit(SPI_DIR,SS);
  90:	87 b3       	in	r24, 0x17	; 23
  92:	8f 7e       	andi	r24, 0xEF	; 239
  94:	87 bb       	out	0x17, r24	; 23
		reset_bit(SPI_DIR,MOSI);
  96:	87 b3       	in	r24, 0x17	; 23
  98:	8f 7d       	andi	r24, 0xDF	; 223
  9a:	87 bb       	out	0x17, r24	; 23
		reset_bit(SPI_DIR,CLK);
  9c:	87 b3       	in	r24, 0x17	; 23
  9e:	8f 77       	andi	r24, 0x7F	; 127
  a0:	87 bb       	out	0x17, r24	; 23
		set_bit(SPI_DIR,MISO);
  a2:	87 b3       	in	r24, 0x17	; 23
  a4:	80 64       	ori	r24, 0x40	; 64
  a6:	87 bb       	out	0x17, r24	; 23
		break;
	}
	slave_DIS();
  a8:	88 b3       	in	r24, 0x18	; 24
  aa:	80 61       	ori	r24, 0x10	; 16
  ac:	88 bb       	out	0x18, r24	; 24
	SPCR |= (1<<SPE)|(1<<SPR0)|(1<<MSTR);
  ae:	8d b1       	in	r24, 0x0d	; 13
  b0:	81 65       	ori	r24, 0x51	; 81
  b2:	8d b9       	out	0x0d, r24	; 13
  b4:	08 95       	ret

000000b6 <SPI_TX_RX>:
	
	//set_bit(SPCR,SPE);
	
}
char SPI_TX_RX(char data){
	SPDR = data;
  b6:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR &(1<<SPIF)));
  b8:	77 9b       	sbis	0x0e, 7	; 14
  ba:	fe cf       	rjmp	.-4      	; 0xb8 <SPI_TX_RX+0x2>
	return SPDR;
  bc:	8f b1       	in	r24, 0x0f	; 15
  be:	08 95       	ret

000000c0 <main>:
char SPI_TX_RX(char data);


int main(void)
{
	DDRC |=(1<<1);
  c0:	84 b3       	in	r24, 0x14	; 20
  c2:	82 60       	ori	r24, 0x02	; 2
  c4:	84 bb       	out	0x14, r24	; 20
	SPI_INT('M');
  c6:	8d e4       	ldi	r24, 0x4D	; 77
  c8:	0e 94 36 00 	call	0x6c	; 0x6c <SPI_INT>
	slave_EN();
  cc:	88 b3       	in	r24, 0x18	; 24
  ce:	8f 7e       	andi	r24, 0xEF	; 239
  d0:	88 bb       	out	0x18, r24	; 24
	while (1)
	{
	
		if (SPI_TX_RX('2')==0x55)
  d2:	82 e3       	ldi	r24, 0x32	; 50
  d4:	0e 94 5b 00 	call	0xb6	; 0xb6 <SPI_TX_RX>
  d8:	85 35       	cpi	r24, 0x55	; 85
  da:	d9 f7       	brne	.-10     	; 0xd2 <main+0x12>
		{
			PORTC ^=(1<<1);
  dc:	95 b3       	in	r25, 0x15	; 21
  de:	82 e0       	ldi	r24, 0x02	; 2
  e0:	89 27       	eor	r24, r25
  e2:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e4:	2f ef       	ldi	r18, 0xFF	; 255
  e6:	89 e6       	ldi	r24, 0x69	; 105
  e8:	98 e1       	ldi	r25, 0x18	; 24
  ea:	21 50       	subi	r18, 0x01	; 1
  ec:	80 40       	sbci	r24, 0x00	; 0
  ee:	90 40       	sbci	r25, 0x00	; 0
  f0:	e1 f7       	brne	.-8      	; 0xea <main+0x2a>
  f2:	00 c0       	rjmp	.+0      	; 0xf4 <main+0x34>
  f4:	00 00       	nop
  f6:	ed cf       	rjmp	.-38     	; 0xd2 <main+0x12>

000000f8 <_exit>:
  f8:	f8 94       	cli

000000fa <__stop_program>:
  fa:	ff cf       	rjmp	.-2      	; 0xfa <__stop_program>
