
DIO_layered_arch.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000310  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000038  00800060  00000310  00000384  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000003bc  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000003ec  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000068  00000000  00000000  00000428  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000bc6  00000000  00000000  00000490  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000733  00000000  00000000  00001056  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000044a  00000000  00000000  00001789  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000007c  00000000  00000000  00001bd4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000064b  00000000  00000000  00001c50  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000430  00000000  00000000  0000229b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  000026cb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e1       	ldi	r30, 0x10	; 16
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 39       	cpi	r26, 0x98	; 152
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 69 01 	call	0x2d2	; 0x2d2 <main>
  7a:	0c 94 86 01 	jmp	0x30c	; 0x30c <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <DIO_Init>:

void DIO_Init(void){
	DIO_ChannelTypes DIO_channel;
	DIO_PortTypes PortX;
	uint8 count=0;
	for(count=DIO_ChannelA0;count<pin_count;count++)
  82:	80 e0       	ldi	r24, 0x00	; 0
  84:	a0 c0       	rjmp	.+320    	; 0x1c6 <DIO_Init+0x144>
	{
		PortX=count/8;
  86:	98 2f       	mov	r25, r24
  88:	96 95       	lsr	r25
  8a:	96 95       	lsr	r25
  8c:	96 95       	lsr	r25
		DIO_channel=count%8;
  8e:	28 2f       	mov	r18, r24
  90:	27 70       	andi	r18, 0x07	; 7
		switch(PortX){
  92:	91 30       	cpi	r25, 0x01	; 1
  94:	61 f1       	breq	.+88     	; 0xee <DIO_Init+0x6c>
  96:	38 f0       	brcs	.+14     	; 0xa6 <DIO_Init+0x24>
  98:	92 30       	cpi	r25, 0x02	; 2
  9a:	09 f4       	brne	.+2      	; 0x9e <DIO_Init+0x1c>
  9c:	4c c0       	rjmp	.+152    	; 0x136 <DIO_Init+0xb4>
  9e:	93 30       	cpi	r25, 0x03	; 3
  a0:	09 f4       	brne	.+2      	; 0xa4 <DIO_Init+0x22>
  a2:	6d c0       	rjmp	.+218    	; 0x17e <DIO_Init+0xfc>
  a4:	8f c0       	rjmp	.+286    	; 0x1c4 <DIO_Init+0x142>
			case DIO_PortA :
			if (PinCfg[count].PinDir == Output)
  a6:	e8 2f       	mov	r30, r24
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	ee 0f       	add	r30, r30
  ac:	ff 1f       	adc	r31, r31
  ae:	e0 5a       	subi	r30, 0xA0	; 160
  b0:	ff 4f       	sbci	r31, 0xFF	; 255
  b2:	90 81       	ld	r25, Z
  b4:	91 30       	cpi	r25, 0x01	; 1
  b6:	69 f4       	brne	.+26     	; 0xd2 <DIO_Init+0x50>
			{
				set_bit(DDRA_reg,DIO_channel);
  b8:	9a b3       	in	r25, 0x1a	; 26
  ba:	41 e0       	ldi	r20, 0x01	; 1
  bc:	50 e0       	ldi	r21, 0x00	; 0
  be:	ba 01       	movw	r22, r20
  c0:	02 c0       	rjmp	.+4      	; 0xc6 <DIO_Init+0x44>
  c2:	66 0f       	add	r22, r22
  c4:	77 1f       	adc	r23, r23
  c6:	2a 95       	dec	r18
  c8:	e2 f7       	brpl	.-8      	; 0xc2 <DIO_Init+0x40>
  ca:	9b 01       	movw	r18, r22
  cc:	29 2b       	or	r18, r25
  ce:	2a bb       	out	0x1a, r18	; 26
  d0:	79 c0       	rjmp	.+242    	; 0x1c4 <DIO_Init+0x142>
			}
			else{
				reset_bit(DDRA_reg,DIO_channel);
  d2:	9a b3       	in	r25, 0x1a	; 26
  d4:	41 e0       	ldi	r20, 0x01	; 1
  d6:	50 e0       	ldi	r21, 0x00	; 0
  d8:	ba 01       	movw	r22, r20
  da:	02 c0       	rjmp	.+4      	; 0xe0 <DIO_Init+0x5e>
  dc:	66 0f       	add	r22, r22
  de:	77 1f       	adc	r23, r23
  e0:	2a 95       	dec	r18
  e2:	e2 f7       	brpl	.-8      	; 0xdc <DIO_Init+0x5a>
  e4:	9b 01       	movw	r18, r22
  e6:	20 95       	com	r18
  e8:	29 23       	and	r18, r25
  ea:	2a bb       	out	0x1a, r18	; 26
  ec:	6b c0       	rjmp	.+214    	; 0x1c4 <DIO_Init+0x142>
			}
			break;
			case DIO_PortB :
			if (PinCfg[count].PinDir == Output)
  ee:	e8 2f       	mov	r30, r24
  f0:	f0 e0       	ldi	r31, 0x00	; 0
  f2:	ee 0f       	add	r30, r30
  f4:	ff 1f       	adc	r31, r31
  f6:	e0 5a       	subi	r30, 0xA0	; 160
  f8:	ff 4f       	sbci	r31, 0xFF	; 255
  fa:	90 81       	ld	r25, Z
  fc:	91 30       	cpi	r25, 0x01	; 1
  fe:	69 f4       	brne	.+26     	; 0x11a <DIO_Init+0x98>
			{
				set_bit(DDRB_reg,DIO_channel);
 100:	97 b3       	in	r25, 0x17	; 23
 102:	41 e0       	ldi	r20, 0x01	; 1
 104:	50 e0       	ldi	r21, 0x00	; 0
 106:	ba 01       	movw	r22, r20
 108:	02 c0       	rjmp	.+4      	; 0x10e <DIO_Init+0x8c>
 10a:	66 0f       	add	r22, r22
 10c:	77 1f       	adc	r23, r23
 10e:	2a 95       	dec	r18
 110:	e2 f7       	brpl	.-8      	; 0x10a <DIO_Init+0x88>
 112:	9b 01       	movw	r18, r22
 114:	29 2b       	or	r18, r25
 116:	27 bb       	out	0x17, r18	; 23
 118:	55 c0       	rjmp	.+170    	; 0x1c4 <DIO_Init+0x142>
			}
			else{
				reset_bit(DDRB_reg,DIO_channel);
 11a:	97 b3       	in	r25, 0x17	; 23
 11c:	41 e0       	ldi	r20, 0x01	; 1
 11e:	50 e0       	ldi	r21, 0x00	; 0
 120:	ba 01       	movw	r22, r20
 122:	02 c0       	rjmp	.+4      	; 0x128 <DIO_Init+0xa6>
 124:	66 0f       	add	r22, r22
 126:	77 1f       	adc	r23, r23
 128:	2a 95       	dec	r18
 12a:	e2 f7       	brpl	.-8      	; 0x124 <DIO_Init+0xa2>
 12c:	9b 01       	movw	r18, r22
 12e:	20 95       	com	r18
 130:	29 23       	and	r18, r25
 132:	27 bb       	out	0x17, r18	; 23
 134:	47 c0       	rjmp	.+142    	; 0x1c4 <DIO_Init+0x142>
			}
			break;
			case DIO_PortC :
			if (PinCfg[count].PinDir == Output)
 136:	e8 2f       	mov	r30, r24
 138:	f0 e0       	ldi	r31, 0x00	; 0
 13a:	ee 0f       	add	r30, r30
 13c:	ff 1f       	adc	r31, r31
 13e:	e0 5a       	subi	r30, 0xA0	; 160
 140:	ff 4f       	sbci	r31, 0xFF	; 255
 142:	90 81       	ld	r25, Z
 144:	91 30       	cpi	r25, 0x01	; 1
 146:	69 f4       	brne	.+26     	; 0x162 <DIO_Init+0xe0>
			{
				set_bit(DDRC_reg,DIO_channel);
 148:	94 b3       	in	r25, 0x14	; 20
 14a:	41 e0       	ldi	r20, 0x01	; 1
 14c:	50 e0       	ldi	r21, 0x00	; 0
 14e:	ba 01       	movw	r22, r20
 150:	02 c0       	rjmp	.+4      	; 0x156 <DIO_Init+0xd4>
 152:	66 0f       	add	r22, r22
 154:	77 1f       	adc	r23, r23
 156:	2a 95       	dec	r18
 158:	e2 f7       	brpl	.-8      	; 0x152 <DIO_Init+0xd0>
 15a:	9b 01       	movw	r18, r22
 15c:	29 2b       	or	r18, r25
 15e:	24 bb       	out	0x14, r18	; 20
 160:	31 c0       	rjmp	.+98     	; 0x1c4 <DIO_Init+0x142>
			}
			else{
				reset_bit(DDRC_reg,DIO_channel);
 162:	94 b3       	in	r25, 0x14	; 20
 164:	41 e0       	ldi	r20, 0x01	; 1
 166:	50 e0       	ldi	r21, 0x00	; 0
 168:	ba 01       	movw	r22, r20
 16a:	02 c0       	rjmp	.+4      	; 0x170 <DIO_Init+0xee>
 16c:	66 0f       	add	r22, r22
 16e:	77 1f       	adc	r23, r23
 170:	2a 95       	dec	r18
 172:	e2 f7       	brpl	.-8      	; 0x16c <DIO_Init+0xea>
 174:	9b 01       	movw	r18, r22
 176:	20 95       	com	r18
 178:	29 23       	and	r18, r25
 17a:	24 bb       	out	0x14, r18	; 20
 17c:	23 c0       	rjmp	.+70     	; 0x1c4 <DIO_Init+0x142>
			}
			break;
			case DIO_PortD :
			if (PinCfg[count].PinDir == Output)
 17e:	e8 2f       	mov	r30, r24
 180:	f0 e0       	ldi	r31, 0x00	; 0
 182:	ee 0f       	add	r30, r30
 184:	ff 1f       	adc	r31, r31
 186:	e0 5a       	subi	r30, 0xA0	; 160
 188:	ff 4f       	sbci	r31, 0xFF	; 255
 18a:	90 81       	ld	r25, Z
 18c:	91 30       	cpi	r25, 0x01	; 1
 18e:	69 f4       	brne	.+26     	; 0x1aa <DIO_Init+0x128>
			{
				set_bit(DDRD_reg,DIO_channel);
 190:	91 b3       	in	r25, 0x11	; 17
 192:	41 e0       	ldi	r20, 0x01	; 1
 194:	50 e0       	ldi	r21, 0x00	; 0
 196:	ba 01       	movw	r22, r20
 198:	02 c0       	rjmp	.+4      	; 0x19e <DIO_Init+0x11c>
 19a:	66 0f       	add	r22, r22
 19c:	77 1f       	adc	r23, r23
 19e:	2a 95       	dec	r18
 1a0:	e2 f7       	brpl	.-8      	; 0x19a <DIO_Init+0x118>
 1a2:	9b 01       	movw	r18, r22
 1a4:	29 2b       	or	r18, r25
 1a6:	21 bb       	out	0x11, r18	; 17
 1a8:	0d c0       	rjmp	.+26     	; 0x1c4 <DIO_Init+0x142>
			}
			else{
				reset_bit(DDRD_reg,DIO_channel);
 1aa:	91 b3       	in	r25, 0x11	; 17
 1ac:	41 e0       	ldi	r20, 0x01	; 1
 1ae:	50 e0       	ldi	r21, 0x00	; 0
 1b0:	ba 01       	movw	r22, r20
 1b2:	02 c0       	rjmp	.+4      	; 0x1b8 <DIO_Init+0x136>
 1b4:	66 0f       	add	r22, r22
 1b6:	77 1f       	adc	r23, r23
 1b8:	2a 95       	dec	r18
 1ba:	e2 f7       	brpl	.-8      	; 0x1b4 <DIO_Init+0x132>
 1bc:	9b 01       	movw	r18, r22
 1be:	20 95       	com	r18
 1c0:	29 23       	and	r18, r25
 1c2:	21 bb       	out	0x11, r18	; 17

void DIO_Init(void){
	DIO_ChannelTypes DIO_channel;
	DIO_PortTypes PortX;
	uint8 count=0;
	for(count=DIO_ChannelA0;count<pin_count;count++)
 1c4:	8f 5f       	subi	r24, 0xFF	; 255
 1c6:	80 32       	cpi	r24, 0x20	; 32
 1c8:	08 f4       	brcc	.+2      	; 0x1cc <DIO_Init+0x14a>
 1ca:	5d cf       	rjmp	.-326    	; 0x86 <DIO_Init+0x4>
			}
			break;
			
		}
	}
}
 1cc:	08 95       	ret

000001ce <DIO_write>:
#include "DIO_HW.h"
#include "bit_math.h"


void DIO_write(DIO_ChannelTypes channelID,STD_LevelTypes level){
	DIO_PortTypes Portx = channelID/8 ;
 1ce:	98 2f       	mov	r25, r24
 1d0:	96 95       	lsr	r25
 1d2:	96 95       	lsr	r25
 1d4:	96 95       	lsr	r25
	DIO_ChannelTypes ChannelPos = channelID%8;
 1d6:	87 70       	andi	r24, 0x07	; 7
	switch(Portx){
 1d8:	91 30       	cpi	r25, 0x01	; 1
 1da:	21 f1       	breq	.+72     	; 0x224 <DIO_write+0x56>
 1dc:	30 f0       	brcs	.+12     	; 0x1ea <DIO_write+0x1c>
 1de:	92 30       	cpi	r25, 0x02	; 2
 1e0:	f1 f1       	breq	.+124    	; 0x25e <DIO_write+0x90>
 1e2:	93 30       	cpi	r25, 0x03	; 3
 1e4:	09 f4       	brne	.+2      	; 0x1e8 <DIO_write+0x1a>
 1e6:	58 c0       	rjmp	.+176    	; 0x298 <DIO_write+0xca>
 1e8:	08 95       	ret
		case DIO_PortA :
		if(level == STD_high){
 1ea:	61 30       	cpi	r22, 0x01	; 1
 1ec:	69 f4       	brne	.+26     	; 0x208 <DIO_write+0x3a>
			set_bit(PORTA_reg,ChannelPos);
 1ee:	4b b3       	in	r20, 0x1b	; 27
 1f0:	21 e0       	ldi	r18, 0x01	; 1
 1f2:	30 e0       	ldi	r19, 0x00	; 0
 1f4:	b9 01       	movw	r22, r18
 1f6:	02 c0       	rjmp	.+4      	; 0x1fc <DIO_write+0x2e>
 1f8:	66 0f       	add	r22, r22
 1fa:	77 1f       	adc	r23, r23
 1fc:	8a 95       	dec	r24
 1fe:	e2 f7       	brpl	.-8      	; 0x1f8 <DIO_write+0x2a>
 200:	cb 01       	movw	r24, r22
 202:	84 2b       	or	r24, r20
 204:	8b bb       	out	0x1b, r24	; 27
 206:	08 95       	ret
		}
		else{
			reset_bit(PORTA_reg,ChannelPos);
 208:	4b b3       	in	r20, 0x1b	; 27
 20a:	21 e0       	ldi	r18, 0x01	; 1
 20c:	30 e0       	ldi	r19, 0x00	; 0
 20e:	b9 01       	movw	r22, r18
 210:	02 c0       	rjmp	.+4      	; 0x216 <DIO_write+0x48>
 212:	66 0f       	add	r22, r22
 214:	77 1f       	adc	r23, r23
 216:	8a 95       	dec	r24
 218:	e2 f7       	brpl	.-8      	; 0x212 <DIO_write+0x44>
 21a:	cb 01       	movw	r24, r22
 21c:	80 95       	com	r24
 21e:	84 23       	and	r24, r20
 220:	8b bb       	out	0x1b, r24	; 27
 222:	08 95       	ret
		break;
		
		
		
		case DIO_PortB :
		if(level == STD_high){
 224:	61 30       	cpi	r22, 0x01	; 1
 226:	69 f4       	brne	.+26     	; 0x242 <DIO_write+0x74>
			set_bit(PORTB_reg,ChannelPos);
 228:	48 b3       	in	r20, 0x18	; 24
 22a:	21 e0       	ldi	r18, 0x01	; 1
 22c:	30 e0       	ldi	r19, 0x00	; 0
 22e:	b9 01       	movw	r22, r18
 230:	02 c0       	rjmp	.+4      	; 0x236 <DIO_write+0x68>
 232:	66 0f       	add	r22, r22
 234:	77 1f       	adc	r23, r23
 236:	8a 95       	dec	r24
 238:	e2 f7       	brpl	.-8      	; 0x232 <DIO_write+0x64>
 23a:	cb 01       	movw	r24, r22
 23c:	84 2b       	or	r24, r20
 23e:	88 bb       	out	0x18, r24	; 24
 240:	08 95       	ret
		}
		else{
			reset_bit(PORTB_reg,ChannelPos);
 242:	48 b3       	in	r20, 0x18	; 24
 244:	21 e0       	ldi	r18, 0x01	; 1
 246:	30 e0       	ldi	r19, 0x00	; 0
 248:	b9 01       	movw	r22, r18
 24a:	02 c0       	rjmp	.+4      	; 0x250 <DIO_write+0x82>
 24c:	66 0f       	add	r22, r22
 24e:	77 1f       	adc	r23, r23
 250:	8a 95       	dec	r24
 252:	e2 f7       	brpl	.-8      	; 0x24c <DIO_write+0x7e>
 254:	cb 01       	movw	r24, r22
 256:	80 95       	com	r24
 258:	84 23       	and	r24, r20
 25a:	88 bb       	out	0x18, r24	; 24
 25c:	08 95       	ret
		}
		break;
		
		case DIO_PortC :
		if(level == STD_high){
 25e:	61 30       	cpi	r22, 0x01	; 1
 260:	69 f4       	brne	.+26     	; 0x27c <DIO_write+0xae>
			set_bit(PORTC_reg,ChannelPos);
 262:	45 b3       	in	r20, 0x15	; 21
 264:	21 e0       	ldi	r18, 0x01	; 1
 266:	30 e0       	ldi	r19, 0x00	; 0
 268:	b9 01       	movw	r22, r18
 26a:	02 c0       	rjmp	.+4      	; 0x270 <DIO_write+0xa2>
 26c:	66 0f       	add	r22, r22
 26e:	77 1f       	adc	r23, r23
 270:	8a 95       	dec	r24
 272:	e2 f7       	brpl	.-8      	; 0x26c <DIO_write+0x9e>
 274:	cb 01       	movw	r24, r22
 276:	84 2b       	or	r24, r20
 278:	85 bb       	out	0x15, r24	; 21
 27a:	08 95       	ret
		}
		else{
			reset_bit(PORTC_reg,ChannelPos);
 27c:	45 b3       	in	r20, 0x15	; 21
 27e:	21 e0       	ldi	r18, 0x01	; 1
 280:	30 e0       	ldi	r19, 0x00	; 0
 282:	b9 01       	movw	r22, r18
 284:	02 c0       	rjmp	.+4      	; 0x28a <DIO_write+0xbc>
 286:	66 0f       	add	r22, r22
 288:	77 1f       	adc	r23, r23
 28a:	8a 95       	dec	r24
 28c:	e2 f7       	brpl	.-8      	; 0x286 <DIO_write+0xb8>
 28e:	cb 01       	movw	r24, r22
 290:	80 95       	com	r24
 292:	84 23       	and	r24, r20
 294:	85 bb       	out	0x15, r24	; 21
 296:	08 95       	ret
		}
		break;
		
		case DIO_PortD :
		if(level == STD_high){
 298:	61 30       	cpi	r22, 0x01	; 1
 29a:	69 f4       	brne	.+26     	; 0x2b6 <DIO_write+0xe8>
			set_bit(PORTD_reg,ChannelPos);
 29c:	42 b3       	in	r20, 0x12	; 18
 29e:	21 e0       	ldi	r18, 0x01	; 1
 2a0:	30 e0       	ldi	r19, 0x00	; 0
 2a2:	b9 01       	movw	r22, r18
 2a4:	02 c0       	rjmp	.+4      	; 0x2aa <DIO_write+0xdc>
 2a6:	66 0f       	add	r22, r22
 2a8:	77 1f       	adc	r23, r23
 2aa:	8a 95       	dec	r24
 2ac:	e2 f7       	brpl	.-8      	; 0x2a6 <DIO_write+0xd8>
 2ae:	cb 01       	movw	r24, r22
 2b0:	84 2b       	or	r24, r20
 2b2:	82 bb       	out	0x12, r24	; 18
 2b4:	08 95       	ret
		}
		else{
			reset_bit(PORTD_reg,ChannelPos);
 2b6:	42 b3       	in	r20, 0x12	; 18
 2b8:	21 e0       	ldi	r18, 0x01	; 1
 2ba:	30 e0       	ldi	r19, 0x00	; 0
 2bc:	b9 01       	movw	r22, r18
 2be:	02 c0       	rjmp	.+4      	; 0x2c4 <DIO_write+0xf6>
 2c0:	66 0f       	add	r22, r22
 2c2:	77 1f       	adc	r23, r23
 2c4:	8a 95       	dec	r24
 2c6:	e2 f7       	brpl	.-8      	; 0x2c0 <DIO_write+0xf2>
 2c8:	cb 01       	movw	r24, r22
 2ca:	80 95       	com	r24
 2cc:	84 23       	and	r24, r20
 2ce:	82 bb       	out	0x12, r24	; 18
 2d0:	08 95       	ret

000002d2 <main>:
#include "bit_math.h"
#include <util/delay.h>

int main(void)
{
   DIO_Init();
 2d2:	0e 94 41 00 	call	0x82	; 0x82 <DIO_Init>
    /* Replace with your application code */
    while (1) 
    {
		DIO_write(DIO_ChannelC1,STD_high);
 2d6:	61 e0       	ldi	r22, 0x01	; 1
 2d8:	81 e1       	ldi	r24, 0x11	; 17
 2da:	0e 94 e7 00 	call	0x1ce	; 0x1ce <DIO_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2de:	2f ef       	ldi	r18, 0xFF	; 255
 2e0:	89 e6       	ldi	r24, 0x69	; 105
 2e2:	98 e1       	ldi	r25, 0x18	; 24
 2e4:	21 50       	subi	r18, 0x01	; 1
 2e6:	80 40       	sbci	r24, 0x00	; 0
 2e8:	90 40       	sbci	r25, 0x00	; 0
 2ea:	e1 f7       	brne	.-8      	; 0x2e4 <main+0x12>
 2ec:	00 c0       	rjmp	.+0      	; 0x2ee <main+0x1c>
 2ee:	00 00       	nop
		_delay_ms(500);
		DIO_write(DIO_ChannelC1,STD_low);
 2f0:	60 e0       	ldi	r22, 0x00	; 0
 2f2:	81 e1       	ldi	r24, 0x11	; 17
 2f4:	0e 94 e7 00 	call	0x1ce	; 0x1ce <DIO_write>
 2f8:	2f ef       	ldi	r18, 0xFF	; 255
 2fa:	89 e6       	ldi	r24, 0x69	; 105
 2fc:	98 e1       	ldi	r25, 0x18	; 24
 2fe:	21 50       	subi	r18, 0x01	; 1
 300:	80 40       	sbci	r24, 0x00	; 0
 302:	90 40       	sbci	r25, 0x00	; 0
 304:	e1 f7       	brne	.-8      	; 0x2fe <main+0x2c>
 306:	00 c0       	rjmp	.+0      	; 0x308 <main+0x36>
 308:	00 00       	nop
 30a:	e5 cf       	rjmp	.-54     	; 0x2d6 <main+0x4>

0000030c <_exit>:
 30c:	f8 94       	cli

0000030e <__stop_program>:
 30e:	ff cf       	rjmp	.-2      	; 0x30e <__stop_program>
