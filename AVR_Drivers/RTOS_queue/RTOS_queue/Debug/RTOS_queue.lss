
RTOS_queue.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000015dc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000020  00800060  000015dc  00001670  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000640  00800080  00800080  00001690  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001690  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000016c0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000350  00000000  00000000  000016fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003f05  00000000  00000000  00001a4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000f0b  00000000  00000000  00005951  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000023e0  00000000  00000000  0000685c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000a4c  00000000  00000000  00008c3c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000012df  00000000  00000000  00009688  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003ca2  00000000  00000000  0000a967  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000368  00000000  00000000  0000e609  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 a6 02 	jmp	0x54c	; 0x54c <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec ed       	ldi	r30, 0xDC	; 220
      68:	f5 e1       	ldi	r31, 0x15	; 21
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a0 38       	cpi	r26, 0x80	; 128
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	26 e0       	ldi	r18, 0x06	; 6
      78:	a0 e8       	ldi	r26, 0x80	; 128
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a0 3c       	cpi	r26, 0xC0	; 192
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 10 01 	call	0x220	; 0x220 <main>
      8a:	0c 94 ec 0a 	jmp	0x15d8	; 0x15d8 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
      92:	cf 93       	push	r28
      94:	df 93       	push	r29
      96:	ec 01       	movw	r28, r24
            }
        }
    }
    #endif /* if ( portBYTE_ALIGNMENT != 1 ) */

    vTaskSuspendAll();
      98:	0e 94 6a 07 	call	0xed4	; 0xed4 <vTaskSuspendAll>
    {
        if( pucAlignedHeap == NULL )
      9c:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__data_end>
      a0:	90 91 81 00 	lds	r25, 0x0081	; 0x800081 <__data_end+0x1>
      a4:	89 2b       	or	r24, r25
      a6:	31 f4       	brne	.+12     	; 0xb4 <pvPortMalloc+0x22>
        {
            /* Ensure the heap starts on a correctly aligned boundary. */
            pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) & ucHeap[ portBYTE_ALIGNMENT - 1 ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
      a8:	84 e8       	ldi	r24, 0x84	; 132
      aa:	90 e0       	ldi	r25, 0x00	; 0
      ac:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <__data_end+0x1>
      b0:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__data_end>
        }

        /* Check there is enough room left for the allocation and. */
        if( ( xWantedSize > 0 ) &&                                /* valid size */
      b4:	20 97       	sbiw	r28, 0x00	; 0
      b6:	c9 f0       	breq	.+50     	; 0xea <pvPortMalloc+0x58>
            ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
      b8:	80 91 82 00 	lds	r24, 0x0082	; 0x800082 <xNextFreeByte>
      bc:	90 91 83 00 	lds	r25, 0x0083	; 0x800083 <xNextFreeByte+0x1>
      c0:	9e 01       	movw	r18, r28
      c2:	28 0f       	add	r18, r24
      c4:	39 1f       	adc	r19, r25
            /* Ensure the heap starts on a correctly aligned boundary. */
            pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) & ucHeap[ portBYTE_ALIGNMENT - 1 ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
        }

        /* Check there is enough room left for the allocation and. */
        if( ( xWantedSize > 0 ) &&                                /* valid size */
      c6:	2b 3d       	cpi	r18, 0xDB	; 219
      c8:	45 e0       	ldi	r20, 0x05	; 5
      ca:	34 07       	cpc	r19, r20
      cc:	88 f4       	brcc	.+34     	; 0xf0 <pvPortMalloc+0x5e>
            ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
      ce:	82 17       	cp	r24, r18
      d0:	93 07       	cpc	r25, r19
      d2:	88 f4       	brcc	.+34     	; 0xf6 <pvPortMalloc+0x64>
            ( ( xNextFreeByte + xWantedSize ) > xNextFreeByte ) ) /* Check for overflow. */
        {
            /* Return the next free byte then increment the index past this
             * block. */
            pvReturn = pucAlignedHeap + xNextFreeByte;
      d4:	c0 91 80 00 	lds	r28, 0x0080	; 0x800080 <__data_end>
      d8:	d0 91 81 00 	lds	r29, 0x0081	; 0x800081 <__data_end+0x1>
      dc:	c8 0f       	add	r28, r24
      de:	d9 1f       	adc	r29, r25
            xNextFreeByte += xWantedSize;
      e0:	30 93 83 00 	sts	0x0083, r19	; 0x800083 <xNextFreeByte+0x1>
      e4:	20 93 82 00 	sts	0x0082, r18	; 0x800082 <xNextFreeByte>
      e8:	08 c0       	rjmp	.+16     	; 0xfa <pvPortMalloc+0x68>

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
    void * pvReturn = NULL;
      ea:	c0 e0       	ldi	r28, 0x00	; 0
      ec:	d0 e0       	ldi	r29, 0x00	; 0
      ee:	05 c0       	rjmp	.+10     	; 0xfa <pvPortMalloc+0x68>
      f0:	c0 e0       	ldi	r28, 0x00	; 0
      f2:	d0 e0       	ldi	r29, 0x00	; 0
      f4:	02 c0       	rjmp	.+4      	; 0xfa <pvPortMalloc+0x68>
      f6:	c0 e0       	ldi	r28, 0x00	; 0
      f8:	d0 e0       	ldi	r29, 0x00	; 0
            xNextFreeByte += xWantedSize;
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
      fa:	0e 94 8a 08 	call	0x1114	; 0x1114 <xTaskResumeAll>
        }
    }
    #endif

    return pvReturn;
}
      fe:	ce 01       	movw	r24, r28
     100:	df 91       	pop	r29
     102:	cf 91       	pop	r28
     104:	08 95       	ret

00000106 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
     106:	08 95       	ret

00000108 <vListInitialise>:

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;

    ( pxList->uxNumberOfItems )++;
}
     108:	fc 01       	movw	r30, r24
     10a:	03 96       	adiw	r24, 0x03	; 3
     10c:	92 83       	std	Z+2, r25	; 0x02
     10e:	81 83       	std	Z+1, r24	; 0x01
     110:	2f ef       	ldi	r18, 0xFF	; 255
     112:	3f ef       	ldi	r19, 0xFF	; 255
     114:	34 83       	std	Z+4, r19	; 0x04
     116:	23 83       	std	Z+3, r18	; 0x03
     118:	96 83       	std	Z+6, r25	; 0x06
     11a:	85 83       	std	Z+5, r24	; 0x05
     11c:	90 87       	std	Z+8, r25	; 0x08
     11e:	87 83       	std	Z+7, r24	; 0x07
     120:	10 82       	st	Z, r1
     122:	08 95       	ret

00000124 <vListInitialiseItem>:
     124:	fc 01       	movw	r30, r24
     126:	11 86       	std	Z+9, r1	; 0x09
     128:	10 86       	std	Z+8, r1	; 0x08
     12a:	08 95       	ret

0000012c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
     12c:	cf 93       	push	r28
     12e:	df 93       	push	r29
     130:	eb 01       	movw	r28, r22
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     132:	48 81       	ld	r20, Y
     134:	59 81       	ldd	r21, Y+1	; 0x01
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
     136:	4f 3f       	cpi	r20, 0xFF	; 255
     138:	2f ef       	ldi	r18, 0xFF	; 255
     13a:	52 07       	cpc	r21, r18
     13c:	21 f4       	brne	.+8      	; 0x146 <vListInsert+0x1a>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
     13e:	fc 01       	movw	r30, r24
     140:	a7 81       	ldd	r26, Z+7	; 0x07
     142:	b0 85       	ldd	r27, Z+8	; 0x08
     144:	0d c0       	rjmp	.+26     	; 0x160 <vListInsert+0x34>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
     146:	dc 01       	movw	r26, r24
     148:	13 96       	adiw	r26, 0x03	; 3
     14a:	01 c0       	rjmp	.+2      	; 0x14e <vListInsert+0x22>
     14c:	df 01       	movw	r26, r30
     14e:	12 96       	adiw	r26, 0x02	; 2
     150:	ed 91       	ld	r30, X+
     152:	fc 91       	ld	r31, X
     154:	13 97       	sbiw	r26, 0x03	; 3
     156:	20 81       	ld	r18, Z
     158:	31 81       	ldd	r19, Z+1	; 0x01
     15a:	42 17       	cp	r20, r18
     15c:	53 07       	cpc	r21, r19
     15e:	b0 f7       	brcc	.-20     	; 0x14c <vListInsert+0x20>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
     160:	12 96       	adiw	r26, 0x02	; 2
     162:	ed 91       	ld	r30, X+
     164:	fc 91       	ld	r31, X
     166:	13 97       	sbiw	r26, 0x03	; 3
     168:	fb 83       	std	Y+3, r31	; 0x03
     16a:	ea 83       	std	Y+2, r30	; 0x02
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     16c:	d5 83       	std	Z+5, r29	; 0x05
     16e:	c4 83       	std	Z+4, r28	; 0x04
    pxNewListItem->pxPrevious = pxIterator;
     170:	bd 83       	std	Y+5, r27	; 0x05
     172:	ac 83       	std	Y+4, r26	; 0x04
    pxIterator->pxNext = pxNewListItem;
     174:	13 96       	adiw	r26, 0x03	; 3
     176:	dc 93       	st	X, r29
     178:	ce 93       	st	-X, r28
     17a:	12 97       	sbiw	r26, 0x02	; 2

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
     17c:	99 87       	std	Y+9, r25	; 0x09
     17e:	88 87       	std	Y+8, r24	; 0x08

    ( pxList->uxNumberOfItems )++;
     180:	fc 01       	movw	r30, r24
     182:	20 81       	ld	r18, Z
     184:	2f 5f       	subi	r18, 0xFF	; 255
     186:	20 83       	st	Z, r18
}
     188:	df 91       	pop	r29
     18a:	cf 91       	pop	r28
     18c:	08 95       	ret

0000018e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     18e:	cf 93       	push	r28
     190:	df 93       	push	r29
     192:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
     194:	a0 85       	ldd	r26, Z+8	; 0x08
     196:	b1 85       	ldd	r27, Z+9	; 0x09

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     198:	c2 81       	ldd	r28, Z+2	; 0x02
     19a:	d3 81       	ldd	r29, Z+3	; 0x03
     19c:	84 81       	ldd	r24, Z+4	; 0x04
     19e:	95 81       	ldd	r25, Z+5	; 0x05
     1a0:	9d 83       	std	Y+5, r25	; 0x05
     1a2:	8c 83       	std	Y+4, r24	; 0x04
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     1a4:	c4 81       	ldd	r28, Z+4	; 0x04
     1a6:	d5 81       	ldd	r29, Z+5	; 0x05
     1a8:	82 81       	ldd	r24, Z+2	; 0x02
     1aa:	93 81       	ldd	r25, Z+3	; 0x03
     1ac:	9b 83       	std	Y+3, r25	; 0x03
     1ae:	8a 83       	std	Y+2, r24	; 0x02

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
     1b0:	11 96       	adiw	r26, 0x01	; 1
     1b2:	8d 91       	ld	r24, X+
     1b4:	9c 91       	ld	r25, X
     1b6:	12 97       	sbiw	r26, 0x02	; 2
     1b8:	e8 17       	cp	r30, r24
     1ba:	f9 07       	cpc	r31, r25
     1bc:	31 f4       	brne	.+12     	; 0x1ca <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
     1be:	84 81       	ldd	r24, Z+4	; 0x04
     1c0:	95 81       	ldd	r25, Z+5	; 0x05
     1c2:	12 96       	adiw	r26, 0x02	; 2
     1c4:	9c 93       	st	X, r25
     1c6:	8e 93       	st	-X, r24
     1c8:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
     1ca:	11 86       	std	Z+9, r1	; 0x09
     1cc:	10 86       	std	Z+8, r1	; 0x08
    ( pxList->uxNumberOfItems )--;
     1ce:	8c 91       	ld	r24, X
     1d0:	81 50       	subi	r24, 0x01	; 1
     1d2:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
     1d4:	8c 91       	ld	r24, X
}
     1d6:	df 91       	pop	r29
     1d8:	cf 91       	pop	r28
     1da:	08 95       	ret

000001dc <Sender>:
    while (1) 
    {
    }
}

void Sender(void * pv){
     1dc:	ec 01       	movw	r28, r24
	 while(1){
	
	  BaseType_t xStatus= xQueueSendToBack(xQueue,(unsigned char *)pv,5/portTICK_PERIOD_MS);
     1de:	20 e0       	ldi	r18, 0x00	; 0
     1e0:	45 e0       	ldi	r20, 0x05	; 5
     1e2:	50 e0       	ldi	r21, 0x00	; 0
     1e4:	be 01       	movw	r22, r28
     1e6:	80 91 be 06 	lds	r24, 0x06BE	; 0x8006be <xQueue>
     1ea:	90 91 bf 06 	lds	r25, 0x06BF	; 0x8006bf <xQueue+0x1>
     1ee:	0e 94 0f 04 	call	0x81e	; 0x81e <xQueueGenericSend>
	  taskYIELD(); 
     1f2:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <vPortYield>
     1f6:	f3 cf       	rjmp	.-26     	; 0x1de <Sender+0x2>

000001f8 <Receiver>:
	// vTaskDelay(5/portTICK_PERIOD_MS);
	 }
}

void Receiver(void * pv){
     1f8:	cf 93       	push	r28
     1fa:	df 93       	push	r29
     1fc:	1f 92       	push	r1
     1fe:	cd b7       	in	r28, 0x3d	; 61
     200:	de b7       	in	r29, 0x3e	; 62
	unsigned char  data;
	while(1){
		
		BaseType_t xStatus= xQueueReceive(xQueue,&data,5/portTICK_PERIOD_MS);
     202:	45 e0       	ldi	r20, 0x05	; 5
     204:	50 e0       	ldi	r21, 0x00	; 0
     206:	be 01       	movw	r22, r28
     208:	6f 5f       	subi	r22, 0xFF	; 255
     20a:	7f 4f       	sbci	r23, 0xFF	; 255
     20c:	80 91 be 06 	lds	r24, 0x06BE	; 0x8006be <xQueue>
     210:	90 91 bf 06 	lds	r25, 0x06BF	; 0x8006bf <xQueue+0x1>
     214:	0e 94 a1 04 	call	0x942	; 0x942 <xQueueReceive>
		UART_SENDCHAR((data));
     218:	89 81       	ldd	r24, Y+1	; 0x01
     21a:	0e 94 cb 0a 	call	0x1596	; 0x1596 <UART_SENDCHAR>
     21e:	f1 cf       	rjmp	.-30     	; 0x202 <Receiver+0xa>

00000220 <main>:
void Receiver(void * pv);
xQueueHandle xQueue;


int main(void)
{
     220:	cf 93       	push	r28
     222:	df 93       	push	r29
     224:	00 d0       	rcall	.+0      	; 0x226 <main+0x6>
     226:	cd b7       	in	r28, 0x3d	; 61
     228:	de b7       	in	r29, 0x3e	; 62
	UART_INT();
     22a:	0e 94 c3 0a 	call	0x1586	; 0x1586 <UART_INT>
	xQueue= xQueueCreate(5,sizeof(unsigned char));
     22e:	40 e0       	ldi	r20, 0x00	; 0
     230:	61 e0       	ldi	r22, 0x01	; 1
     232:	85 e0       	ldi	r24, 0x05	; 5
     234:	0e 94 ce 03 	call	0x79c	; 0x79c <xQueueGenericCreate>
     238:	90 93 bf 06 	sts	0x06BF, r25	; 0x8006bf <xQueue+0x1>
     23c:	80 93 be 06 	sts	0x06BE, r24	; 0x8006be <xQueue>
		if (xQueue != NULL)
     240:	89 2b       	or	r24, r25
     242:	51 f1       	breq	.+84     	; 0x298 <main+0x78>
			/*unsigned char sendData1=0x01;
			unsigned char sendData2=0x02;
			unsigned char * pSendData1=&sendData1;
			unsigned char * pSendData2=&sendData2;*/
			
			unsigned char arr[]= {0x01,0x02};
     244:	81 e0       	ldi	r24, 0x01	; 1
     246:	89 83       	std	Y+1, r24	; 0x01
     248:	82 e0       	ldi	r24, 0x02	; 2
     24a:	8a 83       	std	Y+2, r24	; 0x02
			
			//xTaskCreate(Sender,"sender1",100,(void *)pSendData1,1,NULL);
			//xTaskCreate(Sender,"sender2",100,(void *)pSendData2,1,NULL);
			
			xTaskCreate(Sender,"sender1",100,(void *)arr,1,NULL);
     24c:	e1 2c       	mov	r14, r1
     24e:	f1 2c       	mov	r15, r1
     250:	01 e0       	ldi	r16, 0x01	; 1
     252:	9e 01       	movw	r18, r28
     254:	2f 5f       	subi	r18, 0xFF	; 255
     256:	3f 4f       	sbci	r19, 0xFF	; 255
     258:	44 e6       	ldi	r20, 0x64	; 100
     25a:	50 e0       	ldi	r21, 0x00	; 0
     25c:	61 e6       	ldi	r22, 0x61	; 97
     25e:	70 e0       	ldi	r23, 0x00	; 0
     260:	8e ee       	ldi	r24, 0xEE	; 238
     262:	90 e0       	ldi	r25, 0x00	; 0
     264:	0e 94 e5 06 	call	0xdca	; 0xdca <xTaskCreate>
			xTaskCreate(Sender,"sender2",100,(void *)(arr+1),1,NULL);
     268:	9e 01       	movw	r18, r28
     26a:	2e 5f       	subi	r18, 0xFE	; 254
     26c:	3f 4f       	sbci	r19, 0xFF	; 255
     26e:	44 e6       	ldi	r20, 0x64	; 100
     270:	50 e0       	ldi	r21, 0x00	; 0
     272:	69 e6       	ldi	r22, 0x69	; 105
     274:	70 e0       	ldi	r23, 0x00	; 0
     276:	8e ee       	ldi	r24, 0xEE	; 238
     278:	90 e0       	ldi	r25, 0x00	; 0
     27a:	0e 94 e5 06 	call	0xdca	; 0xdca <xTaskCreate>
			
			xTaskCreate(Receiver,"receiver",100,NULL,2,NULL);
     27e:	02 e0       	ldi	r16, 0x02	; 2
     280:	20 e0       	ldi	r18, 0x00	; 0
     282:	30 e0       	ldi	r19, 0x00	; 0
     284:	44 e6       	ldi	r20, 0x64	; 100
     286:	50 e0       	ldi	r21, 0x00	; 0
     288:	61 e7       	ldi	r22, 0x71	; 113
     28a:	70 e0       	ldi	r23, 0x00	; 0
     28c:	8c ef       	ldi	r24, 0xFC	; 252
     28e:	90 e0       	ldi	r25, 0x00	; 0
     290:	0e 94 e5 06 	call	0xdca	; 0xdca <xTaskCreate>
			vTaskStartScheduler();
     294:	0e 94 3e 07 	call	0xe7c	; 0xe7c <vTaskStartScheduler>
     298:	ff cf       	rjmp	.-2      	; 0x298 <main+0x78>

0000029a <prvSetupTimerInterrupt>:
	return pdTRUE;
}
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
     29a:	1b bc       	out	0x2b, r1	; 43
     29c:	89 ef       	ldi	r24, 0xF9	; 249
     29e:	8a bd       	out	0x2a, r24	; 42
     2a0:	8b e0       	ldi	r24, 0x0B	; 11
     2a2:	8e bd       	out	0x2e, r24	; 46
     2a4:	89 b7       	in	r24, 0x39	; 57
     2a6:	80 61       	ori	r24, 0x10	; 16
     2a8:	89 bf       	out	0x39, r24	; 57
     2aa:	08 95       	ret

000002ac <pxPortInitialiseStack>:
     2ac:	31 e1       	ldi	r19, 0x11	; 17
     2ae:	fc 01       	movw	r30, r24
     2b0:	30 83       	st	Z, r19
     2b2:	31 97       	sbiw	r30, 0x01	; 1
     2b4:	22 e2       	ldi	r18, 0x22	; 34
     2b6:	20 83       	st	Z, r18
     2b8:	31 97       	sbiw	r30, 0x01	; 1
     2ba:	a3 e3       	ldi	r26, 0x33	; 51
     2bc:	a0 83       	st	Z, r26
     2be:	31 97       	sbiw	r30, 0x01	; 1
     2c0:	60 83       	st	Z, r22
     2c2:	31 97       	sbiw	r30, 0x01	; 1
     2c4:	70 83       	st	Z, r23
     2c6:	31 97       	sbiw	r30, 0x01	; 1
     2c8:	10 82       	st	Z, r1
     2ca:	31 97       	sbiw	r30, 0x01	; 1
     2cc:	60 e8       	ldi	r22, 0x80	; 128
     2ce:	60 83       	st	Z, r22
     2d0:	31 97       	sbiw	r30, 0x01	; 1
     2d2:	10 82       	st	Z, r1
     2d4:	31 97       	sbiw	r30, 0x01	; 1
     2d6:	62 e0       	ldi	r22, 0x02	; 2
     2d8:	60 83       	st	Z, r22
     2da:	31 97       	sbiw	r30, 0x01	; 1
     2dc:	63 e0       	ldi	r22, 0x03	; 3
     2de:	60 83       	st	Z, r22
     2e0:	31 97       	sbiw	r30, 0x01	; 1
     2e2:	64 e0       	ldi	r22, 0x04	; 4
     2e4:	60 83       	st	Z, r22
     2e6:	31 97       	sbiw	r30, 0x01	; 1
     2e8:	65 e0       	ldi	r22, 0x05	; 5
     2ea:	60 83       	st	Z, r22
     2ec:	31 97       	sbiw	r30, 0x01	; 1
     2ee:	66 e0       	ldi	r22, 0x06	; 6
     2f0:	60 83       	st	Z, r22
     2f2:	31 97       	sbiw	r30, 0x01	; 1
     2f4:	67 e0       	ldi	r22, 0x07	; 7
     2f6:	60 83       	st	Z, r22
     2f8:	31 97       	sbiw	r30, 0x01	; 1
     2fa:	68 e0       	ldi	r22, 0x08	; 8
     2fc:	60 83       	st	Z, r22
     2fe:	31 97       	sbiw	r30, 0x01	; 1
     300:	69 e0       	ldi	r22, 0x09	; 9
     302:	60 83       	st	Z, r22
     304:	31 97       	sbiw	r30, 0x01	; 1
     306:	60 e1       	ldi	r22, 0x10	; 16
     308:	60 83       	st	Z, r22
     30a:	31 97       	sbiw	r30, 0x01	; 1
     30c:	30 83       	st	Z, r19
     30e:	31 97       	sbiw	r30, 0x01	; 1
     310:	32 e1       	ldi	r19, 0x12	; 18
     312:	30 83       	st	Z, r19
     314:	31 97       	sbiw	r30, 0x01	; 1
     316:	33 e1       	ldi	r19, 0x13	; 19
     318:	30 83       	st	Z, r19
     31a:	31 97       	sbiw	r30, 0x01	; 1
     31c:	34 e1       	ldi	r19, 0x14	; 20
     31e:	30 83       	st	Z, r19
     320:	31 97       	sbiw	r30, 0x01	; 1
     322:	35 e1       	ldi	r19, 0x15	; 21
     324:	30 83       	st	Z, r19
     326:	31 97       	sbiw	r30, 0x01	; 1
     328:	36 e1       	ldi	r19, 0x16	; 22
     32a:	30 83       	st	Z, r19
     32c:	31 97       	sbiw	r30, 0x01	; 1
     32e:	37 e1       	ldi	r19, 0x17	; 23
     330:	30 83       	st	Z, r19
     332:	31 97       	sbiw	r30, 0x01	; 1
     334:	38 e1       	ldi	r19, 0x18	; 24
     336:	30 83       	st	Z, r19
     338:	31 97       	sbiw	r30, 0x01	; 1
     33a:	39 e1       	ldi	r19, 0x19	; 25
     33c:	30 83       	st	Z, r19
     33e:	31 97       	sbiw	r30, 0x01	; 1
     340:	30 e2       	ldi	r19, 0x20	; 32
     342:	30 83       	st	Z, r19
     344:	31 97       	sbiw	r30, 0x01	; 1
     346:	31 e2       	ldi	r19, 0x21	; 33
     348:	30 83       	st	Z, r19
     34a:	31 97       	sbiw	r30, 0x01	; 1
     34c:	20 83       	st	Z, r18
     34e:	31 97       	sbiw	r30, 0x01	; 1
     350:	23 e2       	ldi	r18, 0x23	; 35
     352:	20 83       	st	Z, r18
     354:	31 97       	sbiw	r30, 0x01	; 1
     356:	40 83       	st	Z, r20
     358:	31 97       	sbiw	r30, 0x01	; 1
     35a:	50 83       	st	Z, r21
     35c:	31 97       	sbiw	r30, 0x01	; 1
     35e:	26 e2       	ldi	r18, 0x26	; 38
     360:	20 83       	st	Z, r18
     362:	31 97       	sbiw	r30, 0x01	; 1
     364:	27 e2       	ldi	r18, 0x27	; 39
     366:	20 83       	st	Z, r18
     368:	31 97       	sbiw	r30, 0x01	; 1
     36a:	28 e2       	ldi	r18, 0x28	; 40
     36c:	20 83       	st	Z, r18
     36e:	31 97       	sbiw	r30, 0x01	; 1
     370:	29 e2       	ldi	r18, 0x29	; 41
     372:	20 83       	st	Z, r18
     374:	31 97       	sbiw	r30, 0x01	; 1
     376:	20 e3       	ldi	r18, 0x30	; 48
     378:	20 83       	st	Z, r18
     37a:	31 97       	sbiw	r30, 0x01	; 1
     37c:	21 e3       	ldi	r18, 0x31	; 49
     37e:	20 83       	st	Z, r18
     380:	86 97       	sbiw	r24, 0x26	; 38
     382:	08 95       	ret

00000384 <xPortStartScheduler>:
     384:	0e 94 4d 01 	call	0x29a	; 0x29a <prvSetupTimerInterrupt>
     388:	a0 91 bc 06 	lds	r26, 0x06BC	; 0x8006bc <pxCurrentTCB>
     38c:	b0 91 bd 06 	lds	r27, 0x06BD	; 0x8006bd <pxCurrentTCB+0x1>
     390:	cd 91       	ld	r28, X+
     392:	cd bf       	out	0x3d, r28	; 61
     394:	dd 91       	ld	r29, X+
     396:	de bf       	out	0x3e, r29	; 62
     398:	ff 91       	pop	r31
     39a:	ef 91       	pop	r30
     39c:	df 91       	pop	r29
     39e:	cf 91       	pop	r28
     3a0:	bf 91       	pop	r27
     3a2:	af 91       	pop	r26
     3a4:	9f 91       	pop	r25
     3a6:	8f 91       	pop	r24
     3a8:	7f 91       	pop	r23
     3aa:	6f 91       	pop	r22
     3ac:	5f 91       	pop	r21
     3ae:	4f 91       	pop	r20
     3b0:	3f 91       	pop	r19
     3b2:	2f 91       	pop	r18
     3b4:	1f 91       	pop	r17
     3b6:	0f 91       	pop	r16
     3b8:	ff 90       	pop	r15
     3ba:	ef 90       	pop	r14
     3bc:	df 90       	pop	r13
     3be:	cf 90       	pop	r12
     3c0:	bf 90       	pop	r11
     3c2:	af 90       	pop	r10
     3c4:	9f 90       	pop	r9
     3c6:	8f 90       	pop	r8
     3c8:	7f 90       	pop	r7
     3ca:	6f 90       	pop	r6
     3cc:	5f 90       	pop	r5
     3ce:	4f 90       	pop	r4
     3d0:	3f 90       	pop	r3
     3d2:	2f 90       	pop	r2
     3d4:	1f 90       	pop	r1
     3d6:	0f 90       	pop	r0
     3d8:	0f be       	out	0x3f, r0	; 63
     3da:	0f 90       	pop	r0
     3dc:	08 95       	ret
     3de:	81 e0       	ldi	r24, 0x01	; 1
     3e0:	08 95       	ret

000003e2 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
     3e2:	0f 92       	push	r0
     3e4:	0f b6       	in	r0, 0x3f	; 63
     3e6:	f8 94       	cli
     3e8:	0f 92       	push	r0
     3ea:	1f 92       	push	r1
     3ec:	11 24       	eor	r1, r1
     3ee:	2f 92       	push	r2
     3f0:	3f 92       	push	r3
     3f2:	4f 92       	push	r4
     3f4:	5f 92       	push	r5
     3f6:	6f 92       	push	r6
     3f8:	7f 92       	push	r7
     3fa:	8f 92       	push	r8
     3fc:	9f 92       	push	r9
     3fe:	af 92       	push	r10
     400:	bf 92       	push	r11
     402:	cf 92       	push	r12
     404:	df 92       	push	r13
     406:	ef 92       	push	r14
     408:	ff 92       	push	r15
     40a:	0f 93       	push	r16
     40c:	1f 93       	push	r17
     40e:	2f 93       	push	r18
     410:	3f 93       	push	r19
     412:	4f 93       	push	r20
     414:	5f 93       	push	r21
     416:	6f 93       	push	r22
     418:	7f 93       	push	r23
     41a:	8f 93       	push	r24
     41c:	9f 93       	push	r25
     41e:	af 93       	push	r26
     420:	bf 93       	push	r27
     422:	cf 93       	push	r28
     424:	df 93       	push	r29
     426:	ef 93       	push	r30
     428:	ff 93       	push	r31
     42a:	a0 91 bc 06 	lds	r26, 0x06BC	; 0x8006bc <pxCurrentTCB>
     42e:	b0 91 bd 06 	lds	r27, 0x06BD	; 0x8006bd <pxCurrentTCB+0x1>
     432:	0d b6       	in	r0, 0x3d	; 61
     434:	0d 92       	st	X+, r0
     436:	0e b6       	in	r0, 0x3e	; 62
     438:	0d 92       	st	X+, r0
	vTaskSwitchContext();
     43a:	0e 94 5f 09 	call	0x12be	; 0x12be <vTaskSwitchContext>
	portRESTORE_CONTEXT();
     43e:	a0 91 bc 06 	lds	r26, 0x06BC	; 0x8006bc <pxCurrentTCB>
     442:	b0 91 bd 06 	lds	r27, 0x06BD	; 0x8006bd <pxCurrentTCB+0x1>
     446:	cd 91       	ld	r28, X+
     448:	cd bf       	out	0x3d, r28	; 61
     44a:	dd 91       	ld	r29, X+
     44c:	de bf       	out	0x3e, r29	; 62
     44e:	ff 91       	pop	r31
     450:	ef 91       	pop	r30
     452:	df 91       	pop	r29
     454:	cf 91       	pop	r28
     456:	bf 91       	pop	r27
     458:	af 91       	pop	r26
     45a:	9f 91       	pop	r25
     45c:	8f 91       	pop	r24
     45e:	7f 91       	pop	r23
     460:	6f 91       	pop	r22
     462:	5f 91       	pop	r21
     464:	4f 91       	pop	r20
     466:	3f 91       	pop	r19
     468:	2f 91       	pop	r18
     46a:	1f 91       	pop	r17
     46c:	0f 91       	pop	r16
     46e:	ff 90       	pop	r15
     470:	ef 90       	pop	r14
     472:	df 90       	pop	r13
     474:	cf 90       	pop	r12
     476:	bf 90       	pop	r11
     478:	af 90       	pop	r10
     47a:	9f 90       	pop	r9
     47c:	8f 90       	pop	r8
     47e:	7f 90       	pop	r7
     480:	6f 90       	pop	r6
     482:	5f 90       	pop	r5
     484:	4f 90       	pop	r4
     486:	3f 90       	pop	r3
     488:	2f 90       	pop	r2
     48a:	1f 90       	pop	r1
     48c:	0f 90       	pop	r0
     48e:	0f be       	out	0x3f, r0	; 63
     490:	0f 90       	pop	r0

	asm volatile ( "ret" );
     492:	08 95       	ret

00000494 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
     494:	0f 92       	push	r0
     496:	0f b6       	in	r0, 0x3f	; 63
     498:	f8 94       	cli
     49a:	0f 92       	push	r0
     49c:	1f 92       	push	r1
     49e:	11 24       	eor	r1, r1
     4a0:	2f 92       	push	r2
     4a2:	3f 92       	push	r3
     4a4:	4f 92       	push	r4
     4a6:	5f 92       	push	r5
     4a8:	6f 92       	push	r6
     4aa:	7f 92       	push	r7
     4ac:	8f 92       	push	r8
     4ae:	9f 92       	push	r9
     4b0:	af 92       	push	r10
     4b2:	bf 92       	push	r11
     4b4:	cf 92       	push	r12
     4b6:	df 92       	push	r13
     4b8:	ef 92       	push	r14
     4ba:	ff 92       	push	r15
     4bc:	0f 93       	push	r16
     4be:	1f 93       	push	r17
     4c0:	2f 93       	push	r18
     4c2:	3f 93       	push	r19
     4c4:	4f 93       	push	r20
     4c6:	5f 93       	push	r21
     4c8:	6f 93       	push	r22
     4ca:	7f 93       	push	r23
     4cc:	8f 93       	push	r24
     4ce:	9f 93       	push	r25
     4d0:	af 93       	push	r26
     4d2:	bf 93       	push	r27
     4d4:	cf 93       	push	r28
     4d6:	df 93       	push	r29
     4d8:	ef 93       	push	r30
     4da:	ff 93       	push	r31
     4dc:	a0 91 bc 06 	lds	r26, 0x06BC	; 0x8006bc <pxCurrentTCB>
     4e0:	b0 91 bd 06 	lds	r27, 0x06BD	; 0x8006bd <pxCurrentTCB+0x1>
     4e4:	0d b6       	in	r0, 0x3d	; 61
     4e6:	0d 92       	st	X+, r0
     4e8:	0e b6       	in	r0, 0x3e	; 62
     4ea:	0d 92       	st	X+, r0
	if( xTaskIncrementTick() != pdFALSE )
     4ec:	0e 94 70 07 	call	0xee0	; 0xee0 <xTaskIncrementTick>
     4f0:	81 11       	cpse	r24, r1
	{
		vTaskSwitchContext();
     4f2:	0e 94 5f 09 	call	0x12be	; 0x12be <vTaskSwitchContext>
	}
	portRESTORE_CONTEXT();
     4f6:	a0 91 bc 06 	lds	r26, 0x06BC	; 0x8006bc <pxCurrentTCB>
     4fa:	b0 91 bd 06 	lds	r27, 0x06BD	; 0x8006bd <pxCurrentTCB+0x1>
     4fe:	cd 91       	ld	r28, X+
     500:	cd bf       	out	0x3d, r28	; 61
     502:	dd 91       	ld	r29, X+
     504:	de bf       	out	0x3e, r29	; 62
     506:	ff 91       	pop	r31
     508:	ef 91       	pop	r30
     50a:	df 91       	pop	r29
     50c:	cf 91       	pop	r28
     50e:	bf 91       	pop	r27
     510:	af 91       	pop	r26
     512:	9f 91       	pop	r25
     514:	8f 91       	pop	r24
     516:	7f 91       	pop	r23
     518:	6f 91       	pop	r22
     51a:	5f 91       	pop	r21
     51c:	4f 91       	pop	r20
     51e:	3f 91       	pop	r19
     520:	2f 91       	pop	r18
     522:	1f 91       	pop	r17
     524:	0f 91       	pop	r16
     526:	ff 90       	pop	r15
     528:	ef 90       	pop	r14
     52a:	df 90       	pop	r13
     52c:	cf 90       	pop	r12
     52e:	bf 90       	pop	r11
     530:	af 90       	pop	r10
     532:	9f 90       	pop	r9
     534:	8f 90       	pop	r8
     536:	7f 90       	pop	r7
     538:	6f 90       	pop	r6
     53a:	5f 90       	pop	r5
     53c:	4f 90       	pop	r4
     53e:	3f 90       	pop	r3
     540:	2f 90       	pop	r2
     542:	1f 90       	pop	r1
     544:	0f 90       	pop	r0
     546:	0f be       	out	0x3f, r0	; 63
     548:	0f 90       	pop	r0

	asm volatile ( "ret" );
     54a:	08 95       	ret

0000054c <__vector_7>:
	 * count is incremented after the context is saved.
	 */
	void TIMER1_COMPA_vect( void ) __attribute__ ( ( signal, naked ) );
	void TIMER1_COMPA_vect( void )
	{
		vPortYieldFromTick();
     54c:	0e 94 4a 02 	call	0x494	; 0x494 <vPortYieldFromTick>
		asm volatile ( "reti" );
     550:	18 95       	reti

00000552 <prvIsQueueEmpty>:
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
}
     552:	0f b6       	in	r0, 0x3f	; 63
     554:	f8 94       	cli
     556:	0f 92       	push	r0
     558:	fc 01       	movw	r30, r24
     55a:	82 8d       	ldd	r24, Z+26	; 0x1a
     55c:	81 11       	cpse	r24, r1
     55e:	02 c0       	rjmp	.+4      	; 0x564 <prvIsQueueEmpty+0x12>
     560:	81 e0       	ldi	r24, 0x01	; 1
     562:	01 c0       	rjmp	.+2      	; 0x566 <prvIsQueueEmpty+0x14>
     564:	80 e0       	ldi	r24, 0x00	; 0
     566:	0f 90       	pop	r0
     568:	0f be       	out	0x3f, r0	; 63
     56a:	08 95       	ret

0000056c <prvIsQueueFull>:
     56c:	0f b6       	in	r0, 0x3f	; 63
     56e:	f8 94       	cli
     570:	0f 92       	push	r0
     572:	fc 01       	movw	r30, r24
     574:	22 8d       	ldd	r18, Z+26	; 0x1a
     576:	83 8d       	ldd	r24, Z+27	; 0x1b
     578:	28 13       	cpse	r18, r24
     57a:	02 c0       	rjmp	.+4      	; 0x580 <prvIsQueueFull+0x14>
     57c:	81 e0       	ldi	r24, 0x01	; 1
     57e:	01 c0       	rjmp	.+2      	; 0x582 <prvIsQueueFull+0x16>
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	0f 90       	pop	r0
     584:	0f be       	out	0x3f, r0	; 63
     586:	08 95       	ret

00000588 <prvCopyDataToQueue>:
     588:	0f 93       	push	r16
     58a:	1f 93       	push	r17
     58c:	cf 93       	push	r28
     58e:	df 93       	push	r29
     590:	ec 01       	movw	r28, r24
     592:	04 2f       	mov	r16, r20
     594:	1a 8d       	ldd	r17, Y+26	; 0x1a
     596:	4c 8d       	ldd	r20, Y+28	; 0x1c
     598:	44 23       	and	r20, r20
     59a:	b9 f1       	breq	.+110    	; 0x60a <prvCopyDataToQueue+0x82>
     59c:	01 11       	cpse	r16, r1
     59e:	16 c0       	rjmp	.+44     	; 0x5cc <prvCopyDataToQueue+0x44>
     5a0:	50 e0       	ldi	r21, 0x00	; 0
     5a2:	8a 81       	ldd	r24, Y+2	; 0x02
     5a4:	9b 81       	ldd	r25, Y+3	; 0x03
     5a6:	0e 94 e3 0a 	call	0x15c6	; 0x15c6 <memcpy>
     5aa:	2c 8d       	ldd	r18, Y+28	; 0x1c
     5ac:	8a 81       	ldd	r24, Y+2	; 0x02
     5ae:	9b 81       	ldd	r25, Y+3	; 0x03
     5b0:	82 0f       	add	r24, r18
     5b2:	91 1d       	adc	r25, r1
     5b4:	9b 83       	std	Y+3, r25	; 0x03
     5b6:	8a 83       	std	Y+2, r24	; 0x02
     5b8:	2c 81       	ldd	r18, Y+4	; 0x04
     5ba:	3d 81       	ldd	r19, Y+5	; 0x05
     5bc:	82 17       	cp	r24, r18
     5be:	93 07       	cpc	r25, r19
     5c0:	20 f1       	brcs	.+72     	; 0x60a <prvCopyDataToQueue+0x82>
     5c2:	88 81       	ld	r24, Y
     5c4:	99 81       	ldd	r25, Y+1	; 0x01
     5c6:	9b 83       	std	Y+3, r25	; 0x03
     5c8:	8a 83       	std	Y+2, r24	; 0x02
     5ca:	1f c0       	rjmp	.+62     	; 0x60a <prvCopyDataToQueue+0x82>
     5cc:	50 e0       	ldi	r21, 0x00	; 0
     5ce:	8e 81       	ldd	r24, Y+6	; 0x06
     5d0:	9f 81       	ldd	r25, Y+7	; 0x07
     5d2:	0e 94 e3 0a 	call	0x15c6	; 0x15c6 <memcpy>
     5d6:	8c 8d       	ldd	r24, Y+28	; 0x1c
     5d8:	90 e0       	ldi	r25, 0x00	; 0
     5da:	91 95       	neg	r25
     5dc:	81 95       	neg	r24
     5de:	91 09       	sbc	r25, r1
     5e0:	2e 81       	ldd	r18, Y+6	; 0x06
     5e2:	3f 81       	ldd	r19, Y+7	; 0x07
     5e4:	28 0f       	add	r18, r24
     5e6:	39 1f       	adc	r19, r25
     5e8:	3f 83       	std	Y+7, r19	; 0x07
     5ea:	2e 83       	std	Y+6, r18	; 0x06
     5ec:	48 81       	ld	r20, Y
     5ee:	59 81       	ldd	r21, Y+1	; 0x01
     5f0:	24 17       	cp	r18, r20
     5f2:	35 07       	cpc	r19, r21
     5f4:	30 f4       	brcc	.+12     	; 0x602 <prvCopyDataToQueue+0x7a>
     5f6:	2c 81       	ldd	r18, Y+4	; 0x04
     5f8:	3d 81       	ldd	r19, Y+5	; 0x05
     5fa:	82 0f       	add	r24, r18
     5fc:	93 1f       	adc	r25, r19
     5fe:	9f 83       	std	Y+7, r25	; 0x07
     600:	8e 83       	std	Y+6, r24	; 0x06
     602:	02 30       	cpi	r16, 0x02	; 2
     604:	11 f4       	brne	.+4      	; 0x60a <prvCopyDataToQueue+0x82>
     606:	11 11       	cpse	r17, r1
     608:	11 50       	subi	r17, 0x01	; 1
     60a:	1f 5f       	subi	r17, 0xFF	; 255
     60c:	1a 8f       	std	Y+26, r17	; 0x1a
     60e:	80 e0       	ldi	r24, 0x00	; 0
     610:	df 91       	pop	r29
     612:	cf 91       	pop	r28
     614:	1f 91       	pop	r17
     616:	0f 91       	pop	r16
     618:	08 95       	ret

0000061a <prvCopyDataFromQueue>:
     61a:	fc 01       	movw	r30, r24
     61c:	44 8d       	ldd	r20, Z+28	; 0x1c
     61e:	44 23       	and	r20, r20
     620:	a9 f0       	breq	.+42     	; 0x64c <prvCopyDataFromQueue+0x32>
     622:	50 e0       	ldi	r21, 0x00	; 0
     624:	26 81       	ldd	r18, Z+6	; 0x06
     626:	37 81       	ldd	r19, Z+7	; 0x07
     628:	24 0f       	add	r18, r20
     62a:	35 1f       	adc	r19, r21
     62c:	37 83       	std	Z+7, r19	; 0x07
     62e:	26 83       	std	Z+6, r18	; 0x06
     630:	84 81       	ldd	r24, Z+4	; 0x04
     632:	95 81       	ldd	r25, Z+5	; 0x05
     634:	28 17       	cp	r18, r24
     636:	39 07       	cpc	r19, r25
     638:	20 f0       	brcs	.+8      	; 0x642 <prvCopyDataFromQueue+0x28>
     63a:	80 81       	ld	r24, Z
     63c:	91 81       	ldd	r25, Z+1	; 0x01
     63e:	97 83       	std	Z+7, r25	; 0x07
     640:	86 83       	std	Z+6, r24	; 0x06
     642:	cb 01       	movw	r24, r22
     644:	66 81       	ldd	r22, Z+6	; 0x06
     646:	77 81       	ldd	r23, Z+7	; 0x07
     648:	0e 94 e3 0a 	call	0x15c6	; 0x15c6 <memcpy>
     64c:	08 95       	ret

0000064e <prvUnlockQueue>:
     64e:	1f 93       	push	r17
     650:	cf 93       	push	r28
     652:	df 93       	push	r29
     654:	ec 01       	movw	r28, r24
     656:	0f b6       	in	r0, 0x3f	; 63
     658:	f8 94       	cli
     65a:	0f 92       	push	r0
     65c:	1e 8d       	ldd	r17, Y+30	; 0x1e
     65e:	0b c0       	rjmp	.+22     	; 0x676 <prvUnlockQueue+0x28>
     660:	89 89       	ldd	r24, Y+17	; 0x11
     662:	88 23       	and	r24, r24
     664:	51 f0       	breq	.+20     	; 0x67a <prvUnlockQueue+0x2c>
     666:	ce 01       	movw	r24, r28
     668:	41 96       	adiw	r24, 0x11	; 17
     66a:	0e 94 c5 09 	call	0x138a	; 0x138a <xTaskRemoveFromEventList>
     66e:	81 11       	cpse	r24, r1
     670:	0e 94 bf 0a 	call	0x157e	; 0x157e <vTaskMissedYield>
     674:	11 50       	subi	r17, 0x01	; 1
     676:	11 16       	cp	r1, r17
     678:	9c f3       	brlt	.-26     	; 0x660 <prvUnlockQueue+0x12>
     67a:	8f ef       	ldi	r24, 0xFF	; 255
     67c:	8e 8f       	std	Y+30, r24	; 0x1e
     67e:	0f 90       	pop	r0
     680:	0f be       	out	0x3f, r0	; 63
     682:	0f b6       	in	r0, 0x3f	; 63
     684:	f8 94       	cli
     686:	0f 92       	push	r0
     688:	1d 8d       	ldd	r17, Y+29	; 0x1d
     68a:	0b c0       	rjmp	.+22     	; 0x6a2 <prvUnlockQueue+0x54>
     68c:	88 85       	ldd	r24, Y+8	; 0x08
     68e:	88 23       	and	r24, r24
     690:	51 f0       	breq	.+20     	; 0x6a6 <prvUnlockQueue+0x58>
     692:	ce 01       	movw	r24, r28
     694:	08 96       	adiw	r24, 0x08	; 8
     696:	0e 94 c5 09 	call	0x138a	; 0x138a <xTaskRemoveFromEventList>
     69a:	81 11       	cpse	r24, r1
     69c:	0e 94 bf 0a 	call	0x157e	; 0x157e <vTaskMissedYield>
     6a0:	11 50       	subi	r17, 0x01	; 1
     6a2:	11 16       	cp	r1, r17
     6a4:	9c f3       	brlt	.-26     	; 0x68c <prvUnlockQueue+0x3e>
     6a6:	8f ef       	ldi	r24, 0xFF	; 255
     6a8:	8d 8f       	std	Y+29, r24	; 0x1d
     6aa:	0f 90       	pop	r0
     6ac:	0f be       	out	0x3f, r0	; 63
     6ae:	df 91       	pop	r29
     6b0:	cf 91       	pop	r28
     6b2:	1f 91       	pop	r17
     6b4:	08 95       	ret

000006b6 <xQueueGenericReset>:
     6b6:	0f 93       	push	r16
     6b8:	1f 93       	push	r17
     6ba:	cf 93       	push	r28
     6bc:	df 93       	push	r29
     6be:	fc 01       	movw	r30, r24
     6c0:	36 2f       	mov	r19, r22
     6c2:	89 2b       	or	r24, r25
     6c4:	09 f4       	brne	.+2      	; 0x6c8 <xQueueGenericReset+0x12>
     6c6:	4d c0       	rjmp	.+154    	; 0x762 <xQueueGenericReset+0xac>
     6c8:	23 8d       	ldd	r18, Z+27	; 0x1b
     6ca:	22 23       	and	r18, r18
     6cc:	09 f4       	brne	.+2      	; 0x6d0 <xQueueGenericReset+0x1a>
     6ce:	4b c0       	rjmp	.+150    	; 0x766 <xQueueGenericReset+0xb0>
     6d0:	02 2f       	mov	r16, r18
     6d2:	10 e0       	ldi	r17, 0x00	; 0
     6d4:	8f ef       	ldi	r24, 0xFF	; 255
     6d6:	9f ef       	ldi	r25, 0xFF	; 255
     6d8:	b8 01       	movw	r22, r16
     6da:	0e 94 cf 0a 	call	0x159e	; 0x159e <__udivmodhi4>
     6de:	44 8d       	ldd	r20, Z+28	; 0x1c
     6e0:	84 2f       	mov	r24, r20
     6e2:	90 e0       	ldi	r25, 0x00	; 0
     6e4:	68 17       	cp	r22, r24
     6e6:	79 07       	cpc	r23, r25
     6e8:	08 f4       	brcc	.+2      	; 0x6ec <xQueueGenericReset+0x36>
     6ea:	3f c0       	rjmp	.+126    	; 0x76a <xQueueGenericReset+0xb4>
     6ec:	ef 01       	movw	r28, r30
     6ee:	0f b6       	in	r0, 0x3f	; 63
     6f0:	f8 94       	cli
     6f2:	0f 92       	push	r0
     6f4:	60 81       	ld	r22, Z
     6f6:	71 81       	ldd	r23, Z+1	; 0x01
     6f8:	fb 01       	movw	r30, r22
     6fa:	24 9f       	mul	r18, r20
     6fc:	e0 0d       	add	r30, r0
     6fe:	f1 1d       	adc	r31, r1
     700:	11 24       	eor	r1, r1
     702:	fd 83       	std	Y+5, r31	; 0x05
     704:	ec 83       	std	Y+4, r30	; 0x04
     706:	1a 8e       	std	Y+26, r1	; 0x1a
     708:	7b 83       	std	Y+3, r23	; 0x03
     70a:	6a 83       	std	Y+2, r22	; 0x02
     70c:	01 50       	subi	r16, 0x01	; 1
     70e:	11 09       	sbc	r17, r1
     710:	80 9f       	mul	r24, r16
     712:	a0 01       	movw	r20, r0
     714:	81 9f       	mul	r24, r17
     716:	50 0d       	add	r21, r0
     718:	90 9f       	mul	r25, r16
     71a:	50 0d       	add	r21, r0
     71c:	11 24       	eor	r1, r1
     71e:	cb 01       	movw	r24, r22
     720:	84 0f       	add	r24, r20
     722:	95 1f       	adc	r25, r21
     724:	9f 83       	std	Y+7, r25	; 0x07
     726:	8e 83       	std	Y+6, r24	; 0x06
     728:	8f ef       	ldi	r24, 0xFF	; 255
     72a:	8d 8f       	std	Y+29, r24	; 0x1d
     72c:	8e 8f       	std	Y+30, r24	; 0x1e
     72e:	31 11       	cpse	r19, r1
     730:	0c c0       	rjmp	.+24     	; 0x74a <xQueueGenericReset+0x94>
     732:	88 85       	ldd	r24, Y+8	; 0x08
     734:	88 23       	and	r24, r24
     736:	89 f0       	breq	.+34     	; 0x75a <xQueueGenericReset+0xa4>
     738:	ce 01       	movw	r24, r28
     73a:	08 96       	adiw	r24, 0x08	; 8
     73c:	0e 94 c5 09 	call	0x138a	; 0x138a <xTaskRemoveFromEventList>
     740:	88 23       	and	r24, r24
     742:	59 f0       	breq	.+22     	; 0x75a <xQueueGenericReset+0xa4>
     744:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <vPortYield>
     748:	08 c0       	rjmp	.+16     	; 0x75a <xQueueGenericReset+0xa4>
     74a:	ce 01       	movw	r24, r28
     74c:	08 96       	adiw	r24, 0x08	; 8
     74e:	0e 94 84 00 	call	0x108	; 0x108 <vListInitialise>
     752:	ce 01       	movw	r24, r28
     754:	41 96       	adiw	r24, 0x11	; 17
     756:	0e 94 84 00 	call	0x108	; 0x108 <vListInitialise>
     75a:	0f 90       	pop	r0
     75c:	0f be       	out	0x3f, r0	; 63
     75e:	81 e0       	ldi	r24, 0x01	; 1
     760:	05 c0       	rjmp	.+10     	; 0x76c <xQueueGenericReset+0xb6>
     762:	80 e0       	ldi	r24, 0x00	; 0
     764:	03 c0       	rjmp	.+6      	; 0x76c <xQueueGenericReset+0xb6>
     766:	80 e0       	ldi	r24, 0x00	; 0
     768:	01 c0       	rjmp	.+2      	; 0x76c <xQueueGenericReset+0xb6>
     76a:	80 e0       	ldi	r24, 0x00	; 0
     76c:	df 91       	pop	r29
     76e:	cf 91       	pop	r28
     770:	1f 91       	pop	r17
     772:	0f 91       	pop	r16
     774:	08 95       	ret

00000776 <prvInitialiseNewQueue>:
     776:	0f 93       	push	r16
     778:	1f 93       	push	r17
     77a:	f8 01       	movw	r30, r16
     77c:	61 11       	cpse	r22, r1
     77e:	03 c0       	rjmp	.+6      	; 0x786 <prvInitialiseNewQueue+0x10>
     780:	11 83       	std	Z+1, r17	; 0x01
     782:	00 83       	st	Z, r16
     784:	02 c0       	rjmp	.+4      	; 0x78a <prvInitialiseNewQueue+0x14>
     786:	51 83       	std	Z+1, r21	; 0x01
     788:	40 83       	st	Z, r20
     78a:	83 8f       	std	Z+27, r24	; 0x1b
     78c:	64 8f       	std	Z+28, r22	; 0x1c
     78e:	61 e0       	ldi	r22, 0x01	; 1
     790:	cf 01       	movw	r24, r30
     792:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <xQueueGenericReset>
     796:	1f 91       	pop	r17
     798:	0f 91       	pop	r16
     79a:	08 95       	ret

0000079c <xQueueGenericCreate>:
     79c:	df 92       	push	r13
     79e:	ef 92       	push	r14
     7a0:	ff 92       	push	r15
     7a2:	0f 93       	push	r16
     7a4:	1f 93       	push	r17
     7a6:	cf 93       	push	r28
     7a8:	df 93       	push	r29
     7aa:	38 2f       	mov	r19, r24
     7ac:	e6 2f       	mov	r30, r22
     7ae:	88 23       	and	r24, r24
     7b0:	29 f1       	breq	.+74     	; 0x7fc <xQueueGenericCreate+0x60>
     7b2:	68 2f       	mov	r22, r24
     7b4:	70 e0       	ldi	r23, 0x00	; 0
     7b6:	8f ef       	ldi	r24, 0xFF	; 255
     7b8:	9f ef       	ldi	r25, 0xFF	; 255
     7ba:	0e 94 cf 0a 	call	0x159e	; 0x159e <__udivmodhi4>
     7be:	8e 2f       	mov	r24, r30
     7c0:	90 e0       	ldi	r25, 0x00	; 0
     7c2:	68 17       	cp	r22, r24
     7c4:	79 07       	cpc	r23, r25
     7c6:	e8 f0       	brcs	.+58     	; 0x802 <__DATA_REGION_LENGTH__+0x2>
     7c8:	3e 9f       	mul	r19, r30
     7ca:	c0 01       	movw	r24, r0
     7cc:	11 24       	eor	r1, r1
     7ce:	81 3e       	cpi	r24, 0xE1	; 225
     7d0:	2f ef       	ldi	r18, 0xFF	; 255
     7d2:	92 07       	cpc	r25, r18
     7d4:	c8 f4       	brcc	.+50     	; 0x808 <__DATA_REGION_LENGTH__+0x8>
     7d6:	d4 2e       	mov	r13, r20
     7d8:	de 2f       	mov	r29, r30
     7da:	c3 2f       	mov	r28, r19
     7dc:	4f 96       	adiw	r24, 0x1f	; 31
     7de:	0e 94 49 00 	call	0x92	; 0x92 <pvPortMalloc>
     7e2:	7c 01       	movw	r14, r24
     7e4:	00 97       	sbiw	r24, 0x00	; 0
     7e6:	91 f0       	breq	.+36     	; 0x80c <__DATA_REGION_LENGTH__+0xc>
     7e8:	8c 01       	movw	r16, r24
     7ea:	2d 2d       	mov	r18, r13
     7ec:	ac 01       	movw	r20, r24
     7ee:	41 5e       	subi	r20, 0xE1	; 225
     7f0:	5f 4f       	sbci	r21, 0xFF	; 255
     7f2:	6d 2f       	mov	r22, r29
     7f4:	8c 2f       	mov	r24, r28
     7f6:	0e 94 bb 03 	call	0x776	; 0x776 <prvInitialiseNewQueue>
     7fa:	08 c0       	rjmp	.+16     	; 0x80c <__DATA_REGION_LENGTH__+0xc>
     7fc:	e1 2c       	mov	r14, r1
     7fe:	f1 2c       	mov	r15, r1
     800:	05 c0       	rjmp	.+10     	; 0x80c <__DATA_REGION_LENGTH__+0xc>
     802:	e1 2c       	mov	r14, r1
     804:	f1 2c       	mov	r15, r1
     806:	02 c0       	rjmp	.+4      	; 0x80c <__DATA_REGION_LENGTH__+0xc>
     808:	e1 2c       	mov	r14, r1
     80a:	f1 2c       	mov	r15, r1
     80c:	c7 01       	movw	r24, r14
     80e:	df 91       	pop	r29
     810:	cf 91       	pop	r28
     812:	1f 91       	pop	r17
     814:	0f 91       	pop	r16
     816:	ff 90       	pop	r15
     818:	ef 90       	pop	r14
     81a:	df 90       	pop	r13
     81c:	08 95       	ret

0000081e <xQueueGenericSend>:
     81e:	cf 92       	push	r12
     820:	df 92       	push	r13
     822:	ef 92       	push	r14
     824:	ff 92       	push	r15
     826:	0f 93       	push	r16
     828:	1f 93       	push	r17
     82a:	cf 93       	push	r28
     82c:	df 93       	push	r29
     82e:	00 d0       	rcall	.+0      	; 0x830 <xQueueGenericSend+0x12>
     830:	00 d0       	rcall	.+0      	; 0x832 <xQueueGenericSend+0x14>
     832:	1f 92       	push	r1
     834:	cd b7       	in	r28, 0x3d	; 61
     836:	de b7       	in	r29, 0x3e	; 62
     838:	8c 01       	movw	r16, r24
     83a:	7b 01       	movw	r14, r22
     83c:	5d 83       	std	Y+5, r21	; 0x05
     83e:	4c 83       	std	Y+4, r20	; 0x04
     840:	c2 2e       	mov	r12, r18
     842:	d1 2c       	mov	r13, r1
     844:	0f b6       	in	r0, 0x3f	; 63
     846:	f8 94       	cli
     848:	0f 92       	push	r0
     84a:	f8 01       	movw	r30, r16
     84c:	92 8d       	ldd	r25, Z+26	; 0x1a
     84e:	83 8d       	ldd	r24, Z+27	; 0x1b
     850:	98 17       	cp	r25, r24
     852:	18 f0       	brcs	.+6      	; 0x85a <xQueueGenericSend+0x3c>
     854:	f2 e0       	ldi	r31, 0x02	; 2
     856:	cf 12       	cpse	r12, r31
     858:	19 c0       	rjmp	.+50     	; 0x88c <__stack+0x2d>
     85a:	4c 2d       	mov	r20, r12
     85c:	b7 01       	movw	r22, r14
     85e:	c8 01       	movw	r24, r16
     860:	0e 94 c4 02 	call	0x588	; 0x588 <prvCopyDataToQueue>
     864:	f8 01       	movw	r30, r16
     866:	91 89       	ldd	r25, Z+17	; 0x11
     868:	99 23       	and	r25, r25
     86a:	49 f0       	breq	.+18     	; 0x87e <__stack+0x1f>
     86c:	c8 01       	movw	r24, r16
     86e:	41 96       	adiw	r24, 0x11	; 17
     870:	0e 94 c5 09 	call	0x138a	; 0x138a <xTaskRemoveFromEventList>
     874:	88 23       	and	r24, r24
     876:	31 f0       	breq	.+12     	; 0x884 <__stack+0x25>
     878:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <vPortYield>
     87c:	03 c0       	rjmp	.+6      	; 0x884 <__stack+0x25>
     87e:	81 11       	cpse	r24, r1
     880:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <vPortYield>
     884:	0f 90       	pop	r0
     886:	0f be       	out	0x3f, r0	; 63
     888:	81 e0       	ldi	r24, 0x01	; 1
     88a:	4d c0       	rjmp	.+154    	; 0x926 <__stack+0xc7>
     88c:	8c 81       	ldd	r24, Y+4	; 0x04
     88e:	9d 81       	ldd	r25, Y+5	; 0x05
     890:	89 2b       	or	r24, r25
     892:	21 f4       	brne	.+8      	; 0x89c <__stack+0x3d>
     894:	0f 90       	pop	r0
     896:	0f be       	out	0x3f, r0	; 63
     898:	80 e0       	ldi	r24, 0x00	; 0
     89a:	45 c0       	rjmp	.+138    	; 0x926 <__stack+0xc7>
     89c:	d1 10       	cpse	r13, r1
     89e:	06 c0       	rjmp	.+12     	; 0x8ac <__stack+0x4d>
     8a0:	ce 01       	movw	r24, r28
     8a2:	01 96       	adiw	r24, 0x01	; 1
     8a4:	0e 94 82 0a 	call	0x1504	; 0x1504 <vTaskInternalSetTimeOutState>
     8a8:	dd 24       	eor	r13, r13
     8aa:	d3 94       	inc	r13
     8ac:	0f 90       	pop	r0
     8ae:	0f be       	out	0x3f, r0	; 63
     8b0:	0e 94 6a 07 	call	0xed4	; 0xed4 <vTaskSuspendAll>
     8b4:	0f b6       	in	r0, 0x3f	; 63
     8b6:	f8 94       	cli
     8b8:	0f 92       	push	r0
     8ba:	f8 01       	movw	r30, r16
     8bc:	85 8d       	ldd	r24, Z+29	; 0x1d
     8be:	8f 3f       	cpi	r24, 0xFF	; 255
     8c0:	09 f4       	brne	.+2      	; 0x8c4 <__stack+0x65>
     8c2:	15 8e       	std	Z+29, r1	; 0x1d
     8c4:	f8 01       	movw	r30, r16
     8c6:	86 8d       	ldd	r24, Z+30	; 0x1e
     8c8:	8f 3f       	cpi	r24, 0xFF	; 255
     8ca:	09 f4       	brne	.+2      	; 0x8ce <__stack+0x6f>
     8cc:	16 8e       	std	Z+30, r1	; 0x1e
     8ce:	0f 90       	pop	r0
     8d0:	0f be       	out	0x3f, r0	; 63
     8d2:	be 01       	movw	r22, r28
     8d4:	6c 5f       	subi	r22, 0xFC	; 252
     8d6:	7f 4f       	sbci	r23, 0xFF	; 255
     8d8:	ce 01       	movw	r24, r28
     8da:	01 96       	adiw	r24, 0x01	; 1
     8dc:	0e 94 8d 0a 	call	0x151a	; 0x151a <xTaskCheckForTimeOut>
     8e0:	81 11       	cpse	r24, r1
     8e2:	1b c0       	rjmp	.+54     	; 0x91a <__stack+0xbb>
     8e4:	c8 01       	movw	r24, r16
     8e6:	0e 94 b6 02 	call	0x56c	; 0x56c <prvIsQueueFull>
     8ea:	88 23       	and	r24, r24
     8ec:	81 f0       	breq	.+32     	; 0x90e <__stack+0xaf>
     8ee:	6c 81       	ldd	r22, Y+4	; 0x04
     8f0:	7d 81       	ldd	r23, Y+5	; 0x05
     8f2:	c8 01       	movw	r24, r16
     8f4:	08 96       	adiw	r24, 0x08	; 8
     8f6:	0e 94 b3 09 	call	0x1366	; 0x1366 <vTaskPlaceOnEventList>
     8fa:	c8 01       	movw	r24, r16
     8fc:	0e 94 27 03 	call	0x64e	; 0x64e <prvUnlockQueue>
     900:	0e 94 8a 08 	call	0x1114	; 0x1114 <xTaskResumeAll>
     904:	81 11       	cpse	r24, r1
     906:	9e cf       	rjmp	.-196    	; 0x844 <xQueueGenericSend+0x26>
     908:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <vPortYield>
     90c:	9b cf       	rjmp	.-202    	; 0x844 <xQueueGenericSend+0x26>
     90e:	c8 01       	movw	r24, r16
     910:	0e 94 27 03 	call	0x64e	; 0x64e <prvUnlockQueue>
     914:	0e 94 8a 08 	call	0x1114	; 0x1114 <xTaskResumeAll>
     918:	95 cf       	rjmp	.-214    	; 0x844 <xQueueGenericSend+0x26>
     91a:	c8 01       	movw	r24, r16
     91c:	0e 94 27 03 	call	0x64e	; 0x64e <prvUnlockQueue>
     920:	0e 94 8a 08 	call	0x1114	; 0x1114 <xTaskResumeAll>
     924:	80 e0       	ldi	r24, 0x00	; 0
     926:	0f 90       	pop	r0
     928:	0f 90       	pop	r0
     92a:	0f 90       	pop	r0
     92c:	0f 90       	pop	r0
     92e:	0f 90       	pop	r0
     930:	df 91       	pop	r29
     932:	cf 91       	pop	r28
     934:	1f 91       	pop	r17
     936:	0f 91       	pop	r16
     938:	ff 90       	pop	r15
     93a:	ef 90       	pop	r14
     93c:	df 90       	pop	r13
     93e:	cf 90       	pop	r12
     940:	08 95       	ret

00000942 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
     942:	cf 92       	push	r12
     944:	df 92       	push	r13
     946:	ef 92       	push	r14
     948:	ff 92       	push	r15
     94a:	0f 93       	push	r16
     94c:	1f 93       	push	r17
     94e:	cf 93       	push	r28
     950:	df 93       	push	r29
     952:	00 d0       	rcall	.+0      	; 0x954 <xQueueReceive+0x12>
     954:	00 d0       	rcall	.+0      	; 0x956 <xQueueReceive+0x14>
     956:	1f 92       	push	r1
     958:	cd b7       	in	r28, 0x3d	; 61
     95a:	de b7       	in	r29, 0x3e	; 62
     95c:	8c 01       	movw	r16, r24
     95e:	6b 01       	movw	r12, r22
     960:	5d 83       	std	Y+5, r21	; 0x05
     962:	4c 83       	std	Y+4, r20	; 0x04
    BaseType_t xEntryTimeSet = pdFALSE;
     964:	e1 2c       	mov	r14, r1
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
     966:	0f b6       	in	r0, 0x3f	; 63
     968:	f8 94       	cli
     96a:	0f 92       	push	r0
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
     96c:	f8 01       	movw	r30, r16
     96e:	f2 8c       	ldd	r15, Z+26	; 0x1a

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
     970:	ff 20       	and	r15, r15
     972:	a9 f0       	breq	.+42     	; 0x99e <xQueueReceive+0x5c>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
     974:	b6 01       	movw	r22, r12
     976:	c8 01       	movw	r24, r16
     978:	0e 94 0d 03 	call	0x61a	; 0x61a <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
     97c:	fa 94       	dec	r15
     97e:	f8 01       	movw	r30, r16
     980:	f2 8e       	std	Z+26, r15	; 0x1a

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
     982:	80 85       	ldd	r24, Z+8	; 0x08
     984:	88 23       	and	r24, r24
     986:	39 f0       	breq	.+14     	; 0x996 <xQueueReceive+0x54>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
     988:	c8 01       	movw	r24, r16
     98a:	08 96       	adiw	r24, 0x08	; 8
     98c:	0e 94 c5 09 	call	0x138a	; 0x138a <xTaskRemoveFromEventList>
     990:	81 11       	cpse	r24, r1
                    {
                        queueYIELD_IF_USING_PREEMPTION();
     992:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <vPortYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
     996:	0f 90       	pop	r0
     998:	0f be       	out	0x3f, r0	; 63
                return pdPASS;
     99a:	81 e0       	ldi	r24, 0x01	; 1
     99c:	53 c0       	rjmp	.+166    	; 0xa44 <xQueueReceive+0x102>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
     99e:	8c 81       	ldd	r24, Y+4	; 0x04
     9a0:	9d 81       	ldd	r25, Y+5	; 0x05
     9a2:	89 2b       	or	r24, r25
     9a4:	21 f4       	brne	.+8      	; 0x9ae <xQueueReceive+0x6c>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
     9a6:	0f 90       	pop	r0
     9a8:	0f be       	out	0x3f, r0	; 63
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
     9aa:	80 e0       	ldi	r24, 0x00	; 0
     9ac:	4b c0       	rjmp	.+150    	; 0xa44 <xQueueReceive+0x102>
                }
                else if( xEntryTimeSet == pdFALSE )
     9ae:	e1 10       	cpse	r14, r1
     9b0:	06 c0       	rjmp	.+12     	; 0x9be <xQueueReceive+0x7c>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
     9b2:	ce 01       	movw	r24, r28
     9b4:	01 96       	adiw	r24, 0x01	; 1
     9b6:	0e 94 82 0a 	call	0x1504	; 0x1504 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
     9ba:	ee 24       	eor	r14, r14
     9bc:	e3 94       	inc	r14
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
     9be:	0f 90       	pop	r0
     9c0:	0f be       	out	0x3f, r0	; 63

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
     9c2:	0e 94 6a 07 	call	0xed4	; 0xed4 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
     9c6:	0f b6       	in	r0, 0x3f	; 63
     9c8:	f8 94       	cli
     9ca:	0f 92       	push	r0
     9cc:	f8 01       	movw	r30, r16
     9ce:	85 8d       	ldd	r24, Z+29	; 0x1d
     9d0:	8f 3f       	cpi	r24, 0xFF	; 255
     9d2:	09 f4       	brne	.+2      	; 0x9d6 <xQueueReceive+0x94>
     9d4:	15 8e       	std	Z+29, r1	; 0x1d
     9d6:	f8 01       	movw	r30, r16
     9d8:	86 8d       	ldd	r24, Z+30	; 0x1e
     9da:	8f 3f       	cpi	r24, 0xFF	; 255
     9dc:	09 f4       	brne	.+2      	; 0x9e0 <xQueueReceive+0x9e>
     9de:	16 8e       	std	Z+30, r1	; 0x1e
     9e0:	0f 90       	pop	r0
     9e2:	0f be       	out	0x3f, r0	; 63

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
     9e4:	be 01       	movw	r22, r28
     9e6:	6c 5f       	subi	r22, 0xFC	; 252
     9e8:	7f 4f       	sbci	r23, 0xFF	; 255
     9ea:	ce 01       	movw	r24, r28
     9ec:	01 96       	adiw	r24, 0x01	; 1
     9ee:	0e 94 8d 0a 	call	0x151a	; 0x151a <xTaskCheckForTimeOut>
     9f2:	81 11       	cpse	r24, r1
     9f4:	1b c0       	rjmp	.+54     	; 0xa2c <xQueueReceive+0xea>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
     9f6:	c8 01       	movw	r24, r16
     9f8:	0e 94 a9 02 	call	0x552	; 0x552 <prvIsQueueEmpty>
     9fc:	88 23       	and	r24, r24
     9fe:	81 f0       	breq	.+32     	; 0xa20 <xQueueReceive+0xde>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
     a00:	6c 81       	ldd	r22, Y+4	; 0x04
     a02:	7d 81       	ldd	r23, Y+5	; 0x05
     a04:	c8 01       	movw	r24, r16
     a06:	41 96       	adiw	r24, 0x11	; 17
     a08:	0e 94 b3 09 	call	0x1366	; 0x1366 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
     a0c:	c8 01       	movw	r24, r16
     a0e:	0e 94 27 03 	call	0x64e	; 0x64e <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
     a12:	0e 94 8a 08 	call	0x1114	; 0x1114 <xTaskResumeAll>
     a16:	81 11       	cpse	r24, r1
     a18:	a6 cf       	rjmp	.-180    	; 0x966 <xQueueReceive+0x24>
                {
                    portYIELD_WITHIN_API();
     a1a:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <vPortYield>
     a1e:	a3 cf       	rjmp	.-186    	; 0x966 <xQueueReceive+0x24>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
     a20:	c8 01       	movw	r24, r16
     a22:	0e 94 27 03 	call	0x64e	; 0x64e <prvUnlockQueue>
                ( void ) xTaskResumeAll();
     a26:	0e 94 8a 08 	call	0x1114	; 0x1114 <xTaskResumeAll>
     a2a:	9d cf       	rjmp	.-198    	; 0x966 <xQueueReceive+0x24>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
     a2c:	c8 01       	movw	r24, r16
     a2e:	0e 94 27 03 	call	0x64e	; 0x64e <prvUnlockQueue>
            ( void ) xTaskResumeAll();
     a32:	0e 94 8a 08 	call	0x1114	; 0x1114 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
     a36:	c8 01       	movw	r24, r16
     a38:	0e 94 a9 02 	call	0x552	; 0x552 <prvIsQueueEmpty>
     a3c:	88 23       	and	r24, r24
     a3e:	09 f4       	brne	.+2      	; 0xa42 <xQueueReceive+0x100>
     a40:	92 cf       	rjmp	.-220    	; 0x966 <xQueueReceive+0x24>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
     a42:	80 e0       	ldi	r24, 0x00	; 0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
     a44:	0f 90       	pop	r0
     a46:	0f 90       	pop	r0
     a48:	0f 90       	pop	r0
     a4a:	0f 90       	pop	r0
     a4c:	0f 90       	pop	r0
     a4e:	df 91       	pop	r29
     a50:	cf 91       	pop	r28
     a52:	1f 91       	pop	r17
     a54:	0f 91       	pop	r16
     a56:	ff 90       	pop	r15
     a58:	ef 90       	pop	r14
     a5a:	df 90       	pop	r13
     a5c:	cf 90       	pop	r12
     a5e:	08 95       	ret

00000a60 <prvResetNextTaskUnblockTime>:
    taskENTER_CRITICAL();
    {
        pxTimeOut->xOverflowCount = xNumOfOverflows;
        pxTimeOut->xTimeOnEntering = xTickCount;
    }
    taskEXIT_CRITICAL();
     a60:	e0 91 84 06 	lds	r30, 0x0684	; 0x800684 <pxDelayedTaskList>
     a64:	f0 91 85 06 	lds	r31, 0x0685	; 0x800685 <pxDelayedTaskList+0x1>
     a68:	80 81       	ld	r24, Z
     a6a:	81 11       	cpse	r24, r1
     a6c:	07 c0       	rjmp	.+14     	; 0xa7c <prvResetNextTaskUnblockTime+0x1c>
     a6e:	8f ef       	ldi	r24, 0xFF	; 255
     a70:	9f ef       	ldi	r25, 0xFF	; 255
     a72:	90 93 64 06 	sts	0x0664, r25	; 0x800664 <xNextTaskUnblockTime+0x1>
     a76:	80 93 63 06 	sts	0x0663, r24	; 0x800663 <xNextTaskUnblockTime>
     a7a:	08 95       	ret
     a7c:	e0 91 84 06 	lds	r30, 0x0684	; 0x800684 <pxDelayedTaskList>
     a80:	f0 91 85 06 	lds	r31, 0x0685	; 0x800685 <pxDelayedTaskList+0x1>
     a84:	05 80       	ldd	r0, Z+5	; 0x05
     a86:	f6 81       	ldd	r31, Z+6	; 0x06
     a88:	e0 2d       	mov	r30, r0
     a8a:	80 81       	ld	r24, Z
     a8c:	91 81       	ldd	r25, Z+1	; 0x01
     a8e:	90 93 64 06 	sts	0x0664, r25	; 0x800664 <xNextTaskUnblockTime+0x1>
     a92:	80 93 63 06 	sts	0x0663, r24	; 0x800663 <xNextTaskUnblockTime>
     a96:	08 95       	ret

00000a98 <prvDeleteTCB>:
     a98:	cf 93       	push	r28
     a9a:	df 93       	push	r29
     a9c:	ec 01       	movw	r28, r24
     a9e:	8f 89       	ldd	r24, Y+23	; 0x17
     aa0:	98 8d       	ldd	r25, Y+24	; 0x18
     aa2:	0e 94 83 00 	call	0x106	; 0x106 <vPortFree>
     aa6:	ce 01       	movw	r24, r28
     aa8:	0e 94 83 00 	call	0x106	; 0x106 <vPortFree>
     aac:	df 91       	pop	r29
     aae:	cf 91       	pop	r28
     ab0:	08 95       	ret

00000ab2 <prvInitialiseNewTask>:
     ab2:	6f 92       	push	r6
     ab4:	7f 92       	push	r7
     ab6:	8f 92       	push	r8
     ab8:	9f 92       	push	r9
     aba:	af 92       	push	r10
     abc:	bf 92       	push	r11
     abe:	cf 92       	push	r12
     ac0:	df 92       	push	r13
     ac2:	ef 92       	push	r14
     ac4:	0f 93       	push	r16
     ac6:	1f 93       	push	r17
     ac8:	cf 93       	push	r28
     aca:	df 93       	push	r29
     acc:	cd b7       	in	r28, 0x3d	; 61
     ace:	de b7       	in	r29, 0x3e	; 62
     ad0:	4c 01       	movw	r8, r24
     ad2:	f5 01       	movw	r30, r10
     ad4:	87 89       	ldd	r24, Z+23	; 0x17
     ad6:	90 8d       	ldd	r25, Z+24	; 0x18
     ad8:	21 50       	subi	r18, 0x01	; 1
     ada:	31 09       	sbc	r19, r1
     adc:	3c 01       	movw	r6, r24
     ade:	62 0e       	add	r6, r18
     ae0:	73 1e       	adc	r7, r19
     ae2:	61 15       	cp	r22, r1
     ae4:	71 05       	cpc	r23, r1
     ae6:	89 f4       	brne	.+34     	; 0xb0a <prvInitialiseNewTask+0x58>
     ae8:	15 c0       	rjmp	.+42     	; 0xb14 <prvInitialiseNewTask+0x62>
     aea:	82 2f       	mov	r24, r18
     aec:	90 e0       	ldi	r25, 0x00	; 0
     aee:	fb 01       	movw	r30, r22
     af0:	e8 0f       	add	r30, r24
     af2:	f9 1f       	adc	r31, r25
     af4:	30 81       	ld	r19, Z
     af6:	d5 01       	movw	r26, r10
     af8:	a8 0f       	add	r26, r24
     afa:	b9 1f       	adc	r27, r25
     afc:	59 96       	adiw	r26, 0x19	; 25
     afe:	3c 93       	st	X, r19
     b00:	80 81       	ld	r24, Z
     b02:	88 23       	and	r24, r24
     b04:	29 f0       	breq	.+10     	; 0xb10 <prvInitialiseNewTask+0x5e>
     b06:	2f 5f       	subi	r18, 0xFF	; 255
     b08:	01 c0       	rjmp	.+2      	; 0xb0c <prvInitialiseNewTask+0x5a>
     b0a:	20 e0       	ldi	r18, 0x00	; 0
     b0c:	28 30       	cpi	r18, 0x08	; 8
     b0e:	68 f3       	brcs	.-38     	; 0xaea <prvInitialiseNewTask+0x38>
     b10:	f5 01       	movw	r30, r10
     b12:	10 a2       	std	Z+32, r1	; 0x20
     b14:	f3 e0       	ldi	r31, 0x03	; 3
     b16:	fe 15       	cp	r31, r14
     b18:	20 f4       	brcc	.+8      	; 0xb22 <prvInitialiseNewTask+0x70>
     b1a:	0f 2e       	mov	r0, r31
     b1c:	f3 e0       	ldi	r31, 0x03	; 3
     b1e:	ef 2e       	mov	r14, r31
     b20:	f0 2d       	mov	r31, r0
     b22:	f5 01       	movw	r30, r10
     b24:	e6 8a       	std	Z+22, r14	; 0x16
     b26:	c5 01       	movw	r24, r10
     b28:	02 96       	adiw	r24, 0x02	; 2
     b2a:	0e 94 92 00 	call	0x124	; 0x124 <vListInitialiseItem>
     b2e:	c5 01       	movw	r24, r10
     b30:	0c 96       	adiw	r24, 0x0c	; 12
     b32:	0e 94 92 00 	call	0x124	; 0x124 <vListInitialiseItem>
     b36:	f5 01       	movw	r30, r10
     b38:	b1 86       	std	Z+9, r11	; 0x09
     b3a:	a0 86       	std	Z+8, r10	; 0x08
     b3c:	84 e0       	ldi	r24, 0x04	; 4
     b3e:	90 e0       	ldi	r25, 0x00	; 0
     b40:	8e 19       	sub	r24, r14
     b42:	91 09       	sbc	r25, r1
     b44:	95 87       	std	Z+13, r25	; 0x0d
     b46:	84 87       	std	Z+12, r24	; 0x0c
     b48:	b3 8a       	std	Z+19, r11	; 0x13
     b4a:	a2 8a       	std	Z+18, r10	; 0x12
     b4c:	a8 01       	movw	r20, r16
     b4e:	b4 01       	movw	r22, r8
     b50:	c3 01       	movw	r24, r6
     b52:	0e 94 56 01 	call	0x2ac	; 0x2ac <pxPortInitialiseStack>
     b56:	f5 01       	movw	r30, r10
     b58:	91 83       	std	Z+1, r25	; 0x01
     b5a:	80 83       	st	Z, r24
     b5c:	c1 14       	cp	r12, r1
     b5e:	d1 04       	cpc	r13, r1
     b60:	19 f0       	breq	.+6      	; 0xb68 <prvInitialiseNewTask+0xb6>
     b62:	f6 01       	movw	r30, r12
     b64:	b1 82       	std	Z+1, r11	; 0x01
     b66:	a0 82       	st	Z, r10
     b68:	df 91       	pop	r29
     b6a:	cf 91       	pop	r28
     b6c:	1f 91       	pop	r17
     b6e:	0f 91       	pop	r16
     b70:	ef 90       	pop	r14
     b72:	df 90       	pop	r13
     b74:	cf 90       	pop	r12
     b76:	bf 90       	pop	r11
     b78:	af 90       	pop	r10
     b7a:	9f 90       	pop	r9
     b7c:	8f 90       	pop	r8
     b7e:	7f 90       	pop	r7
     b80:	6f 90       	pop	r6
     b82:	08 95       	ret

00000b84 <prvInitialiseTaskLists>:
     b84:	cf 93       	push	r28
     b86:	c0 e0       	ldi	r28, 0x00	; 0
     b88:	10 c0       	rjmp	.+32     	; 0xbaa <prvInitialiseTaskLists+0x26>
     b8a:	8c 2f       	mov	r24, r28
     b8c:	90 e0       	ldi	r25, 0x00	; 0
     b8e:	9c 01       	movw	r18, r24
     b90:	22 0f       	add	r18, r18
     b92:	33 1f       	adc	r19, r19
     b94:	22 0f       	add	r18, r18
     b96:	33 1f       	adc	r19, r19
     b98:	22 0f       	add	r18, r18
     b9a:	33 1f       	adc	r19, r19
     b9c:	82 0f       	add	r24, r18
     b9e:	93 1f       	adc	r25, r19
     ba0:	88 56       	subi	r24, 0x68	; 104
     ba2:	99 4f       	sbci	r25, 0xF9	; 249
     ba4:	0e 94 84 00 	call	0x108	; 0x108 <vListInitialise>
     ba8:	cf 5f       	subi	r28, 0xFF	; 255
     baa:	c4 30       	cpi	r28, 0x04	; 4
     bac:	70 f3       	brcs	.-36     	; 0xb8a <prvInitialiseTaskLists+0x6>
     bae:	8f e8       	ldi	r24, 0x8F	; 143
     bb0:	96 e0       	ldi	r25, 0x06	; 6
     bb2:	0e 94 84 00 	call	0x108	; 0x108 <vListInitialise>
     bb6:	86 e8       	ldi	r24, 0x86	; 134
     bb8:	96 e0       	ldi	r25, 0x06	; 6
     bba:	0e 94 84 00 	call	0x108	; 0x108 <vListInitialise>
     bbe:	89 e7       	ldi	r24, 0x79	; 121
     bc0:	96 e0       	ldi	r25, 0x06	; 6
     bc2:	0e 94 84 00 	call	0x108	; 0x108 <vListInitialise>
     bc6:	80 e7       	ldi	r24, 0x70	; 112
     bc8:	96 e0       	ldi	r25, 0x06	; 6
     bca:	0e 94 84 00 	call	0x108	; 0x108 <vListInitialise>
     bce:	8f e8       	ldi	r24, 0x8F	; 143
     bd0:	96 e0       	ldi	r25, 0x06	; 6
     bd2:	90 93 85 06 	sts	0x0685, r25	; 0x800685 <pxDelayedTaskList+0x1>
     bd6:	80 93 84 06 	sts	0x0684, r24	; 0x800684 <pxDelayedTaskList>
     bda:	86 e8       	ldi	r24, 0x86	; 134
     bdc:	96 e0       	ldi	r25, 0x06	; 6
     bde:	90 93 83 06 	sts	0x0683, r25	; 0x800683 <pxOverflowDelayedTaskList+0x1>
     be2:	80 93 82 06 	sts	0x0682, r24	; 0x800682 <pxOverflowDelayedTaskList>
     be6:	cf 91       	pop	r28
     be8:	08 95       	ret

00000bea <prvAddNewTaskToReadyList>:
     bea:	cf 93       	push	r28
     bec:	df 93       	push	r29
     bee:	ec 01       	movw	r28, r24
     bf0:	0f b6       	in	r0, 0x3f	; 63
     bf2:	f8 94       	cli
     bf4:	0f 92       	push	r0
     bf6:	80 91 6e 06 	lds	r24, 0x066E	; 0x80066e <uxCurrentNumberOfTasks>
     bfa:	8f 5f       	subi	r24, 0xFF	; 255
     bfc:	80 93 6e 06 	sts	0x066E, r24	; 0x80066e <uxCurrentNumberOfTasks>
     c00:	80 91 bc 06 	lds	r24, 0x06BC	; 0x8006bc <pxCurrentTCB>
     c04:	90 91 bd 06 	lds	r25, 0x06BD	; 0x8006bd <pxCurrentTCB+0x1>
     c08:	89 2b       	or	r24, r25
     c0a:	59 f4       	brne	.+22     	; 0xc22 <prvAddNewTaskToReadyList+0x38>
     c0c:	d0 93 bd 06 	sts	0x06BD, r29	; 0x8006bd <pxCurrentTCB+0x1>
     c10:	c0 93 bc 06 	sts	0x06BC, r28	; 0x8006bc <pxCurrentTCB>
     c14:	80 91 6e 06 	lds	r24, 0x066E	; 0x80066e <uxCurrentNumberOfTasks>
     c18:	81 30       	cpi	r24, 0x01	; 1
     c1a:	99 f4       	brne	.+38     	; 0xc42 <prvAddNewTaskToReadyList+0x58>
     c1c:	0e 94 c2 05 	call	0xb84	; 0xb84 <prvInitialiseTaskLists>
     c20:	10 c0       	rjmp	.+32     	; 0xc42 <prvAddNewTaskToReadyList+0x58>
     c22:	80 91 6a 06 	lds	r24, 0x066A	; 0x80066a <xSchedulerRunning>
     c26:	81 11       	cpse	r24, r1
     c28:	0c c0       	rjmp	.+24     	; 0xc42 <prvAddNewTaskToReadyList+0x58>
     c2a:	e0 91 bc 06 	lds	r30, 0x06BC	; 0x8006bc <pxCurrentTCB>
     c2e:	f0 91 bd 06 	lds	r31, 0x06BD	; 0x8006bd <pxCurrentTCB+0x1>
     c32:	96 89       	ldd	r25, Z+22	; 0x16
     c34:	8e 89       	ldd	r24, Y+22	; 0x16
     c36:	89 17       	cp	r24, r25
     c38:	20 f0       	brcs	.+8      	; 0xc42 <prvAddNewTaskToReadyList+0x58>
     c3a:	d0 93 bd 06 	sts	0x06BD, r29	; 0x8006bd <pxCurrentTCB+0x1>
     c3e:	c0 93 bc 06 	sts	0x06BC, r28	; 0x8006bc <pxCurrentTCB>
     c42:	80 91 65 06 	lds	r24, 0x0665	; 0x800665 <uxTaskNumber>
     c46:	8f 5f       	subi	r24, 0xFF	; 255
     c48:	80 93 65 06 	sts	0x0665, r24	; 0x800665 <uxTaskNumber>
     c4c:	8e 89       	ldd	r24, Y+22	; 0x16
     c4e:	90 91 6b 06 	lds	r25, 0x066B	; 0x80066b <uxTopReadyPriority>
     c52:	98 17       	cp	r25, r24
     c54:	10 f4       	brcc	.+4      	; 0xc5a <prvAddNewTaskToReadyList+0x70>
     c56:	80 93 6b 06 	sts	0x066B, r24	; 0x80066b <uxTopReadyPriority>
     c5a:	90 e0       	ldi	r25, 0x00	; 0
     c5c:	fc 01       	movw	r30, r24
     c5e:	ee 0f       	add	r30, r30
     c60:	ff 1f       	adc	r31, r31
     c62:	ee 0f       	add	r30, r30
     c64:	ff 1f       	adc	r31, r31
     c66:	ee 0f       	add	r30, r30
     c68:	ff 1f       	adc	r31, r31
     c6a:	8e 0f       	add	r24, r30
     c6c:	9f 1f       	adc	r25, r31
     c6e:	fc 01       	movw	r30, r24
     c70:	e8 56       	subi	r30, 0x68	; 104
     c72:	f9 4f       	sbci	r31, 0xF9	; 249
     c74:	01 80       	ldd	r0, Z+1	; 0x01
     c76:	f2 81       	ldd	r31, Z+2	; 0x02
     c78:	e0 2d       	mov	r30, r0
     c7a:	fd 83       	std	Y+5, r31	; 0x05
     c7c:	ec 83       	std	Y+4, r30	; 0x04
     c7e:	84 81       	ldd	r24, Z+4	; 0x04
     c80:	95 81       	ldd	r25, Z+5	; 0x05
     c82:	9f 83       	std	Y+7, r25	; 0x07
     c84:	8e 83       	std	Y+6, r24	; 0x06
     c86:	a4 81       	ldd	r26, Z+4	; 0x04
     c88:	b5 81       	ldd	r27, Z+5	; 0x05
     c8a:	ce 01       	movw	r24, r28
     c8c:	02 96       	adiw	r24, 0x02	; 2
     c8e:	13 96       	adiw	r26, 0x03	; 3
     c90:	9c 93       	st	X, r25
     c92:	8e 93       	st	-X, r24
     c94:	12 97       	sbiw	r26, 0x02	; 2
     c96:	95 83       	std	Z+5, r25	; 0x05
     c98:	84 83       	std	Z+4, r24	; 0x04
     c9a:	ee 89       	ldd	r30, Y+22	; 0x16
     c9c:	f0 e0       	ldi	r31, 0x00	; 0
     c9e:	cf 01       	movw	r24, r30
     ca0:	88 0f       	add	r24, r24
     ca2:	99 1f       	adc	r25, r25
     ca4:	88 0f       	add	r24, r24
     ca6:	99 1f       	adc	r25, r25
     ca8:	88 0f       	add	r24, r24
     caa:	99 1f       	adc	r25, r25
     cac:	e8 0f       	add	r30, r24
     cae:	f9 1f       	adc	r31, r25
     cb0:	e8 56       	subi	r30, 0x68	; 104
     cb2:	f9 4f       	sbci	r31, 0xF9	; 249
     cb4:	fb 87       	std	Y+11, r31	; 0x0b
     cb6:	ea 87       	std	Y+10, r30	; 0x0a
     cb8:	80 81       	ld	r24, Z
     cba:	8f 5f       	subi	r24, 0xFF	; 255
     cbc:	80 83       	st	Z, r24
     cbe:	0f 90       	pop	r0
     cc0:	0f be       	out	0x3f, r0	; 63
     cc2:	80 91 6a 06 	lds	r24, 0x066A	; 0x80066a <xSchedulerRunning>
     cc6:	88 23       	and	r24, r24
     cc8:	51 f0       	breq	.+20     	; 0xcde <prvAddNewTaskToReadyList+0xf4>
     cca:	e0 91 bc 06 	lds	r30, 0x06BC	; 0x8006bc <pxCurrentTCB>
     cce:	f0 91 bd 06 	lds	r31, 0x06BD	; 0x8006bd <pxCurrentTCB+0x1>
     cd2:	96 89       	ldd	r25, Z+22	; 0x16
     cd4:	8e 89       	ldd	r24, Y+22	; 0x16
     cd6:	98 17       	cp	r25, r24
     cd8:	10 f4       	brcc	.+4      	; 0xcde <prvAddNewTaskToReadyList+0xf4>
     cda:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <vPortYield>
     cde:	df 91       	pop	r29
     ce0:	cf 91       	pop	r28
     ce2:	08 95       	ret

00000ce4 <prvCheckTasksWaitingTermination>:
     ce4:	cf 93       	push	r28
     ce6:	df 93       	push	r29
     ce8:	1c c0       	rjmp	.+56     	; 0xd22 <prvCheckTasksWaitingTermination+0x3e>
     cea:	0f b6       	in	r0, 0x3f	; 63
     cec:	f8 94       	cli
     cee:	0f 92       	push	r0
     cf0:	e0 91 75 06 	lds	r30, 0x0675	; 0x800675 <xTasksWaitingTermination+0x5>
     cf4:	f0 91 76 06 	lds	r31, 0x0676	; 0x800676 <xTasksWaitingTermination+0x6>
     cf8:	c6 81       	ldd	r28, Z+6	; 0x06
     cfa:	d7 81       	ldd	r29, Z+7	; 0x07
     cfc:	ce 01       	movw	r24, r28
     cfe:	02 96       	adiw	r24, 0x02	; 2
     d00:	0e 94 c7 00 	call	0x18e	; 0x18e <uxListRemove>
     d04:	80 91 6e 06 	lds	r24, 0x066E	; 0x80066e <uxCurrentNumberOfTasks>
     d08:	81 50       	subi	r24, 0x01	; 1
     d0a:	80 93 6e 06 	sts	0x066E, r24	; 0x80066e <uxCurrentNumberOfTasks>
     d0e:	80 91 6f 06 	lds	r24, 0x066F	; 0x80066f <uxDeletedTasksWaitingCleanUp>
     d12:	81 50       	subi	r24, 0x01	; 1
     d14:	80 93 6f 06 	sts	0x066F, r24	; 0x80066f <uxDeletedTasksWaitingCleanUp>
     d18:	0f 90       	pop	r0
     d1a:	0f be       	out	0x3f, r0	; 63
     d1c:	ce 01       	movw	r24, r28
     d1e:	0e 94 4c 05 	call	0xa98	; 0xa98 <prvDeleteTCB>
     d22:	80 91 6f 06 	lds	r24, 0x066F	; 0x80066f <uxDeletedTasksWaitingCleanUp>
     d26:	81 11       	cpse	r24, r1
     d28:	e0 cf       	rjmp	.-64     	; 0xcea <prvCheckTasksWaitingTermination+0x6>
     d2a:	df 91       	pop	r29
     d2c:	cf 91       	pop	r28
     d2e:	08 95       	ret

00000d30 <prvIdleTask>:
     d30:	0e 94 72 06 	call	0xce4	; 0xce4 <prvCheckTasksWaitingTermination>
     d34:	80 91 98 06 	lds	r24, 0x0698	; 0x800698 <pxReadyTasksLists>
     d38:	82 30       	cpi	r24, 0x02	; 2
     d3a:	d0 f3       	brcs	.-12     	; 0xd30 <prvIdleTask>
     d3c:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <vPortYield>
     d40:	f7 cf       	rjmp	.-18     	; 0xd30 <prvIdleTask>

00000d42 <prvAddCurrentTaskToDelayedList>:
     d42:	0f 93       	push	r16
     d44:	1f 93       	push	r17
     d46:	cf 93       	push	r28
     d48:	df 93       	push	r29
     d4a:	ec 01       	movw	r28, r24
     d4c:	00 91 6c 06 	lds	r16, 0x066C	; 0x80066c <xTickCount>
     d50:	10 91 6d 06 	lds	r17, 0x066D	; 0x80066d <xTickCount+0x1>
     d54:	80 91 bc 06 	lds	r24, 0x06BC	; 0x8006bc <pxCurrentTCB>
     d58:	90 91 bd 06 	lds	r25, 0x06BD	; 0x8006bd <pxCurrentTCB+0x1>
     d5c:	02 96       	adiw	r24, 0x02	; 2
     d5e:	0e 94 c7 00 	call	0x18e	; 0x18e <uxListRemove>
     d62:	c0 0f       	add	r28, r16
     d64:	d1 1f       	adc	r29, r17
     d66:	e0 91 bc 06 	lds	r30, 0x06BC	; 0x8006bc <pxCurrentTCB>
     d6a:	f0 91 bd 06 	lds	r31, 0x06BD	; 0x8006bd <pxCurrentTCB+0x1>
     d6e:	d3 83       	std	Z+3, r29	; 0x03
     d70:	c2 83       	std	Z+2, r28	; 0x02
     d72:	c0 17       	cp	r28, r16
     d74:	d1 07       	cpc	r29, r17
     d76:	68 f4       	brcc	.+26     	; 0xd92 <prvAddCurrentTaskToDelayedList+0x50>
     d78:	60 91 bc 06 	lds	r22, 0x06BC	; 0x8006bc <pxCurrentTCB>
     d7c:	70 91 bd 06 	lds	r23, 0x06BD	; 0x8006bd <pxCurrentTCB+0x1>
     d80:	80 91 82 06 	lds	r24, 0x0682	; 0x800682 <pxOverflowDelayedTaskList>
     d84:	90 91 83 06 	lds	r25, 0x0683	; 0x800683 <pxOverflowDelayedTaskList+0x1>
     d88:	6e 5f       	subi	r22, 0xFE	; 254
     d8a:	7f 4f       	sbci	r23, 0xFF	; 255
     d8c:	0e 94 96 00 	call	0x12c	; 0x12c <vListInsert>
     d90:	17 c0       	rjmp	.+46     	; 0xdc0 <prvAddCurrentTaskToDelayedList+0x7e>
     d92:	60 91 bc 06 	lds	r22, 0x06BC	; 0x8006bc <pxCurrentTCB>
     d96:	70 91 bd 06 	lds	r23, 0x06BD	; 0x8006bd <pxCurrentTCB+0x1>
     d9a:	80 91 84 06 	lds	r24, 0x0684	; 0x800684 <pxDelayedTaskList>
     d9e:	90 91 85 06 	lds	r25, 0x0685	; 0x800685 <pxDelayedTaskList+0x1>
     da2:	6e 5f       	subi	r22, 0xFE	; 254
     da4:	7f 4f       	sbci	r23, 0xFF	; 255
     da6:	0e 94 96 00 	call	0x12c	; 0x12c <vListInsert>
     daa:	80 91 63 06 	lds	r24, 0x0663	; 0x800663 <xNextTaskUnblockTime>
     dae:	90 91 64 06 	lds	r25, 0x0664	; 0x800664 <xNextTaskUnblockTime+0x1>
     db2:	c8 17       	cp	r28, r24
     db4:	d9 07       	cpc	r29, r25
     db6:	20 f4       	brcc	.+8      	; 0xdc0 <prvAddCurrentTaskToDelayedList+0x7e>
     db8:	d0 93 64 06 	sts	0x0664, r29	; 0x800664 <xNextTaskUnblockTime+0x1>
     dbc:	c0 93 63 06 	sts	0x0663, r28	; 0x800663 <xNextTaskUnblockTime>
     dc0:	df 91       	pop	r29
     dc2:	cf 91       	pop	r28
     dc4:	1f 91       	pop	r17
     dc6:	0f 91       	pop	r16
     dc8:	08 95       	ret

00000dca <xTaskCreate>:
     dca:	2f 92       	push	r2
     dcc:	3f 92       	push	r3
     dce:	4f 92       	push	r4
     dd0:	5f 92       	push	r5
     dd2:	6f 92       	push	r6
     dd4:	7f 92       	push	r7
     dd6:	8f 92       	push	r8
     dd8:	9f 92       	push	r9
     dda:	af 92       	push	r10
     ddc:	bf 92       	push	r11
     dde:	cf 92       	push	r12
     de0:	df 92       	push	r13
     de2:	ef 92       	push	r14
     de4:	ff 92       	push	r15
     de6:	0f 93       	push	r16
     de8:	1f 93       	push	r17
     dea:	cf 93       	push	r28
     dec:	df 93       	push	r29
     dee:	3c 01       	movw	r6, r24
     df0:	1b 01       	movw	r2, r22
     df2:	5a 01       	movw	r10, r20
     df4:	29 01       	movw	r4, r18
     df6:	ca 01       	movw	r24, r20
     df8:	0e 94 49 00 	call	0x92	; 0x92 <pvPortMalloc>
     dfc:	6c 01       	movw	r12, r24
     dfe:	89 2b       	or	r24, r25
     e00:	99 f0       	breq	.+38     	; 0xe28 <xTaskCreate+0x5e>
     e02:	86 e2       	ldi	r24, 0x26	; 38
     e04:	90 e0       	ldi	r25, 0x00	; 0
     e06:	0e 94 49 00 	call	0x92	; 0x92 <pvPortMalloc>
     e0a:	ec 01       	movw	r28, r24
     e0c:	89 2b       	or	r24, r25
     e0e:	41 f0       	breq	.+16     	; 0xe20 <xTaskCreate+0x56>
     e10:	86 e2       	ldi	r24, 0x26	; 38
     e12:	fe 01       	movw	r30, r28
     e14:	11 92       	st	Z+, r1
     e16:	8a 95       	dec	r24
     e18:	e9 f7       	brne	.-6      	; 0xe14 <xTaskCreate+0x4a>
     e1a:	d8 8e       	std	Y+24, r13	; 0x18
     e1c:	cf 8a       	std	Y+23, r12	; 0x17
     e1e:	06 c0       	rjmp	.+12     	; 0xe2c <xTaskCreate+0x62>
     e20:	c6 01       	movw	r24, r12
     e22:	0e 94 83 00 	call	0x106	; 0x106 <vPortFree>
     e26:	02 c0       	rjmp	.+4      	; 0xe2c <xTaskCreate+0x62>
     e28:	c0 e0       	ldi	r28, 0x00	; 0
     e2a:	d0 e0       	ldi	r29, 0x00	; 0
     e2c:	20 97       	sbiw	r28, 0x00	; 0
     e2e:	91 f0       	breq	.+36     	; 0xe54 <xTaskCreate+0x8a>
     e30:	95 01       	movw	r18, r10
     e32:	40 e0       	ldi	r20, 0x00	; 0
     e34:	50 e0       	ldi	r21, 0x00	; 0
     e36:	81 2c       	mov	r8, r1
     e38:	91 2c       	mov	r9, r1
     e3a:	5e 01       	movw	r10, r28
     e3c:	67 01       	movw	r12, r14
     e3e:	e0 2e       	mov	r14, r16
     e40:	82 01       	movw	r16, r4
     e42:	b1 01       	movw	r22, r2
     e44:	c3 01       	movw	r24, r6
     e46:	0e 94 59 05 	call	0xab2	; 0xab2 <prvInitialiseNewTask>
     e4a:	ce 01       	movw	r24, r28
     e4c:	0e 94 f5 05 	call	0xbea	; 0xbea <prvAddNewTaskToReadyList>
     e50:	81 e0       	ldi	r24, 0x01	; 1
     e52:	01 c0       	rjmp	.+2      	; 0xe56 <xTaskCreate+0x8c>
     e54:	8f ef       	ldi	r24, 0xFF	; 255
     e56:	df 91       	pop	r29
     e58:	cf 91       	pop	r28
     e5a:	1f 91       	pop	r17
     e5c:	0f 91       	pop	r16
     e5e:	ff 90       	pop	r15
     e60:	ef 90       	pop	r14
     e62:	df 90       	pop	r13
     e64:	cf 90       	pop	r12
     e66:	bf 90       	pop	r11
     e68:	af 90       	pop	r10
     e6a:	9f 90       	pop	r9
     e6c:	8f 90       	pop	r8
     e6e:	7f 90       	pop	r7
     e70:	6f 90       	pop	r6
     e72:	5f 90       	pop	r5
     e74:	4f 90       	pop	r4
     e76:	3f 90       	pop	r3
     e78:	2f 90       	pop	r2
     e7a:	08 95       	ret

00000e7c <vTaskStartScheduler>:
     e7c:	ef 92       	push	r14
     e7e:	ff 92       	push	r15
     e80:	0f 93       	push	r16
     e82:	0f 2e       	mov	r0, r31
     e84:	f1 e6       	ldi	r31, 0x61	; 97
     e86:	ef 2e       	mov	r14, r31
     e88:	f6 e0       	ldi	r31, 0x06	; 6
     e8a:	ff 2e       	mov	r15, r31
     e8c:	f0 2d       	mov	r31, r0
     e8e:	00 e0       	ldi	r16, 0x00	; 0
     e90:	20 e0       	ldi	r18, 0x00	; 0
     e92:	30 e0       	ldi	r19, 0x00	; 0
     e94:	45 e5       	ldi	r20, 0x55	; 85
     e96:	50 e0       	ldi	r21, 0x00	; 0
     e98:	6a e7       	ldi	r22, 0x7A	; 122
     e9a:	70 e0       	ldi	r23, 0x00	; 0
     e9c:	88 e9       	ldi	r24, 0x98	; 152
     e9e:	96 e0       	ldi	r25, 0x06	; 6
     ea0:	0e 94 e5 06 	call	0xdca	; 0xdca <xTaskCreate>
     ea4:	81 30       	cpi	r24, 0x01	; 1
     ea6:	81 f4       	brne	.+32     	; 0xec8 <vTaskStartScheduler+0x4c>
     ea8:	f8 94       	cli
     eaa:	8f ef       	ldi	r24, 0xFF	; 255
     eac:	9f ef       	ldi	r25, 0xFF	; 255
     eae:	90 93 64 06 	sts	0x0664, r25	; 0x800664 <xNextTaskUnblockTime+0x1>
     eb2:	80 93 63 06 	sts	0x0663, r24	; 0x800663 <xNextTaskUnblockTime>
     eb6:	81 e0       	ldi	r24, 0x01	; 1
     eb8:	80 93 6a 06 	sts	0x066A, r24	; 0x80066a <xSchedulerRunning>
     ebc:	10 92 6d 06 	sts	0x066D, r1	; 0x80066d <xTickCount+0x1>
     ec0:	10 92 6c 06 	sts	0x066C, r1	; 0x80066c <xTickCount>
     ec4:	0e 94 c2 01 	call	0x384	; 0x384 <xPortStartScheduler>
     ec8:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     ecc:	0f 91       	pop	r16
     ece:	ff 90       	pop	r15
     ed0:	ef 90       	pop	r14
     ed2:	08 95       	ret

00000ed4 <vTaskSuspendAll>:
     ed4:	80 91 60 06 	lds	r24, 0x0660	; 0x800660 <uxSchedulerSuspended>
     ed8:	8f 5f       	subi	r24, 0xFF	; 255
     eda:	80 93 60 06 	sts	0x0660, r24	; 0x800660 <uxSchedulerSuspended>
     ede:	08 95       	ret

00000ee0 <xTaskIncrementTick>:
     ee0:	0f 93       	push	r16
     ee2:	1f 93       	push	r17
     ee4:	cf 93       	push	r28
     ee6:	df 93       	push	r29
     ee8:	80 91 60 06 	lds	r24, 0x0660	; 0x800660 <uxSchedulerSuspended>
     eec:	81 11       	cpse	r24, r1
     eee:	01 c1       	rjmp	.+514    	; 0x10f2 <xTaskIncrementTick+0x212>
     ef0:	c0 91 6c 06 	lds	r28, 0x066C	; 0x80066c <xTickCount>
     ef4:	d0 91 6d 06 	lds	r29, 0x066D	; 0x80066d <xTickCount+0x1>
     ef8:	8e 01       	movw	r16, r28
     efa:	0f 5f       	subi	r16, 0xFF	; 255
     efc:	1f 4f       	sbci	r17, 0xFF	; 255
     efe:	10 93 6d 06 	sts	0x066D, r17	; 0x80066d <xTickCount+0x1>
     f02:	00 93 6c 06 	sts	0x066C, r16	; 0x80066c <xTickCount>
     f06:	01 15       	cp	r16, r1
     f08:	11 05       	cpc	r17, r1
     f0a:	b9 f4       	brne	.+46     	; 0xf3a <xTaskIncrementTick+0x5a>
     f0c:	80 91 84 06 	lds	r24, 0x0684	; 0x800684 <pxDelayedTaskList>
     f10:	90 91 85 06 	lds	r25, 0x0685	; 0x800685 <pxDelayedTaskList+0x1>
     f14:	20 91 82 06 	lds	r18, 0x0682	; 0x800682 <pxOverflowDelayedTaskList>
     f18:	30 91 83 06 	lds	r19, 0x0683	; 0x800683 <pxOverflowDelayedTaskList+0x1>
     f1c:	30 93 85 06 	sts	0x0685, r19	; 0x800685 <pxDelayedTaskList+0x1>
     f20:	20 93 84 06 	sts	0x0684, r18	; 0x800684 <pxDelayedTaskList>
     f24:	90 93 83 06 	sts	0x0683, r25	; 0x800683 <pxOverflowDelayedTaskList+0x1>
     f28:	80 93 82 06 	sts	0x0682, r24	; 0x800682 <pxOverflowDelayedTaskList>
     f2c:	80 91 66 06 	lds	r24, 0x0666	; 0x800666 <xNumOfOverflows>
     f30:	8f 5f       	subi	r24, 0xFF	; 255
     f32:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <xNumOfOverflows>
     f36:	0e 94 30 05 	call	0xa60	; 0xa60 <prvResetNextTaskUnblockTime>
     f3a:	80 91 63 06 	lds	r24, 0x0663	; 0x800663 <xNextTaskUnblockTime>
     f3e:	90 91 64 06 	lds	r25, 0x0664	; 0x800664 <xNextTaskUnblockTime+0x1>
     f42:	08 17       	cp	r16, r24
     f44:	19 07       	cpc	r17, r25
     f46:	20 f4       	brcc	.+8      	; 0xf50 <xTaskIncrementTick+0x70>
     f48:	80 e0       	ldi	r24, 0x00	; 0
     f4a:	b8 c0       	rjmp	.+368    	; 0x10bc <xTaskIncrementTick+0x1dc>
     f4c:	81 e0       	ldi	r24, 0x01	; 1
     f4e:	01 c0       	rjmp	.+2      	; 0xf52 <xTaskIncrementTick+0x72>
     f50:	80 e0       	ldi	r24, 0x00	; 0
     f52:	e0 91 84 06 	lds	r30, 0x0684	; 0x800684 <pxDelayedTaskList>
     f56:	f0 91 85 06 	lds	r31, 0x0685	; 0x800685 <pxDelayedTaskList+0x1>
     f5a:	90 81       	ld	r25, Z
     f5c:	91 11       	cpse	r25, r1
     f5e:	07 c0       	rjmp	.+14     	; 0xf6e <xTaskIncrementTick+0x8e>
     f60:	2f ef       	ldi	r18, 0xFF	; 255
     f62:	3f ef       	ldi	r19, 0xFF	; 255
     f64:	30 93 64 06 	sts	0x0664, r19	; 0x800664 <xNextTaskUnblockTime+0x1>
     f68:	20 93 63 06 	sts	0x0663, r18	; 0x800663 <xNextTaskUnblockTime>
     f6c:	a7 c0       	rjmp	.+334    	; 0x10bc <xTaskIncrementTick+0x1dc>
     f6e:	e0 91 84 06 	lds	r30, 0x0684	; 0x800684 <pxDelayedTaskList>
     f72:	f0 91 85 06 	lds	r31, 0x0685	; 0x800685 <pxDelayedTaskList+0x1>
     f76:	05 80       	ldd	r0, Z+5	; 0x05
     f78:	f6 81       	ldd	r31, Z+6	; 0x06
     f7a:	e0 2d       	mov	r30, r0
     f7c:	06 80       	ldd	r0, Z+6	; 0x06
     f7e:	f7 81       	ldd	r31, Z+7	; 0x07
     f80:	e0 2d       	mov	r30, r0
     f82:	22 81       	ldd	r18, Z+2	; 0x02
     f84:	33 81       	ldd	r19, Z+3	; 0x03
     f86:	02 17       	cp	r16, r18
     f88:	13 07       	cpc	r17, r19
     f8a:	28 f4       	brcc	.+10     	; 0xf96 <xTaskIncrementTick+0xb6>
     f8c:	30 93 64 06 	sts	0x0664, r19	; 0x800664 <xNextTaskUnblockTime+0x1>
     f90:	20 93 63 06 	sts	0x0663, r18	; 0x800663 <xNextTaskUnblockTime>
     f94:	93 c0       	rjmp	.+294    	; 0x10bc <xTaskIncrementTick+0x1dc>
     f96:	a2 85       	ldd	r26, Z+10	; 0x0a
     f98:	b3 85       	ldd	r27, Z+11	; 0x0b
     f9a:	24 81       	ldd	r18, Z+4	; 0x04
     f9c:	35 81       	ldd	r19, Z+5	; 0x05
     f9e:	46 81       	ldd	r20, Z+6	; 0x06
     fa0:	57 81       	ldd	r21, Z+7	; 0x07
     fa2:	e9 01       	movw	r28, r18
     fa4:	5d 83       	std	Y+5, r21	; 0x05
     fa6:	4c 83       	std	Y+4, r20	; 0x04
     fa8:	26 81       	ldd	r18, Z+6	; 0x06
     faa:	37 81       	ldd	r19, Z+7	; 0x07
     fac:	44 81       	ldd	r20, Z+4	; 0x04
     fae:	55 81       	ldd	r21, Z+5	; 0x05
     fb0:	e9 01       	movw	r28, r18
     fb2:	5b 83       	std	Y+3, r21	; 0x03
     fb4:	4a 83       	std	Y+2, r20	; 0x02
     fb6:	11 96       	adiw	r26, 0x01	; 1
     fb8:	2d 91       	ld	r18, X+
     fba:	3c 91       	ld	r19, X
     fbc:	12 97       	sbiw	r26, 0x02	; 2
     fbe:	af 01       	movw	r20, r30
     fc0:	4e 5f       	subi	r20, 0xFE	; 254
     fc2:	5f 4f       	sbci	r21, 0xFF	; 255
     fc4:	24 17       	cp	r18, r20
     fc6:	35 07       	cpc	r19, r21
     fc8:	31 f4       	brne	.+12     	; 0xfd6 <xTaskIncrementTick+0xf6>
     fca:	26 81       	ldd	r18, Z+6	; 0x06
     fcc:	37 81       	ldd	r19, Z+7	; 0x07
     fce:	12 96       	adiw	r26, 0x02	; 2
     fd0:	3c 93       	st	X, r19
     fd2:	2e 93       	st	-X, r18
     fd4:	11 97       	sbiw	r26, 0x01	; 1
     fd6:	13 86       	std	Z+11, r1	; 0x0b
     fd8:	12 86       	std	Z+10, r1	; 0x0a
     fda:	9c 91       	ld	r25, X
     fdc:	91 50       	subi	r25, 0x01	; 1
     fde:	9c 93       	st	X, r25
     fe0:	a4 89       	ldd	r26, Z+20	; 0x14
     fe2:	b5 89       	ldd	r27, Z+21	; 0x15
     fe4:	10 97       	sbiw	r26, 0x00	; 0
     fe6:	19 f1       	breq	.+70     	; 0x102e <xTaskIncrementTick+0x14e>
     fe8:	26 85       	ldd	r18, Z+14	; 0x0e
     fea:	37 85       	ldd	r19, Z+15	; 0x0f
     fec:	60 89       	ldd	r22, Z+16	; 0x10
     fee:	71 89       	ldd	r23, Z+17	; 0x11
     ff0:	e9 01       	movw	r28, r18
     ff2:	7d 83       	std	Y+5, r23	; 0x05
     ff4:	6c 83       	std	Y+4, r22	; 0x04
     ff6:	20 89       	ldd	r18, Z+16	; 0x10
     ff8:	31 89       	ldd	r19, Z+17	; 0x11
     ffa:	66 85       	ldd	r22, Z+14	; 0x0e
     ffc:	77 85       	ldd	r23, Z+15	; 0x0f
     ffe:	e9 01       	movw	r28, r18
    1000:	7b 83       	std	Y+3, r23	; 0x03
    1002:	6a 83       	std	Y+2, r22	; 0x02
    1004:	11 96       	adiw	r26, 0x01	; 1
    1006:	6d 91       	ld	r22, X+
    1008:	7c 91       	ld	r23, X
    100a:	12 97       	sbiw	r26, 0x02	; 2
    100c:	9f 01       	movw	r18, r30
    100e:	24 5f       	subi	r18, 0xF4	; 244
    1010:	3f 4f       	sbci	r19, 0xFF	; 255
    1012:	62 17       	cp	r22, r18
    1014:	73 07       	cpc	r23, r19
    1016:	31 f4       	brne	.+12     	; 0x1024 <xTaskIncrementTick+0x144>
    1018:	20 89       	ldd	r18, Z+16	; 0x10
    101a:	31 89       	ldd	r19, Z+17	; 0x11
    101c:	12 96       	adiw	r26, 0x02	; 2
    101e:	3c 93       	st	X, r19
    1020:	2e 93       	st	-X, r18
    1022:	11 97       	sbiw	r26, 0x01	; 1
    1024:	15 8a       	std	Z+21, r1	; 0x15
    1026:	14 8a       	std	Z+20, r1	; 0x14
    1028:	9c 91       	ld	r25, X
    102a:	91 50       	subi	r25, 0x01	; 1
    102c:	9c 93       	st	X, r25
    102e:	26 89       	ldd	r18, Z+22	; 0x16
    1030:	90 91 6b 06 	lds	r25, 0x066B	; 0x80066b <uxTopReadyPriority>
    1034:	92 17       	cp	r25, r18
    1036:	10 f4       	brcc	.+4      	; 0x103c <xTaskIncrementTick+0x15c>
    1038:	20 93 6b 06 	sts	0x066B, r18	; 0x80066b <uxTopReadyPriority>
    103c:	30 e0       	ldi	r19, 0x00	; 0
    103e:	d9 01       	movw	r26, r18
    1040:	aa 0f       	add	r26, r26
    1042:	bb 1f       	adc	r27, r27
    1044:	aa 0f       	add	r26, r26
    1046:	bb 1f       	adc	r27, r27
    1048:	aa 0f       	add	r26, r26
    104a:	bb 1f       	adc	r27, r27
    104c:	2a 0f       	add	r18, r26
    104e:	3b 1f       	adc	r19, r27
    1050:	d9 01       	movw	r26, r18
    1052:	a8 56       	subi	r26, 0x68	; 104
    1054:	b9 4f       	sbci	r27, 0xF9	; 249
    1056:	11 96       	adiw	r26, 0x01	; 1
    1058:	0d 90       	ld	r0, X+
    105a:	bc 91       	ld	r27, X
    105c:	a0 2d       	mov	r26, r0
    105e:	b5 83       	std	Z+5, r27	; 0x05
    1060:	a4 83       	std	Z+4, r26	; 0x04
    1062:	14 96       	adiw	r26, 0x04	; 4
    1064:	2d 91       	ld	r18, X+
    1066:	3c 91       	ld	r19, X
    1068:	15 97       	sbiw	r26, 0x05	; 5
    106a:	37 83       	std	Z+7, r19	; 0x07
    106c:	26 83       	std	Z+6, r18	; 0x06
    106e:	14 96       	adiw	r26, 0x04	; 4
    1070:	2d 91       	ld	r18, X+
    1072:	3c 91       	ld	r19, X
    1074:	15 97       	sbiw	r26, 0x05	; 5
    1076:	e9 01       	movw	r28, r18
    1078:	5b 83       	std	Y+3, r21	; 0x03
    107a:	4a 83       	std	Y+2, r20	; 0x02
    107c:	15 96       	adiw	r26, 0x05	; 5
    107e:	5c 93       	st	X, r21
    1080:	4e 93       	st	-X, r20
    1082:	14 97       	sbiw	r26, 0x04	; 4
    1084:	a6 89       	ldd	r26, Z+22	; 0x16
    1086:	b0 e0       	ldi	r27, 0x00	; 0
    1088:	9d 01       	movw	r18, r26
    108a:	22 0f       	add	r18, r18
    108c:	33 1f       	adc	r19, r19
    108e:	22 0f       	add	r18, r18
    1090:	33 1f       	adc	r19, r19
    1092:	22 0f       	add	r18, r18
    1094:	33 1f       	adc	r19, r19
    1096:	a2 0f       	add	r26, r18
    1098:	b3 1f       	adc	r27, r19
    109a:	a8 56       	subi	r26, 0x68	; 104
    109c:	b9 4f       	sbci	r27, 0xF9	; 249
    109e:	b3 87       	std	Z+11, r27	; 0x0b
    10a0:	a2 87       	std	Z+10, r26	; 0x0a
    10a2:	9c 91       	ld	r25, X
    10a4:	9f 5f       	subi	r25, 0xFF	; 255
    10a6:	9c 93       	st	X, r25
    10a8:	26 89       	ldd	r18, Z+22	; 0x16
    10aa:	e0 91 bc 06 	lds	r30, 0x06BC	; 0x8006bc <pxCurrentTCB>
    10ae:	f0 91 bd 06 	lds	r31, 0x06BD	; 0x8006bd <pxCurrentTCB+0x1>
    10b2:	96 89       	ldd	r25, Z+22	; 0x16
    10b4:	92 17       	cp	r25, r18
    10b6:	08 f4       	brcc	.+2      	; 0x10ba <xTaskIncrementTick+0x1da>
    10b8:	49 cf       	rjmp	.-366    	; 0xf4c <xTaskIncrementTick+0x6c>
    10ba:	4b cf       	rjmp	.-362    	; 0xf52 <xTaskIncrementTick+0x72>
    10bc:	e0 91 bc 06 	lds	r30, 0x06BC	; 0x8006bc <pxCurrentTCB>
    10c0:	f0 91 bd 06 	lds	r31, 0x06BD	; 0x8006bd <pxCurrentTCB+0x1>
    10c4:	26 89       	ldd	r18, Z+22	; 0x16
    10c6:	30 e0       	ldi	r19, 0x00	; 0
    10c8:	f9 01       	movw	r30, r18
    10ca:	ee 0f       	add	r30, r30
    10cc:	ff 1f       	adc	r31, r31
    10ce:	ee 0f       	add	r30, r30
    10d0:	ff 1f       	adc	r31, r31
    10d2:	ee 0f       	add	r30, r30
    10d4:	ff 1f       	adc	r31, r31
    10d6:	2e 0f       	add	r18, r30
    10d8:	3f 1f       	adc	r19, r31
    10da:	f9 01       	movw	r30, r18
    10dc:	e8 56       	subi	r30, 0x68	; 104
    10de:	f9 4f       	sbci	r31, 0xF9	; 249
    10e0:	90 81       	ld	r25, Z
    10e2:	92 30       	cpi	r25, 0x02	; 2
    10e4:	08 f0       	brcs	.+2      	; 0x10e8 <xTaskIncrementTick+0x208>
    10e6:	81 e0       	ldi	r24, 0x01	; 1
    10e8:	90 91 67 06 	lds	r25, 0x0667	; 0x800667 <xYieldPending>
    10ec:	91 11       	cpse	r25, r1
    10ee:	0c c0       	rjmp	.+24     	; 0x1108 <xTaskIncrementTick+0x228>
    10f0:	0c c0       	rjmp	.+24     	; 0x110a <xTaskIncrementTick+0x22a>
    10f2:	80 91 68 06 	lds	r24, 0x0668	; 0x800668 <xPendedTicks>
    10f6:	90 91 69 06 	lds	r25, 0x0669	; 0x800669 <xPendedTicks+0x1>
    10fa:	01 96       	adiw	r24, 0x01	; 1
    10fc:	90 93 69 06 	sts	0x0669, r25	; 0x800669 <xPendedTicks+0x1>
    1100:	80 93 68 06 	sts	0x0668, r24	; 0x800668 <xPendedTicks>
    1104:	80 e0       	ldi	r24, 0x00	; 0
    1106:	01 c0       	rjmp	.+2      	; 0x110a <xTaskIncrementTick+0x22a>
    1108:	81 e0       	ldi	r24, 0x01	; 1
    110a:	df 91       	pop	r29
    110c:	cf 91       	pop	r28
    110e:	1f 91       	pop	r17
    1110:	0f 91       	pop	r16
    1112:	08 95       	ret

00001114 <xTaskResumeAll>:
    1114:	cf 93       	push	r28
    1116:	df 93       	push	r29
    1118:	0f b6       	in	r0, 0x3f	; 63
    111a:	f8 94       	cli
    111c:	0f 92       	push	r0
    111e:	80 91 60 06 	lds	r24, 0x0660	; 0x800660 <uxSchedulerSuspended>
    1122:	81 50       	subi	r24, 0x01	; 1
    1124:	80 93 60 06 	sts	0x0660, r24	; 0x800660 <uxSchedulerSuspended>
    1128:	80 91 60 06 	lds	r24, 0x0660	; 0x800660 <uxSchedulerSuspended>
    112c:	81 11       	cpse	r24, r1
    112e:	bf c0       	rjmp	.+382    	; 0x12ae <xTaskResumeAll+0x19a>
    1130:	80 91 6e 06 	lds	r24, 0x066E	; 0x80066e <uxCurrentNumberOfTasks>
    1134:	81 11       	cpse	r24, r1
    1136:	96 c0       	rjmp	.+300    	; 0x1264 <xTaskResumeAll+0x150>
    1138:	bd c0       	rjmp	.+378    	; 0x12b4 <xTaskResumeAll+0x1a0>
    113a:	e0 91 7e 06 	lds	r30, 0x067E	; 0x80067e <xPendingReadyList+0x5>
    113e:	f0 91 7f 06 	lds	r31, 0x067F	; 0x80067f <xPendingReadyList+0x6>
    1142:	06 80       	ldd	r0, Z+6	; 0x06
    1144:	f7 81       	ldd	r31, Z+7	; 0x07
    1146:	e0 2d       	mov	r30, r0
    1148:	a4 89       	ldd	r26, Z+20	; 0x14
    114a:	b5 89       	ldd	r27, Z+21	; 0x15
    114c:	c6 85       	ldd	r28, Z+14	; 0x0e
    114e:	d7 85       	ldd	r29, Z+15	; 0x0f
    1150:	80 89       	ldd	r24, Z+16	; 0x10
    1152:	91 89       	ldd	r25, Z+17	; 0x11
    1154:	9d 83       	std	Y+5, r25	; 0x05
    1156:	8c 83       	std	Y+4, r24	; 0x04
    1158:	c0 89       	ldd	r28, Z+16	; 0x10
    115a:	d1 89       	ldd	r29, Z+17	; 0x11
    115c:	86 85       	ldd	r24, Z+14	; 0x0e
    115e:	97 85       	ldd	r25, Z+15	; 0x0f
    1160:	9b 83       	std	Y+3, r25	; 0x03
    1162:	8a 83       	std	Y+2, r24	; 0x02
    1164:	11 96       	adiw	r26, 0x01	; 1
    1166:	2d 91       	ld	r18, X+
    1168:	3c 91       	ld	r19, X
    116a:	12 97       	sbiw	r26, 0x02	; 2
    116c:	cf 01       	movw	r24, r30
    116e:	0c 96       	adiw	r24, 0x0c	; 12
    1170:	28 17       	cp	r18, r24
    1172:	39 07       	cpc	r19, r25
    1174:	31 f4       	brne	.+12     	; 0x1182 <xTaskResumeAll+0x6e>
    1176:	80 89       	ldd	r24, Z+16	; 0x10
    1178:	91 89       	ldd	r25, Z+17	; 0x11
    117a:	12 96       	adiw	r26, 0x02	; 2
    117c:	9c 93       	st	X, r25
    117e:	8e 93       	st	-X, r24
    1180:	11 97       	sbiw	r26, 0x01	; 1
    1182:	15 8a       	std	Z+21, r1	; 0x15
    1184:	14 8a       	std	Z+20, r1	; 0x14
    1186:	8c 91       	ld	r24, X
    1188:	81 50       	subi	r24, 0x01	; 1
    118a:	8c 93       	st	X, r24
    118c:	a2 85       	ldd	r26, Z+10	; 0x0a
    118e:	b3 85       	ldd	r27, Z+11	; 0x0b
    1190:	c4 81       	ldd	r28, Z+4	; 0x04
    1192:	d5 81       	ldd	r29, Z+5	; 0x05
    1194:	86 81       	ldd	r24, Z+6	; 0x06
    1196:	97 81       	ldd	r25, Z+7	; 0x07
    1198:	9d 83       	std	Y+5, r25	; 0x05
    119a:	8c 83       	std	Y+4, r24	; 0x04
    119c:	c6 81       	ldd	r28, Z+6	; 0x06
    119e:	d7 81       	ldd	r29, Z+7	; 0x07
    11a0:	84 81       	ldd	r24, Z+4	; 0x04
    11a2:	95 81       	ldd	r25, Z+5	; 0x05
    11a4:	9b 83       	std	Y+3, r25	; 0x03
    11a6:	8a 83       	std	Y+2, r24	; 0x02
    11a8:	11 96       	adiw	r26, 0x01	; 1
    11aa:	8d 91       	ld	r24, X+
    11ac:	9c 91       	ld	r25, X
    11ae:	12 97       	sbiw	r26, 0x02	; 2
    11b0:	9f 01       	movw	r18, r30
    11b2:	2e 5f       	subi	r18, 0xFE	; 254
    11b4:	3f 4f       	sbci	r19, 0xFF	; 255
    11b6:	82 17       	cp	r24, r18
    11b8:	93 07       	cpc	r25, r19
    11ba:	31 f4       	brne	.+12     	; 0x11c8 <xTaskResumeAll+0xb4>
    11bc:	86 81       	ldd	r24, Z+6	; 0x06
    11be:	97 81       	ldd	r25, Z+7	; 0x07
    11c0:	12 96       	adiw	r26, 0x02	; 2
    11c2:	9c 93       	st	X, r25
    11c4:	8e 93       	st	-X, r24
    11c6:	11 97       	sbiw	r26, 0x01	; 1
    11c8:	13 86       	std	Z+11, r1	; 0x0b
    11ca:	12 86       	std	Z+10, r1	; 0x0a
    11cc:	8c 91       	ld	r24, X
    11ce:	81 50       	subi	r24, 0x01	; 1
    11d0:	8c 93       	st	X, r24
    11d2:	86 89       	ldd	r24, Z+22	; 0x16
    11d4:	90 91 6b 06 	lds	r25, 0x066B	; 0x80066b <uxTopReadyPriority>
    11d8:	98 17       	cp	r25, r24
    11da:	10 f4       	brcc	.+4      	; 0x11e0 <xTaskResumeAll+0xcc>
    11dc:	80 93 6b 06 	sts	0x066B, r24	; 0x80066b <uxTopReadyPriority>
    11e0:	90 e0       	ldi	r25, 0x00	; 0
    11e2:	dc 01       	movw	r26, r24
    11e4:	aa 0f       	add	r26, r26
    11e6:	bb 1f       	adc	r27, r27
    11e8:	aa 0f       	add	r26, r26
    11ea:	bb 1f       	adc	r27, r27
    11ec:	aa 0f       	add	r26, r26
    11ee:	bb 1f       	adc	r27, r27
    11f0:	8a 0f       	add	r24, r26
    11f2:	9b 1f       	adc	r25, r27
    11f4:	dc 01       	movw	r26, r24
    11f6:	a8 56       	subi	r26, 0x68	; 104
    11f8:	b9 4f       	sbci	r27, 0xF9	; 249
    11fa:	11 96       	adiw	r26, 0x01	; 1
    11fc:	0d 90       	ld	r0, X+
    11fe:	bc 91       	ld	r27, X
    1200:	a0 2d       	mov	r26, r0
    1202:	b5 83       	std	Z+5, r27	; 0x05
    1204:	a4 83       	std	Z+4, r26	; 0x04
    1206:	14 96       	adiw	r26, 0x04	; 4
    1208:	8d 91       	ld	r24, X+
    120a:	9c 91       	ld	r25, X
    120c:	15 97       	sbiw	r26, 0x05	; 5
    120e:	97 83       	std	Z+7, r25	; 0x07
    1210:	86 83       	std	Z+6, r24	; 0x06
    1212:	14 96       	adiw	r26, 0x04	; 4
    1214:	cd 91       	ld	r28, X+
    1216:	dc 91       	ld	r29, X
    1218:	15 97       	sbiw	r26, 0x05	; 5
    121a:	3b 83       	std	Y+3, r19	; 0x03
    121c:	2a 83       	std	Y+2, r18	; 0x02
    121e:	15 96       	adiw	r26, 0x05	; 5
    1220:	3c 93       	st	X, r19
    1222:	2e 93       	st	-X, r18
    1224:	14 97       	sbiw	r26, 0x04	; 4
    1226:	a6 89       	ldd	r26, Z+22	; 0x16
    1228:	b0 e0       	ldi	r27, 0x00	; 0
    122a:	cd 01       	movw	r24, r26
    122c:	88 0f       	add	r24, r24
    122e:	99 1f       	adc	r25, r25
    1230:	88 0f       	add	r24, r24
    1232:	99 1f       	adc	r25, r25
    1234:	88 0f       	add	r24, r24
    1236:	99 1f       	adc	r25, r25
    1238:	a8 0f       	add	r26, r24
    123a:	b9 1f       	adc	r27, r25
    123c:	a8 56       	subi	r26, 0x68	; 104
    123e:	b9 4f       	sbci	r27, 0xF9	; 249
    1240:	b3 87       	std	Z+11, r27	; 0x0b
    1242:	a2 87       	std	Z+10, r26	; 0x0a
    1244:	8c 91       	ld	r24, X
    1246:	8f 5f       	subi	r24, 0xFF	; 255
    1248:	8c 93       	st	X, r24
    124a:	96 89       	ldd	r25, Z+22	; 0x16
    124c:	a0 91 bc 06 	lds	r26, 0x06BC	; 0x8006bc <pxCurrentTCB>
    1250:	b0 91 bd 06 	lds	r27, 0x06BD	; 0x8006bd <pxCurrentTCB+0x1>
    1254:	56 96       	adiw	r26, 0x16	; 22
    1256:	8c 91       	ld	r24, X
    1258:	98 17       	cp	r25, r24
    125a:	30 f0       	brcs	.+12     	; 0x1268 <xTaskResumeAll+0x154>
    125c:	81 e0       	ldi	r24, 0x01	; 1
    125e:	80 93 67 06 	sts	0x0667, r24	; 0x800667 <xYieldPending>
    1262:	02 c0       	rjmp	.+4      	; 0x1268 <xTaskResumeAll+0x154>
    1264:	e0 e0       	ldi	r30, 0x00	; 0
    1266:	f0 e0       	ldi	r31, 0x00	; 0
    1268:	80 91 79 06 	lds	r24, 0x0679	; 0x800679 <xPendingReadyList>
    126c:	81 11       	cpse	r24, r1
    126e:	65 cf       	rjmp	.-310    	; 0x113a <xTaskResumeAll+0x26>
    1270:	ef 2b       	or	r30, r31
    1272:	11 f0       	breq	.+4      	; 0x1278 <xTaskResumeAll+0x164>
    1274:	0e 94 30 05 	call	0xa60	; 0xa60 <prvResetNextTaskUnblockTime>
    1278:	c0 91 68 06 	lds	r28, 0x0668	; 0x800668 <xPendedTicks>
    127c:	d0 91 69 06 	lds	r29, 0x0669	; 0x800669 <xPendedTicks+0x1>
    1280:	20 97       	sbiw	r28, 0x00	; 0
    1282:	69 f0       	breq	.+26     	; 0x129e <xTaskResumeAll+0x18a>
    1284:	0e 94 70 07 	call	0xee0	; 0xee0 <xTaskIncrementTick>
    1288:	88 23       	and	r24, r24
    128a:	19 f0       	breq	.+6      	; 0x1292 <xTaskResumeAll+0x17e>
    128c:	81 e0       	ldi	r24, 0x01	; 1
    128e:	80 93 67 06 	sts	0x0667, r24	; 0x800667 <xYieldPending>
    1292:	21 97       	sbiw	r28, 0x01	; 1
    1294:	b9 f7       	brne	.-18     	; 0x1284 <xTaskResumeAll+0x170>
    1296:	10 92 69 06 	sts	0x0669, r1	; 0x800669 <xPendedTicks+0x1>
    129a:	10 92 68 06 	sts	0x0668, r1	; 0x800668 <xPendedTicks>
    129e:	80 91 67 06 	lds	r24, 0x0667	; 0x800667 <xYieldPending>
    12a2:	88 23       	and	r24, r24
    12a4:	31 f0       	breq	.+12     	; 0x12b2 <xTaskResumeAll+0x19e>
    12a6:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <vPortYield>
    12aa:	81 e0       	ldi	r24, 0x01	; 1
    12ac:	03 c0       	rjmp	.+6      	; 0x12b4 <xTaskResumeAll+0x1a0>
    12ae:	80 e0       	ldi	r24, 0x00	; 0
    12b0:	01 c0       	rjmp	.+2      	; 0x12b4 <xTaskResumeAll+0x1a0>
    12b2:	80 e0       	ldi	r24, 0x00	; 0
    12b4:	0f 90       	pop	r0
    12b6:	0f be       	out	0x3f, r0	; 63
    12b8:	df 91       	pop	r29
    12ba:	cf 91       	pop	r28
    12bc:	08 95       	ret

000012be <vTaskSwitchContext>:
    12be:	80 91 60 06 	lds	r24, 0x0660	; 0x800660 <uxSchedulerSuspended>
    12c2:	88 23       	and	r24, r24
    12c4:	21 f0       	breq	.+8      	; 0x12ce <vTaskSwitchContext+0x10>
    12c6:	81 e0       	ldi	r24, 0x01	; 1
    12c8:	80 93 67 06 	sts	0x0667, r24	; 0x800667 <xYieldPending>
    12cc:	08 95       	ret
    12ce:	10 92 67 06 	sts	0x0667, r1	; 0x800667 <xYieldPending>
    12d2:	20 91 6b 06 	lds	r18, 0x066B	; 0x80066b <uxTopReadyPriority>
    12d6:	01 c0       	rjmp	.+2      	; 0x12da <vTaskSwitchContext+0x1c>
    12d8:	21 50       	subi	r18, 0x01	; 1
    12da:	82 2f       	mov	r24, r18
    12dc:	90 e0       	ldi	r25, 0x00	; 0
    12de:	fc 01       	movw	r30, r24
    12e0:	ee 0f       	add	r30, r30
    12e2:	ff 1f       	adc	r31, r31
    12e4:	ee 0f       	add	r30, r30
    12e6:	ff 1f       	adc	r31, r31
    12e8:	ee 0f       	add	r30, r30
    12ea:	ff 1f       	adc	r31, r31
    12ec:	e8 0f       	add	r30, r24
    12ee:	f9 1f       	adc	r31, r25
    12f0:	e8 56       	subi	r30, 0x68	; 104
    12f2:	f9 4f       	sbci	r31, 0xF9	; 249
    12f4:	30 81       	ld	r19, Z
    12f6:	33 23       	and	r19, r19
    12f8:	79 f3       	breq	.-34     	; 0x12d8 <vTaskSwitchContext+0x1a>
    12fa:	ac 01       	movw	r20, r24
    12fc:	44 0f       	add	r20, r20
    12fe:	55 1f       	adc	r21, r21
    1300:	44 0f       	add	r20, r20
    1302:	55 1f       	adc	r21, r21
    1304:	44 0f       	add	r20, r20
    1306:	55 1f       	adc	r21, r21
    1308:	48 0f       	add	r20, r24
    130a:	59 1f       	adc	r21, r25
    130c:	df 01       	movw	r26, r30
    130e:	01 80       	ldd	r0, Z+1	; 0x01
    1310:	f2 81       	ldd	r31, Z+2	; 0x02
    1312:	e0 2d       	mov	r30, r0
    1314:	02 80       	ldd	r0, Z+2	; 0x02
    1316:	f3 81       	ldd	r31, Z+3	; 0x03
    1318:	e0 2d       	mov	r30, r0
    131a:	12 96       	adiw	r26, 0x02	; 2
    131c:	fc 93       	st	X, r31
    131e:	ee 93       	st	-X, r30
    1320:	11 97       	sbiw	r26, 0x01	; 1
    1322:	45 56       	subi	r20, 0x65	; 101
    1324:	59 4f       	sbci	r21, 0xF9	; 249
    1326:	e4 17       	cp	r30, r20
    1328:	f5 07       	cpc	r31, r21
    132a:	29 f4       	brne	.+10     	; 0x1336 <vTaskSwitchContext+0x78>
    132c:	42 81       	ldd	r20, Z+2	; 0x02
    132e:	53 81       	ldd	r21, Z+3	; 0x03
    1330:	fd 01       	movw	r30, r26
    1332:	52 83       	std	Z+2, r21	; 0x02
    1334:	41 83       	std	Z+1, r20	; 0x01
    1336:	fc 01       	movw	r30, r24
    1338:	ee 0f       	add	r30, r30
    133a:	ff 1f       	adc	r31, r31
    133c:	ee 0f       	add	r30, r30
    133e:	ff 1f       	adc	r31, r31
    1340:	ee 0f       	add	r30, r30
    1342:	ff 1f       	adc	r31, r31
    1344:	8e 0f       	add	r24, r30
    1346:	9f 1f       	adc	r25, r31
    1348:	fc 01       	movw	r30, r24
    134a:	e8 56       	subi	r30, 0x68	; 104
    134c:	f9 4f       	sbci	r31, 0xF9	; 249
    134e:	01 80       	ldd	r0, Z+1	; 0x01
    1350:	f2 81       	ldd	r31, Z+2	; 0x02
    1352:	e0 2d       	mov	r30, r0
    1354:	86 81       	ldd	r24, Z+6	; 0x06
    1356:	97 81       	ldd	r25, Z+7	; 0x07
    1358:	90 93 bd 06 	sts	0x06BD, r25	; 0x8006bd <pxCurrentTCB+0x1>
    135c:	80 93 bc 06 	sts	0x06BC, r24	; 0x8006bc <pxCurrentTCB>
    1360:	20 93 6b 06 	sts	0x066B, r18	; 0x80066b <uxTopReadyPriority>
    1364:	08 95       	ret

00001366 <vTaskPlaceOnEventList>:
    1366:	cf 93       	push	r28
    1368:	df 93       	push	r29
    136a:	eb 01       	movw	r28, r22
    136c:	60 91 bc 06 	lds	r22, 0x06BC	; 0x8006bc <pxCurrentTCB>
    1370:	70 91 bd 06 	lds	r23, 0x06BD	; 0x8006bd <pxCurrentTCB+0x1>
    1374:	64 5f       	subi	r22, 0xF4	; 244
    1376:	7f 4f       	sbci	r23, 0xFF	; 255
    1378:	0e 94 96 00 	call	0x12c	; 0x12c <vListInsert>
    137c:	61 e0       	ldi	r22, 0x01	; 1
    137e:	ce 01       	movw	r24, r28
    1380:	0e 94 a1 06 	call	0xd42	; 0xd42 <prvAddCurrentTaskToDelayedList>
    1384:	df 91       	pop	r29
    1386:	cf 91       	pop	r28
    1388:	08 95       	ret

0000138a <xTaskRemoveFromEventList>:
    138a:	cf 93       	push	r28
    138c:	df 93       	push	r29
    138e:	dc 01       	movw	r26, r24
    1390:	15 96       	adiw	r26, 0x05	; 5
    1392:	ed 91       	ld	r30, X+
    1394:	fc 91       	ld	r31, X
    1396:	16 97       	sbiw	r26, 0x06	; 6
    1398:	06 80       	ldd	r0, Z+6	; 0x06
    139a:	f7 81       	ldd	r31, Z+7	; 0x07
    139c:	e0 2d       	mov	r30, r0
    139e:	a4 89       	ldd	r26, Z+20	; 0x14
    13a0:	b5 89       	ldd	r27, Z+21	; 0x15
    13a2:	c6 85       	ldd	r28, Z+14	; 0x0e
    13a4:	d7 85       	ldd	r29, Z+15	; 0x0f
    13a6:	80 89       	ldd	r24, Z+16	; 0x10
    13a8:	91 89       	ldd	r25, Z+17	; 0x11
    13aa:	9d 83       	std	Y+5, r25	; 0x05
    13ac:	8c 83       	std	Y+4, r24	; 0x04
    13ae:	c0 89       	ldd	r28, Z+16	; 0x10
    13b0:	d1 89       	ldd	r29, Z+17	; 0x11
    13b2:	86 85       	ldd	r24, Z+14	; 0x0e
    13b4:	97 85       	ldd	r25, Z+15	; 0x0f
    13b6:	9b 83       	std	Y+3, r25	; 0x03
    13b8:	8a 83       	std	Y+2, r24	; 0x02
    13ba:	11 96       	adiw	r26, 0x01	; 1
    13bc:	8d 91       	ld	r24, X+
    13be:	9c 91       	ld	r25, X
    13c0:	12 97       	sbiw	r26, 0x02	; 2
    13c2:	9f 01       	movw	r18, r30
    13c4:	24 5f       	subi	r18, 0xF4	; 244
    13c6:	3f 4f       	sbci	r19, 0xFF	; 255
    13c8:	82 17       	cp	r24, r18
    13ca:	93 07       	cpc	r25, r19
    13cc:	31 f4       	brne	.+12     	; 0x13da <xTaskRemoveFromEventList+0x50>
    13ce:	80 89       	ldd	r24, Z+16	; 0x10
    13d0:	91 89       	ldd	r25, Z+17	; 0x11
    13d2:	12 96       	adiw	r26, 0x02	; 2
    13d4:	9c 93       	st	X, r25
    13d6:	8e 93       	st	-X, r24
    13d8:	11 97       	sbiw	r26, 0x01	; 1
    13da:	15 8a       	std	Z+21, r1	; 0x15
    13dc:	14 8a       	std	Z+20, r1	; 0x14
    13de:	8c 91       	ld	r24, X
    13e0:	81 50       	subi	r24, 0x01	; 1
    13e2:	8c 93       	st	X, r24
    13e4:	80 91 60 06 	lds	r24, 0x0660	; 0x800660 <uxSchedulerSuspended>
    13e8:	81 11       	cpse	r24, r1
    13ea:	60 c0       	rjmp	.+192    	; 0x14ac <xTaskRemoveFromEventList+0x122>
    13ec:	a2 85       	ldd	r26, Z+10	; 0x0a
    13ee:	b3 85       	ldd	r27, Z+11	; 0x0b
    13f0:	c4 81       	ldd	r28, Z+4	; 0x04
    13f2:	d5 81       	ldd	r29, Z+5	; 0x05
    13f4:	86 81       	ldd	r24, Z+6	; 0x06
    13f6:	97 81       	ldd	r25, Z+7	; 0x07
    13f8:	9d 83       	std	Y+5, r25	; 0x05
    13fa:	8c 83       	std	Y+4, r24	; 0x04
    13fc:	c6 81       	ldd	r28, Z+6	; 0x06
    13fe:	d7 81       	ldd	r29, Z+7	; 0x07
    1400:	84 81       	ldd	r24, Z+4	; 0x04
    1402:	95 81       	ldd	r25, Z+5	; 0x05
    1404:	9b 83       	std	Y+3, r25	; 0x03
    1406:	8a 83       	std	Y+2, r24	; 0x02
    1408:	11 96       	adiw	r26, 0x01	; 1
    140a:	8d 91       	ld	r24, X+
    140c:	9c 91       	ld	r25, X
    140e:	12 97       	sbiw	r26, 0x02	; 2
    1410:	9f 01       	movw	r18, r30
    1412:	2e 5f       	subi	r18, 0xFE	; 254
    1414:	3f 4f       	sbci	r19, 0xFF	; 255
    1416:	82 17       	cp	r24, r18
    1418:	93 07       	cpc	r25, r19
    141a:	31 f4       	brne	.+12     	; 0x1428 <xTaskRemoveFromEventList+0x9e>
    141c:	86 81       	ldd	r24, Z+6	; 0x06
    141e:	97 81       	ldd	r25, Z+7	; 0x07
    1420:	12 96       	adiw	r26, 0x02	; 2
    1422:	9c 93       	st	X, r25
    1424:	8e 93       	st	-X, r24
    1426:	11 97       	sbiw	r26, 0x01	; 1
    1428:	13 86       	std	Z+11, r1	; 0x0b
    142a:	12 86       	std	Z+10, r1	; 0x0a
    142c:	8c 91       	ld	r24, X
    142e:	81 50       	subi	r24, 0x01	; 1
    1430:	8c 93       	st	X, r24
    1432:	86 89       	ldd	r24, Z+22	; 0x16
    1434:	90 91 6b 06 	lds	r25, 0x066B	; 0x80066b <uxTopReadyPriority>
    1438:	98 17       	cp	r25, r24
    143a:	10 f4       	brcc	.+4      	; 0x1440 <xTaskRemoveFromEventList+0xb6>
    143c:	80 93 6b 06 	sts	0x066B, r24	; 0x80066b <uxTopReadyPriority>
    1440:	90 e0       	ldi	r25, 0x00	; 0
    1442:	dc 01       	movw	r26, r24
    1444:	aa 0f       	add	r26, r26
    1446:	bb 1f       	adc	r27, r27
    1448:	aa 0f       	add	r26, r26
    144a:	bb 1f       	adc	r27, r27
    144c:	aa 0f       	add	r26, r26
    144e:	bb 1f       	adc	r27, r27
    1450:	8a 0f       	add	r24, r26
    1452:	9b 1f       	adc	r25, r27
    1454:	dc 01       	movw	r26, r24
    1456:	a8 56       	subi	r26, 0x68	; 104
    1458:	b9 4f       	sbci	r27, 0xF9	; 249
    145a:	11 96       	adiw	r26, 0x01	; 1
    145c:	0d 90       	ld	r0, X+
    145e:	bc 91       	ld	r27, X
    1460:	a0 2d       	mov	r26, r0
    1462:	b5 83       	std	Z+5, r27	; 0x05
    1464:	a4 83       	std	Z+4, r26	; 0x04
    1466:	14 96       	adiw	r26, 0x04	; 4
    1468:	8d 91       	ld	r24, X+
    146a:	9c 91       	ld	r25, X
    146c:	15 97       	sbiw	r26, 0x05	; 5
    146e:	97 83       	std	Z+7, r25	; 0x07
    1470:	86 83       	std	Z+6, r24	; 0x06
    1472:	14 96       	adiw	r26, 0x04	; 4
    1474:	cd 91       	ld	r28, X+
    1476:	dc 91       	ld	r29, X
    1478:	15 97       	sbiw	r26, 0x05	; 5
    147a:	3b 83       	std	Y+3, r19	; 0x03
    147c:	2a 83       	std	Y+2, r18	; 0x02
    147e:	15 96       	adiw	r26, 0x05	; 5
    1480:	3c 93       	st	X, r19
    1482:	2e 93       	st	-X, r18
    1484:	14 97       	sbiw	r26, 0x04	; 4
    1486:	a6 89       	ldd	r26, Z+22	; 0x16
    1488:	b0 e0       	ldi	r27, 0x00	; 0
    148a:	cd 01       	movw	r24, r26
    148c:	88 0f       	add	r24, r24
    148e:	99 1f       	adc	r25, r25
    1490:	88 0f       	add	r24, r24
    1492:	99 1f       	adc	r25, r25
    1494:	88 0f       	add	r24, r24
    1496:	99 1f       	adc	r25, r25
    1498:	a8 0f       	add	r26, r24
    149a:	b9 1f       	adc	r27, r25
    149c:	a8 56       	subi	r26, 0x68	; 104
    149e:	b9 4f       	sbci	r27, 0xF9	; 249
    14a0:	b3 87       	std	Z+11, r27	; 0x0b
    14a2:	a2 87       	std	Z+10, r26	; 0x0a
    14a4:	8c 91       	ld	r24, X
    14a6:	8f 5f       	subi	r24, 0xFF	; 255
    14a8:	8c 93       	st	X, r24
    14aa:	1c c0       	rjmp	.+56     	; 0x14e4 <xTaskRemoveFromEventList+0x15a>
    14ac:	49 e7       	ldi	r20, 0x79	; 121
    14ae:	56 e0       	ldi	r21, 0x06	; 6
    14b0:	da 01       	movw	r26, r20
    14b2:	11 96       	adiw	r26, 0x01	; 1
    14b4:	cd 91       	ld	r28, X+
    14b6:	dc 91       	ld	r29, X
    14b8:	12 97       	sbiw	r26, 0x02	; 2
    14ba:	d7 87       	std	Z+15, r29	; 0x0f
    14bc:	c6 87       	std	Z+14, r28	; 0x0e
    14be:	8c 81       	ldd	r24, Y+4	; 0x04
    14c0:	9d 81       	ldd	r25, Y+5	; 0x05
    14c2:	91 8b       	std	Z+17, r25	; 0x11
    14c4:	80 8b       	std	Z+16, r24	; 0x10
    14c6:	8c 81       	ldd	r24, Y+4	; 0x04
    14c8:	9d 81       	ldd	r25, Y+5	; 0x05
    14ca:	dc 01       	movw	r26, r24
    14cc:	13 96       	adiw	r26, 0x03	; 3
    14ce:	3c 93       	st	X, r19
    14d0:	2e 93       	st	-X, r18
    14d2:	12 97       	sbiw	r26, 0x02	; 2
    14d4:	3d 83       	std	Y+5, r19	; 0x05
    14d6:	2c 83       	std	Y+4, r18	; 0x04
    14d8:	55 8b       	std	Z+21, r21	; 0x15
    14da:	44 8b       	std	Z+20, r20	; 0x14
    14dc:	da 01       	movw	r26, r20
    14de:	8c 91       	ld	r24, X
    14e0:	8f 5f       	subi	r24, 0xFF	; 255
    14e2:	8c 93       	st	X, r24
    14e4:	96 89       	ldd	r25, Z+22	; 0x16
    14e6:	e0 91 bc 06 	lds	r30, 0x06BC	; 0x8006bc <pxCurrentTCB>
    14ea:	f0 91 bd 06 	lds	r31, 0x06BD	; 0x8006bd <pxCurrentTCB+0x1>
    14ee:	86 89       	ldd	r24, Z+22	; 0x16
    14f0:	89 17       	cp	r24, r25
    14f2:	20 f4       	brcc	.+8      	; 0x14fc <xTaskRemoveFromEventList+0x172>
    14f4:	81 e0       	ldi	r24, 0x01	; 1
    14f6:	80 93 67 06 	sts	0x0667, r24	; 0x800667 <xYieldPending>
    14fa:	01 c0       	rjmp	.+2      	; 0x14fe <xTaskRemoveFromEventList+0x174>
    14fc:	80 e0       	ldi	r24, 0x00	; 0
    14fe:	df 91       	pop	r29
    1500:	cf 91       	pop	r28
    1502:	08 95       	ret

00001504 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
    1504:	20 91 66 06 	lds	r18, 0x0666	; 0x800666 <xNumOfOverflows>
    1508:	fc 01       	movw	r30, r24
    150a:	20 83       	st	Z, r18
    pxTimeOut->xTimeOnEntering = xTickCount;
    150c:	20 91 6c 06 	lds	r18, 0x066C	; 0x80066c <xTickCount>
    1510:	30 91 6d 06 	lds	r19, 0x066D	; 0x80066d <xTickCount+0x1>
    1514:	32 83       	std	Z+2, r19	; 0x02
    1516:	21 83       	std	Z+1, r18	; 0x01
    1518:	08 95       	ret

0000151a <xTaskCheckForTimeOut>:
}
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
    151a:	cf 93       	push	r28
    151c:	df 93       	push	r29
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
    configASSERT( pxTicksToWait );

    taskENTER_CRITICAL();
    151e:	0f b6       	in	r0, 0x3f	; 63
    1520:	f8 94       	cli
    1522:	0f 92       	push	r0
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
    1524:	40 91 6c 06 	lds	r20, 0x066C	; 0x80066c <xTickCount>
    1528:	50 91 6d 06 	lds	r21, 0x066D	; 0x80066d <xTickCount+0x1>
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
    152c:	ec 01       	movw	r28, r24
    152e:	29 81       	ldd	r18, Y+1	; 0x01
    1530:	3a 81       	ldd	r19, Y+2	; 0x02
    1532:	da 01       	movw	r26, r20
    1534:	a2 1b       	sub	r26, r18
    1536:	b3 0b       	sbc	r27, r19
                xReturn = pdFALSE;
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
    1538:	f8 81       	ld	r31, Y
    153a:	e0 91 66 06 	lds	r30, 0x0666	; 0x800666 <xNumOfOverflows>
    153e:	fe 17       	cp	r31, r30
    1540:	41 f0       	breq	.+16     	; 0x1552 <xTaskCheckForTimeOut+0x38>
    1542:	42 17       	cp	r20, r18
    1544:	53 07       	cpc	r21, r19
    1546:	28 f0       	brcs	.+10     	; 0x1552 <xTaskCheckForTimeOut+0x38>
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
            *pxTicksToWait = ( TickType_t ) 0;
    1548:	fb 01       	movw	r30, r22
    154a:	11 82       	std	Z+1, r1	; 0x01
    154c:	10 82       	st	Z, r1
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
    154e:	81 e0       	ldi	r24, 0x01	; 1
            *pxTicksToWait = ( TickType_t ) 0;
    1550:	11 c0       	rjmp	.+34     	; 0x1574 <xTaskCheckForTimeOut+0x5a>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
    1552:	eb 01       	movw	r28, r22
    1554:	28 81       	ld	r18, Y
    1556:	39 81       	ldd	r19, Y+1	; 0x01
    1558:	a2 17       	cp	r26, r18
    155a:	b3 07       	cpc	r27, r19
    155c:	40 f4       	brcc	.+16     	; 0x156e <xTaskCheckForTimeOut+0x54>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
    155e:	2a 1b       	sub	r18, r26
    1560:	3b 0b       	sbc	r19, r27
    1562:	39 83       	std	Y+1, r19	; 0x01
    1564:	28 83       	st	Y, r18
            vTaskInternalSetTimeOutState( pxTimeOut );
    1566:	0e 94 82 0a 	call	0x1504	; 0x1504 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
    156a:	80 e0       	ldi	r24, 0x00	; 0
    156c:	03 c0       	rjmp	.+6      	; 0x1574 <xTaskCheckForTimeOut+0x5a>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
    156e:	19 82       	std	Y+1, r1	; 0x01
    1570:	18 82       	st	Y, r1
            xReturn = pdTRUE;
    1572:	81 e0       	ldi	r24, 0x01	; 1
        }
    }
    taskEXIT_CRITICAL();
    1574:	0f 90       	pop	r0
    1576:	0f be       	out	0x3f, r0	; 63

    return xReturn;
}
    1578:	df 91       	pop	r29
    157a:	cf 91       	pop	r28
    157c:	08 95       	ret

0000157e <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
    xYieldPending = pdTRUE;
    157e:	81 e0       	ldi	r24, 0x01	; 1
    1580:	80 93 67 06 	sts	0x0667, r24	; 0x800667 <xYieldPending>
    1584:	08 95       	ret

00001586 <UART_INT>:
 */ 
#include "UART.h"
void UART_INT(void){
	
	
	UCSRB = (1<<RXEN)|(1<<TXEN);
    1586:	88 e1       	ldi	r24, 0x18	; 24
    1588:	8a b9       	out	0x0a, r24	; 10
	UCSRC =(1<<URSEL)|(1<<UCSZ0)|(1<<UCSZ1);
    158a:	86 e8       	ldi	r24, 0x86	; 134
    158c:	80 bd       	out	0x20, r24	; 32
	UBRRL=UBRR_VALUE;
    158e:	87 e6       	ldi	r24, 0x67	; 103
    1590:	89 b9       	out	0x09, r24	; 9
	UBRRH=UBRR_VALUE>>8;
    1592:	10 bc       	out	0x20, r1	; 32
    1594:	08 95       	ret

00001596 <UART_SENDCHAR>:
}
void UART_SENDCHAR(char data){
	
	while(!(UCSRA & (1<<UDRE)));
    1596:	5d 9b       	sbis	0x0b, 5	; 11
    1598:	fe cf       	rjmp	.-4      	; 0x1596 <UART_SENDCHAR>
	UDR = data;
    159a:	8c b9       	out	0x0c, r24	; 12
    159c:	08 95       	ret

0000159e <__udivmodhi4>:
    159e:	aa 1b       	sub	r26, r26
    15a0:	bb 1b       	sub	r27, r27
    15a2:	51 e1       	ldi	r21, 0x11	; 17
    15a4:	07 c0       	rjmp	.+14     	; 0x15b4 <__udivmodhi4_ep>

000015a6 <__udivmodhi4_loop>:
    15a6:	aa 1f       	adc	r26, r26
    15a8:	bb 1f       	adc	r27, r27
    15aa:	a6 17       	cp	r26, r22
    15ac:	b7 07       	cpc	r27, r23
    15ae:	10 f0       	brcs	.+4      	; 0x15b4 <__udivmodhi4_ep>
    15b0:	a6 1b       	sub	r26, r22
    15b2:	b7 0b       	sbc	r27, r23

000015b4 <__udivmodhi4_ep>:
    15b4:	88 1f       	adc	r24, r24
    15b6:	99 1f       	adc	r25, r25
    15b8:	5a 95       	dec	r21
    15ba:	a9 f7       	brne	.-22     	; 0x15a6 <__udivmodhi4_loop>
    15bc:	80 95       	com	r24
    15be:	90 95       	com	r25
    15c0:	bc 01       	movw	r22, r24
    15c2:	cd 01       	movw	r24, r26
    15c4:	08 95       	ret

000015c6 <memcpy>:
    15c6:	fb 01       	movw	r30, r22
    15c8:	dc 01       	movw	r26, r24
    15ca:	02 c0       	rjmp	.+4      	; 0x15d0 <memcpy+0xa>
    15cc:	01 90       	ld	r0, Z+
    15ce:	0d 92       	st	X+, r0
    15d0:	41 50       	subi	r20, 0x01	; 1
    15d2:	50 40       	sbci	r21, 0x00	; 0
    15d4:	d8 f7       	brcc	.-10     	; 0x15cc <memcpy+0x6>
    15d6:	08 95       	ret

000015d8 <_exit>:
    15d8:	f8 94       	cli

000015da <__stop_program>:
    15da:	ff cf       	rjmp	.-2      	; 0x15da <__stop_program>
