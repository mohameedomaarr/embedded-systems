
SPI_Slave.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000de  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000132  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000132  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000164  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  000001a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000005f2  00000000  00000000  000001d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000562  00000000  00000000  000007c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000247  00000000  00000000  00000d24  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  00000f6c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002f6  00000000  00000000  00000fb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000059  00000000  00000000  000012a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  000012ff  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 5d 00 	call	0xba	; 0xba <main>
  64:	0c 94 6d 00 	jmp	0xda	; 0xda <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <SPI_INT>:
		}
	}
}

void SPI_INT(char control){
	switch(control){
  6c:	8d 34       	cpi	r24, 0x4D	; 77
  6e:	19 f0       	breq	.+6      	; 0x76 <SPI_INT+0xa>
  70:	83 35       	cpi	r24, 0x53	; 83
  72:	71 f0       	breq	.+28     	; 0x90 <SPI_INT+0x24>
  74:	19 c0       	rjmp	.+50     	; 0xa8 <SPI_INT+0x3c>
		case 'M':
		set_bit(SPI_DIR,SS);
  76:	87 b3       	in	r24, 0x17	; 23
  78:	80 61       	ori	r24, 0x10	; 16
  7a:	87 bb       	out	0x17, r24	; 23
		set_bit(SPI_DIR,MOSI);
  7c:	87 b3       	in	r24, 0x17	; 23
  7e:	80 62       	ori	r24, 0x20	; 32
  80:	87 bb       	out	0x17, r24	; 23
		set_bit(SPI_DIR,CLK);
  82:	87 b3       	in	r24, 0x17	; 23
  84:	80 68       	ori	r24, 0x80	; 128
  86:	87 bb       	out	0x17, r24	; 23
		reset_bit(SPI_DIR,MISO);
  88:	87 b3       	in	r24, 0x17	; 23
  8a:	8f 7b       	andi	r24, 0xBF	; 191
  8c:	87 bb       	out	0x17, r24	; 23
		break;
  8e:	0c c0       	rjmp	.+24     	; 0xa8 <SPI_INT+0x3c>
		case'S':
		reset_bit(SPI_DIR,SS);
  90:	87 b3       	in	r24, 0x17	; 23
  92:	8f 7e       	andi	r24, 0xEF	; 239
  94:	87 bb       	out	0x17, r24	; 23
		reset_bit(SPI_DIR,MOSI);
  96:	87 b3       	in	r24, 0x17	; 23
  98:	8f 7d       	andi	r24, 0xDF	; 223
  9a:	87 bb       	out	0x17, r24	; 23
		reset_bit(SPI_DIR,CLK);
  9c:	87 b3       	in	r24, 0x17	; 23
  9e:	8f 77       	andi	r24, 0x7F	; 127
  a0:	87 bb       	out	0x17, r24	; 23
		set_bit(SPI_DIR,MISO);
  a2:	87 b3       	in	r24, 0x17	; 23
  a4:	80 64       	ori	r24, 0x40	; 64
  a6:	87 bb       	out	0x17, r24	; 23
		break;
	}
	SPCR |= (1<<SPE);
  a8:	8d b1       	in	r24, 0x0d	; 13
  aa:	80 64       	ori	r24, 0x40	; 64
  ac:	8d b9       	out	0x0d, r24	; 13
  ae:	08 95       	ret

000000b0 <SPI_TX_RX>:
	//set_bit(SPCR,SPE);
	
}
char SPI_TX_RX(char data){
	SPDR = data;
  b0:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR &(1<<SPIF)));
  b2:	77 9b       	sbis	0x0e, 7	; 14
  b4:	fe cf       	rjmp	.-4      	; 0xb2 <SPI_TX_RX+0x2>
	return SPDR;
  b6:	8f b1       	in	r24, 0x0f	; 15
  b8:	08 95       	ret

000000ba <main>:
char SPI_TX_RX(char data);


int main(void)
{
	DDRC |=(1<<1);
  ba:	84 b3       	in	r24, 0x14	; 20
  bc:	82 60       	ori	r24, 0x02	; 2
  be:	84 bb       	out	0x14, r24	; 20
	SPI_INT('S');
  c0:	83 e5       	ldi	r24, 0x53	; 83
  c2:	0e 94 36 00 	call	0x6c	; 0x6c <SPI_INT>
	
	while (1)
	{
		if (SPI_TX_RX(0x55)=='2')
  c6:	85 e5       	ldi	r24, 0x55	; 85
  c8:	0e 94 58 00 	call	0xb0	; 0xb0 <SPI_TX_RX>
  cc:	82 33       	cpi	r24, 0x32	; 50
  ce:	d9 f7       	brne	.-10     	; 0xc6 <main+0xc>
		{
			PORTC ^=(1<<1);
  d0:	95 b3       	in	r25, 0x15	; 21
  d2:	82 e0       	ldi	r24, 0x02	; 2
  d4:	89 27       	eor	r24, r25
  d6:	85 bb       	out	0x15, r24	; 21
  d8:	f6 cf       	rjmp	.-20     	; 0xc6 <main+0xc>

000000da <_exit>:
  da:	f8 94       	cli

000000dc <__stop_program>:
  dc:	ff cf       	rjmp	.-2      	; 0xdc <__stop_program>
