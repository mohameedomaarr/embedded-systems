
DC_motor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000ba  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000010e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000010e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000140  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  0000017c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000056e  00000000  00000000  0000019c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000004f9  00000000  00000000  0000070a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000001ff  00000000  00000000  00000c03  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00000e04  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002d5  00000000  00000000  00000e28  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000010  00000000  00000000  000010fd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include <avr/interrupt.h>


int main(void)
{
	DDRC |= (1<<3)|(1<<4)|(1<<0)|(1<<1);
  6c:	84 b3       	in	r24, 0x14	; 20
  6e:	8b 61       	ori	r24, 0x1B	; 27
  70:	84 bb       	out	0x14, r24	; 20
	DDRD |= (1<<4)|(1<<5);
  72:	81 b3       	in	r24, 0x11	; 17
  74:	80 63       	ori	r24, 0x30	; 48
  76:	81 bb       	out	0x11, r24	; 17
	TCCR1A |= (1<<COM1A1)|(1<<COM1B1);
  78:	8f b5       	in	r24, 0x2f	; 47
  7a:	80 6a       	ori	r24, 0xA0	; 160
  7c:	8f bd       	out	0x2f, r24	; 47
	TCCR1A |= (1<<WGM10);
  7e:	8f b5       	in	r24, 0x2f	; 47
  80:	81 60       	ori	r24, 0x01	; 1
  82:	8f bd       	out	0x2f, r24	; 47
	TCCR1B |= (1<<WGM12);
  84:	8e b5       	in	r24, 0x2e	; 46
  86:	88 60       	ori	r24, 0x08	; 8
  88:	8e bd       	out	0x2e, r24	; 46
	TCCR1B |= (1<<CS10)|(1<<CS11);
  8a:	8e b5       	in	r24, 0x2e	; 46
  8c:	83 60       	ori	r24, 0x03	; 3
  8e:	8e bd       	out	0x2e, r24	; 46
	PORTC |= (1<<3);
  90:	85 b3       	in	r24, 0x15	; 21
  92:	88 60       	ori	r24, 0x08	; 8
  94:	85 bb       	out	0x15, r24	; 21
	OCR1AL = 150;
  96:	86 e9       	ldi	r24, 0x96	; 150
  98:	8a bd       	out	0x2a, r24	; 42
	OCR1BL =150;
  9a:	88 bd       	out	0x28, r24	; 40
//rotation direction clockwise
	//PORTC &=~(1<<4);
	//PORTC |=(1<<3);
//rotation counter clockwise
	PORTC |=(1<<4);
  9c:	85 b3       	in	r24, 0x15	; 21
  9e:	80 61       	ori	r24, 0x10	; 16
  a0:	85 bb       	out	0x15, r24	; 21
	PORTC &=~(1<<3); 
  a2:	85 b3       	in	r24, 0x15	; 21
  a4:	87 7f       	andi	r24, 0xF7	; 247
  a6:	85 bb       	out	0x15, r24	; 21
    /* Replace with your application code */
	//rotation direction
	PORTC |=(1<<0);
  a8:	85 b3       	in	r24, 0x15	; 21
  aa:	81 60       	ori	r24, 0x01	; 1
  ac:	85 bb       	out	0x15, r24	; 21
	PORTC &=~(1<<1);
  ae:	85 b3       	in	r24, 0x15	; 21
  b0:	8d 7f       	andi	r24, 0xFD	; 253
  b2:	85 bb       	out	0x15, r24	; 21
  b4:	ff cf       	rjmp	.-2      	; 0xb4 <main+0x48>

000000b6 <_exit>:
  b6:	f8 94       	cli

000000b8 <__stop_program>:
  b8:	ff cf       	rjmp	.-2      	; 0xb8 <__stop_program>
