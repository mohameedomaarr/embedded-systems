
stepper_motor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000126  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000017a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000017a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001ac  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  000001e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000712  00000000  00000000  00000210  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005c9  00000000  00000000  00000922  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002da  00000000  00000000  00000eeb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  000011c8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000340  00000000  00000000  000011fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000144  00000000  00000000  0000153c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00001680  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 5d 00 	call	0xba	; 0xba <main>
  64:	0c 94 91 00 	jmp	0x122	; 0x122 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <stepper_control>:
#define F_CPU 16000000UL
#include <avr/io.h>
#include <util/delay.h>

void stepper_control(unsigned char angle){
	switch(angle){
  6c:	82 30       	cpi	r24, 0x02	; 2
  6e:	81 f0       	breq	.+32     	; 0x90 <stepper_control+0x24>
  70:	18 f4       	brcc	.+6      	; 0x78 <stepper_control+0xc>
  72:	81 30       	cpi	r24, 0x01	; 1
  74:	31 f0       	breq	.+12     	; 0x82 <stepper_control+0x16>
  76:	08 95       	ret
  78:	83 30       	cpi	r24, 0x03	; 3
  7a:	89 f0       	breq	.+34     	; 0x9e <stepper_control+0x32>
  7c:	84 30       	cpi	r24, 0x04	; 4
  7e:	b1 f0       	breq	.+44     	; 0xac <stepper_control+0x40>
  80:	08 95       	ret
		case 1:
		PORTD |= (1<<0)|(1<<1);
  82:	82 b3       	in	r24, 0x12	; 18
  84:	83 60       	ori	r24, 0x03	; 3
  86:	82 bb       	out	0x12, r24	; 18
		PORTD &=~ (1<<2)|(1<<3);
  88:	82 b3       	in	r24, 0x12	; 18
  8a:	8b 7f       	andi	r24, 0xFB	; 251
  8c:	82 bb       	out	0x12, r24	; 18
		break;
  8e:	08 95       	ret
		case 2:
		PORTD |= (1<<1)|(1<<2);
  90:	82 b3       	in	r24, 0x12	; 18
  92:	86 60       	ori	r24, 0x06	; 6
  94:	82 bb       	out	0x12, r24	; 18
		PORTD &=~ (1<<0)|(1<<3);
  96:	82 b3       	in	r24, 0x12	; 18
  98:	8e 7f       	andi	r24, 0xFE	; 254
  9a:	82 bb       	out	0x12, r24	; 18
		break;
  9c:	08 95       	ret
		case 3:
		PORTD |= (1<<2)|(1<<3);
  9e:	82 b3       	in	r24, 0x12	; 18
  a0:	8c 60       	ori	r24, 0x0C	; 12
  a2:	82 bb       	out	0x12, r24	; 18
		PORTD &=~ (1<<1)|(1<<0);
  a4:	82 b3       	in	r24, 0x12	; 18
  a6:	8d 7f       	andi	r24, 0xFD	; 253
  a8:	82 bb       	out	0x12, r24	; 18
		break;
  aa:	08 95       	ret
		case 4:
		PORTD |= (1<<3)|(1<<0);
  ac:	82 b3       	in	r24, 0x12	; 18
  ae:	89 60       	ori	r24, 0x09	; 9
  b0:	82 bb       	out	0x12, r24	; 18
		PORTD &=~ (1<<2)|(1<<1);
  b2:	82 b3       	in	r24, 0x12	; 18
  b4:	8b 7f       	andi	r24, 0xFB	; 251
  b6:	82 bb       	out	0x12, r24	; 18
  b8:	08 95       	ret

000000ba <main>:
}


int main(void)
{
    DDRD |= (1<<0)|(1<<1)|(1<<2)|(1<<3);
  ba:	81 b3       	in	r24, 0x11	; 17
  bc:	8f 60       	ori	r24, 0x0F	; 15
  be:	81 bb       	out	0x11, r24	; 17
    while (1) 
    {
		stepper_control(1);
  c0:	81 e0       	ldi	r24, 0x01	; 1
  c2:	0e 94 36 00 	call	0x6c	; 0x6c <stepper_control>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c6:	2f ef       	ldi	r18, 0xFF	; 255
  c8:	87 ea       	ldi	r24, 0xA7	; 167
  ca:	91 e6       	ldi	r25, 0x61	; 97
  cc:	21 50       	subi	r18, 0x01	; 1
  ce:	80 40       	sbci	r24, 0x00	; 0
  d0:	90 40       	sbci	r25, 0x00	; 0
  d2:	e1 f7       	brne	.-8      	; 0xcc <main+0x12>
  d4:	00 c0       	rjmp	.+0      	; 0xd6 <main+0x1c>
  d6:	00 00       	nop
		_delay_ms(2000);
		stepper_control(2);
  d8:	82 e0       	ldi	r24, 0x02	; 2
  da:	0e 94 36 00 	call	0x6c	; 0x6c <stepper_control>
  de:	2f ef       	ldi	r18, 0xFF	; 255
  e0:	87 ea       	ldi	r24, 0xA7	; 167
  e2:	91 e6       	ldi	r25, 0x61	; 97
  e4:	21 50       	subi	r18, 0x01	; 1
  e6:	80 40       	sbci	r24, 0x00	; 0
  e8:	90 40       	sbci	r25, 0x00	; 0
  ea:	e1 f7       	brne	.-8      	; 0xe4 <main+0x2a>
  ec:	00 c0       	rjmp	.+0      	; 0xee <main+0x34>
  ee:	00 00       	nop
		_delay_ms(2000);
		stepper_control(3);
  f0:	83 e0       	ldi	r24, 0x03	; 3
  f2:	0e 94 36 00 	call	0x6c	; 0x6c <stepper_control>
  f6:	2f ef       	ldi	r18, 0xFF	; 255
  f8:	87 ea       	ldi	r24, 0xA7	; 167
  fa:	91 e6       	ldi	r25, 0x61	; 97
  fc:	21 50       	subi	r18, 0x01	; 1
  fe:	80 40       	sbci	r24, 0x00	; 0
 100:	90 40       	sbci	r25, 0x00	; 0
 102:	e1 f7       	brne	.-8      	; 0xfc <main+0x42>
 104:	00 c0       	rjmp	.+0      	; 0x106 <main+0x4c>
 106:	00 00       	nop
		_delay_ms(2000);
		stepper_control(4);
 108:	84 e0       	ldi	r24, 0x04	; 4
 10a:	0e 94 36 00 	call	0x6c	; 0x6c <stepper_control>
 10e:	2f ef       	ldi	r18, 0xFF	; 255
 110:	87 ea       	ldi	r24, 0xA7	; 167
 112:	91 e6       	ldi	r25, 0x61	; 97
 114:	21 50       	subi	r18, 0x01	; 1
 116:	80 40       	sbci	r24, 0x00	; 0
 118:	90 40       	sbci	r25, 0x00	; 0
 11a:	e1 f7       	brne	.-8      	; 0x114 <main+0x5a>
 11c:	00 c0       	rjmp	.+0      	; 0x11e <main+0x64>
 11e:	00 00       	nop
 120:	cf cf       	rjmp	.-98     	; 0xc0 <main+0x6>

00000122 <_exit>:
 122:	f8 94       	cli

00000124 <__stop_program>:
 124:	ff cf       	rjmp	.-2      	; 0x124 <__stop_program>
