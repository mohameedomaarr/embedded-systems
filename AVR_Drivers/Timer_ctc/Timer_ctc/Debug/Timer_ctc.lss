
Timer_ctc.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000010a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000017e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800060  00800060  0000017e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000017e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001b0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  000001ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000005b8  00000000  00000000  0000021c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000529  00000000  00000000  000007d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000219  00000000  00000000  00000cfd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000074  00000000  00000000  00000f18  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000030c  00000000  00000000  00000f8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000009f  00000000  00000000  00001298  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  00001337  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__vector_10>
  2c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__vector_11>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a2 36       	cpi	r26, 0x62	; 98
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 3e 00 	call	0x7c	; 0x7c <main>
  74:	0c 94 83 00 	jmp	0x106	; 0x106 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <main>:



int main(void)
{
	DDRC |= (1<<7)|(1<<2);
  7c:	84 b3       	in	r24, 0x14	; 20
  7e:	84 68       	ori	r24, 0x84	; 132
  80:	84 bb       	out	0x14, r24	; 20
	PORTC &=~ (1<<7);
  82:	85 b3       	in	r24, 0x15	; 21
  84:	8f 77       	andi	r24, 0x7F	; 127
  86:	85 bb       	out	0x15, r24	; 21
	
	TCCR0 |= (1<<CS00)|(1<<CS01)|(1<<WGM01);
  88:	83 b7       	in	r24, 0x33	; 51
  8a:	8b 60       	ori	r24, 0x0B	; 11
  8c:	83 bf       	out	0x33, r24	; 51
	//TCNT0 = 0x6F;
	TIMSK |= (1<<TOIE0)|(1<<OCIE0);
  8e:	89 b7       	in	r24, 0x39	; 57
  90:	83 60       	ori	r24, 0x03	; 3
  92:	89 bf       	out	0x39, r24	; 57
	sei();
  94:	78 94       	sei
	OCR0 = 143;
  96:	8f e8       	ldi	r24, 0x8F	; 143
  98:	8c bf       	out	0x3c, r24	; 60
  9a:	ff cf       	rjmp	.-2      	; 0x9a <main+0x1e>

0000009c <__vector_10>:
	{
	}
}


ISR(TIMER0_COMP_vect){
  9c:	1f 92       	push	r1
  9e:	0f 92       	push	r0
  a0:	0f b6       	in	r0, 0x3f	; 63
  a2:	0f 92       	push	r0
  a4:	11 24       	eor	r1, r1
  a6:	2f 93       	push	r18
  a8:	8f 93       	push	r24
  aa:	9f 93       	push	r25
	
	if (OVF_count==976)
  ac:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  b0:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  b4:	80 3d       	cpi	r24, 0xD0	; 208
  b6:	93 40       	sbci	r25, 0x03	; 3
  b8:	39 f4       	brne	.+14     	; 0xc8 <__vector_10+0x2c>
	{
		PORTC ^= (1<<7);
  ba:	85 b3       	in	r24, 0x15	; 21
  bc:	80 58       	subi	r24, 0x80	; 128
  be:	85 bb       	out	0x15, r24	; 21
		OVF_count=0;
  c0:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  c4:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
	}
	//_delay_ms(1000);
}
  c8:	9f 91       	pop	r25
  ca:	8f 91       	pop	r24
  cc:	2f 91       	pop	r18
  ce:	0f 90       	pop	r0
  d0:	0f be       	out	0x3f, r0	; 63
  d2:	0f 90       	pop	r0
  d4:	1f 90       	pop	r1
  d6:	18 95       	reti

000000d8 <__vector_11>:

ISR(TIMER0_OVF_vect){
  d8:	1f 92       	push	r1
  da:	0f 92       	push	r0
  dc:	0f b6       	in	r0, 0x3f	; 63
  de:	0f 92       	push	r0
  e0:	11 24       	eor	r1, r1
  e2:	8f 93       	push	r24
  e4:	9f 93       	push	r25
	OVF_count++;
  e6:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  ea:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  ee:	01 96       	adiw	r24, 0x01	; 1
  f0:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  f4:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	
	//PORTC ^=(1<<2);
}
  f8:	9f 91       	pop	r25
  fa:	8f 91       	pop	r24
  fc:	0f 90       	pop	r0
  fe:	0f be       	out	0x3f, r0	; 63
 100:	0f 90       	pop	r0
 102:	1f 90       	pop	r1
 104:	18 95       	reti

00000106 <_exit>:
 106:	f8 94       	cli

00000108 <__stop_program>:
 108:	ff cf       	rjmp	.-2      	; 0x108 <__stop_program>
