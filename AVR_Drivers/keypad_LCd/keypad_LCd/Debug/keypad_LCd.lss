
keypad_LCd.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000676  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000042  00800060  00000676  000006ea  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000072c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000075c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000e8  00000000  00000000  00000798  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000013df  00000000  00000000  00000880  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000089b  00000000  00000000  00001c5f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000009b8  00000000  00000000  000024fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000180  00000000  00000000  00002eb4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000006e4  00000000  00000000  00003034  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000a43  00000000  00000000  00003718  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000098  00000000  00000000  0000415b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 e7       	ldi	r30, 0x76	; 118
  68:	f6 e0       	ldi	r31, 0x06	; 6
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 3a       	cpi	r26, 0xA2	; 162
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 0a 03 	call	0x614	; 0x614 <main>
  7a:	0c 94 39 03 	jmp	0x672	; 0x672 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <DIO_Init>:

void DIO_Init(void){
	DIO_ChannelTypes DIO_channel;
	DIO_PortTypes PortX;
	uint8 count=0;
	for(count=DIO_ChannelA0;count<pin_count;count++)
  82:	80 e0       	ldi	r24, 0x00	; 0
  84:	a0 c0       	rjmp	.+320    	; 0x1c6 <DIO_Init+0x144>
	{
		PortX=count/8;
  86:	98 2f       	mov	r25, r24
  88:	96 95       	lsr	r25
  8a:	96 95       	lsr	r25
  8c:	96 95       	lsr	r25
		DIO_channel=count%8;
  8e:	28 2f       	mov	r18, r24
  90:	27 70       	andi	r18, 0x07	; 7
		switch(PortX){
  92:	91 30       	cpi	r25, 0x01	; 1
  94:	61 f1       	breq	.+88     	; 0xee <DIO_Init+0x6c>
  96:	38 f0       	brcs	.+14     	; 0xa6 <DIO_Init+0x24>
  98:	92 30       	cpi	r25, 0x02	; 2
  9a:	09 f4       	brne	.+2      	; 0x9e <DIO_Init+0x1c>
  9c:	4c c0       	rjmp	.+152    	; 0x136 <DIO_Init+0xb4>
  9e:	93 30       	cpi	r25, 0x03	; 3
  a0:	09 f4       	brne	.+2      	; 0xa4 <DIO_Init+0x22>
  a2:	6d c0       	rjmp	.+218    	; 0x17e <DIO_Init+0xfc>
  a4:	8f c0       	rjmp	.+286    	; 0x1c4 <DIO_Init+0x142>
			case DIO_PortA :
			if (PinCfg[count].PinDir == Output)
  a6:	e8 2f       	mov	r30, r24
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	ee 0f       	add	r30, r30
  ac:	ff 1f       	adc	r31, r31
  ae:	e0 5a       	subi	r30, 0xA0	; 160
  b0:	ff 4f       	sbci	r31, 0xFF	; 255
  b2:	90 81       	ld	r25, Z
  b4:	91 30       	cpi	r25, 0x01	; 1
  b6:	69 f4       	brne	.+26     	; 0xd2 <DIO_Init+0x50>
			{
				set_bit(DDRA_reg,DIO_channel);
  b8:	9a b3       	in	r25, 0x1a	; 26
  ba:	41 e0       	ldi	r20, 0x01	; 1
  bc:	50 e0       	ldi	r21, 0x00	; 0
  be:	ba 01       	movw	r22, r20
  c0:	02 c0       	rjmp	.+4      	; 0xc6 <DIO_Init+0x44>
  c2:	66 0f       	add	r22, r22
  c4:	77 1f       	adc	r23, r23
  c6:	2a 95       	dec	r18
  c8:	e2 f7       	brpl	.-8      	; 0xc2 <DIO_Init+0x40>
  ca:	9b 01       	movw	r18, r22
  cc:	29 2b       	or	r18, r25
  ce:	2a bb       	out	0x1a, r18	; 26
  d0:	79 c0       	rjmp	.+242    	; 0x1c4 <DIO_Init+0x142>
			}
			else{
				reset_bit(DDRA_reg,DIO_channel);
  d2:	9a b3       	in	r25, 0x1a	; 26
  d4:	41 e0       	ldi	r20, 0x01	; 1
  d6:	50 e0       	ldi	r21, 0x00	; 0
  d8:	ba 01       	movw	r22, r20
  da:	02 c0       	rjmp	.+4      	; 0xe0 <DIO_Init+0x5e>
  dc:	66 0f       	add	r22, r22
  de:	77 1f       	adc	r23, r23
  e0:	2a 95       	dec	r18
  e2:	e2 f7       	brpl	.-8      	; 0xdc <DIO_Init+0x5a>
  e4:	9b 01       	movw	r18, r22
  e6:	20 95       	com	r18
  e8:	29 23       	and	r18, r25
  ea:	2a bb       	out	0x1a, r18	; 26
  ec:	6b c0       	rjmp	.+214    	; 0x1c4 <DIO_Init+0x142>
			}
			break;
			case DIO_PortB :
			if (PinCfg[count].PinDir == Output)
  ee:	e8 2f       	mov	r30, r24
  f0:	f0 e0       	ldi	r31, 0x00	; 0
  f2:	ee 0f       	add	r30, r30
  f4:	ff 1f       	adc	r31, r31
  f6:	e0 5a       	subi	r30, 0xA0	; 160
  f8:	ff 4f       	sbci	r31, 0xFF	; 255
  fa:	90 81       	ld	r25, Z
  fc:	91 30       	cpi	r25, 0x01	; 1
  fe:	69 f4       	brne	.+26     	; 0x11a <DIO_Init+0x98>
			{
				set_bit(DDRB_reg,DIO_channel);
 100:	97 b3       	in	r25, 0x17	; 23
 102:	41 e0       	ldi	r20, 0x01	; 1
 104:	50 e0       	ldi	r21, 0x00	; 0
 106:	ba 01       	movw	r22, r20
 108:	02 c0       	rjmp	.+4      	; 0x10e <DIO_Init+0x8c>
 10a:	66 0f       	add	r22, r22
 10c:	77 1f       	adc	r23, r23
 10e:	2a 95       	dec	r18
 110:	e2 f7       	brpl	.-8      	; 0x10a <DIO_Init+0x88>
 112:	9b 01       	movw	r18, r22
 114:	29 2b       	or	r18, r25
 116:	27 bb       	out	0x17, r18	; 23
 118:	55 c0       	rjmp	.+170    	; 0x1c4 <DIO_Init+0x142>
			}
			else{
				reset_bit(DDRB_reg,DIO_channel);
 11a:	97 b3       	in	r25, 0x17	; 23
 11c:	41 e0       	ldi	r20, 0x01	; 1
 11e:	50 e0       	ldi	r21, 0x00	; 0
 120:	ba 01       	movw	r22, r20
 122:	02 c0       	rjmp	.+4      	; 0x128 <DIO_Init+0xa6>
 124:	66 0f       	add	r22, r22
 126:	77 1f       	adc	r23, r23
 128:	2a 95       	dec	r18
 12a:	e2 f7       	brpl	.-8      	; 0x124 <DIO_Init+0xa2>
 12c:	9b 01       	movw	r18, r22
 12e:	20 95       	com	r18
 130:	29 23       	and	r18, r25
 132:	27 bb       	out	0x17, r18	; 23
 134:	47 c0       	rjmp	.+142    	; 0x1c4 <DIO_Init+0x142>
			}
			break;
			case DIO_PortC :
			if (PinCfg[count].PinDir == Output)
 136:	e8 2f       	mov	r30, r24
 138:	f0 e0       	ldi	r31, 0x00	; 0
 13a:	ee 0f       	add	r30, r30
 13c:	ff 1f       	adc	r31, r31
 13e:	e0 5a       	subi	r30, 0xA0	; 160
 140:	ff 4f       	sbci	r31, 0xFF	; 255
 142:	90 81       	ld	r25, Z
 144:	91 30       	cpi	r25, 0x01	; 1
 146:	69 f4       	brne	.+26     	; 0x162 <DIO_Init+0xe0>
			{
				set_bit(DDRC_reg,DIO_channel);
 148:	94 b3       	in	r25, 0x14	; 20
 14a:	41 e0       	ldi	r20, 0x01	; 1
 14c:	50 e0       	ldi	r21, 0x00	; 0
 14e:	ba 01       	movw	r22, r20
 150:	02 c0       	rjmp	.+4      	; 0x156 <DIO_Init+0xd4>
 152:	66 0f       	add	r22, r22
 154:	77 1f       	adc	r23, r23
 156:	2a 95       	dec	r18
 158:	e2 f7       	brpl	.-8      	; 0x152 <DIO_Init+0xd0>
 15a:	9b 01       	movw	r18, r22
 15c:	29 2b       	or	r18, r25
 15e:	24 bb       	out	0x14, r18	; 20
 160:	31 c0       	rjmp	.+98     	; 0x1c4 <DIO_Init+0x142>
			}
			else{
				reset_bit(DDRC_reg,DIO_channel);
 162:	94 b3       	in	r25, 0x14	; 20
 164:	41 e0       	ldi	r20, 0x01	; 1
 166:	50 e0       	ldi	r21, 0x00	; 0
 168:	ba 01       	movw	r22, r20
 16a:	02 c0       	rjmp	.+4      	; 0x170 <DIO_Init+0xee>
 16c:	66 0f       	add	r22, r22
 16e:	77 1f       	adc	r23, r23
 170:	2a 95       	dec	r18
 172:	e2 f7       	brpl	.-8      	; 0x16c <DIO_Init+0xea>
 174:	9b 01       	movw	r18, r22
 176:	20 95       	com	r18
 178:	29 23       	and	r18, r25
 17a:	24 bb       	out	0x14, r18	; 20
 17c:	23 c0       	rjmp	.+70     	; 0x1c4 <DIO_Init+0x142>
			}
			break;
			case DIO_PortD :
			if (PinCfg[count].PinDir == Output)
 17e:	e8 2f       	mov	r30, r24
 180:	f0 e0       	ldi	r31, 0x00	; 0
 182:	ee 0f       	add	r30, r30
 184:	ff 1f       	adc	r31, r31
 186:	e0 5a       	subi	r30, 0xA0	; 160
 188:	ff 4f       	sbci	r31, 0xFF	; 255
 18a:	90 81       	ld	r25, Z
 18c:	91 30       	cpi	r25, 0x01	; 1
 18e:	69 f4       	brne	.+26     	; 0x1aa <DIO_Init+0x128>
			{
				set_bit(DDRD_reg,DIO_channel);
 190:	91 b3       	in	r25, 0x11	; 17
 192:	41 e0       	ldi	r20, 0x01	; 1
 194:	50 e0       	ldi	r21, 0x00	; 0
 196:	ba 01       	movw	r22, r20
 198:	02 c0       	rjmp	.+4      	; 0x19e <DIO_Init+0x11c>
 19a:	66 0f       	add	r22, r22
 19c:	77 1f       	adc	r23, r23
 19e:	2a 95       	dec	r18
 1a0:	e2 f7       	brpl	.-8      	; 0x19a <DIO_Init+0x118>
 1a2:	9b 01       	movw	r18, r22
 1a4:	29 2b       	or	r18, r25
 1a6:	21 bb       	out	0x11, r18	; 17
 1a8:	0d c0       	rjmp	.+26     	; 0x1c4 <DIO_Init+0x142>
			}
			else{
				reset_bit(DDRD_reg,DIO_channel);
 1aa:	91 b3       	in	r25, 0x11	; 17
 1ac:	41 e0       	ldi	r20, 0x01	; 1
 1ae:	50 e0       	ldi	r21, 0x00	; 0
 1b0:	ba 01       	movw	r22, r20
 1b2:	02 c0       	rjmp	.+4      	; 0x1b8 <DIO_Init+0x136>
 1b4:	66 0f       	add	r22, r22
 1b6:	77 1f       	adc	r23, r23
 1b8:	2a 95       	dec	r18
 1ba:	e2 f7       	brpl	.-8      	; 0x1b4 <DIO_Init+0x132>
 1bc:	9b 01       	movw	r18, r22
 1be:	20 95       	com	r18
 1c0:	29 23       	and	r18, r25
 1c2:	21 bb       	out	0x11, r18	; 17

void DIO_Init(void){
	DIO_ChannelTypes DIO_channel;
	DIO_PortTypes PortX;
	uint8 count=0;
	for(count=DIO_ChannelA0;count<pin_count;count++)
 1c4:	8f 5f       	subi	r24, 0xFF	; 255
 1c6:	80 32       	cpi	r24, 0x20	; 32
 1c8:	08 f4       	brcc	.+2      	; 0x1cc <DIO_Init+0x14a>
 1ca:	5d cf       	rjmp	.-326    	; 0x86 <DIO_Init+0x4>
			}
			break;
			
		}
	}
}
 1cc:	08 95       	ret

000001ce <DIO_write>:
		case DIO_PIND :
		return get_bit(PIND_reg,Channelpos);
		break;
	}
	
}
 1ce:	98 2f       	mov	r25, r24
 1d0:	96 95       	lsr	r25
 1d2:	96 95       	lsr	r25
 1d4:	96 95       	lsr	r25
 1d6:	87 70       	andi	r24, 0x07	; 7
 1d8:	91 30       	cpi	r25, 0x01	; 1
 1da:	21 f1       	breq	.+72     	; 0x224 <DIO_write+0x56>
 1dc:	30 f0       	brcs	.+12     	; 0x1ea <DIO_write+0x1c>
 1de:	92 30       	cpi	r25, 0x02	; 2
 1e0:	f1 f1       	breq	.+124    	; 0x25e <DIO_write+0x90>
 1e2:	93 30       	cpi	r25, 0x03	; 3
 1e4:	09 f4       	brne	.+2      	; 0x1e8 <DIO_write+0x1a>
 1e6:	58 c0       	rjmp	.+176    	; 0x298 <DIO_write+0xca>
 1e8:	08 95       	ret
 1ea:	61 30       	cpi	r22, 0x01	; 1
 1ec:	69 f4       	brne	.+26     	; 0x208 <DIO_write+0x3a>
 1ee:	4b b3       	in	r20, 0x1b	; 27
 1f0:	21 e0       	ldi	r18, 0x01	; 1
 1f2:	30 e0       	ldi	r19, 0x00	; 0
 1f4:	b9 01       	movw	r22, r18
 1f6:	02 c0       	rjmp	.+4      	; 0x1fc <DIO_write+0x2e>
 1f8:	66 0f       	add	r22, r22
 1fa:	77 1f       	adc	r23, r23
 1fc:	8a 95       	dec	r24
 1fe:	e2 f7       	brpl	.-8      	; 0x1f8 <DIO_write+0x2a>
 200:	cb 01       	movw	r24, r22
 202:	84 2b       	or	r24, r20
 204:	8b bb       	out	0x1b, r24	; 27
 206:	08 95       	ret
 208:	4b b3       	in	r20, 0x1b	; 27
 20a:	21 e0       	ldi	r18, 0x01	; 1
 20c:	30 e0       	ldi	r19, 0x00	; 0
 20e:	b9 01       	movw	r22, r18
 210:	02 c0       	rjmp	.+4      	; 0x216 <DIO_write+0x48>
 212:	66 0f       	add	r22, r22
 214:	77 1f       	adc	r23, r23
 216:	8a 95       	dec	r24
 218:	e2 f7       	brpl	.-8      	; 0x212 <DIO_write+0x44>
 21a:	cb 01       	movw	r24, r22
 21c:	80 95       	com	r24
 21e:	84 23       	and	r24, r20
 220:	8b bb       	out	0x1b, r24	; 27
 222:	08 95       	ret
 224:	61 30       	cpi	r22, 0x01	; 1
 226:	69 f4       	brne	.+26     	; 0x242 <DIO_write+0x74>
 228:	48 b3       	in	r20, 0x18	; 24
 22a:	21 e0       	ldi	r18, 0x01	; 1
 22c:	30 e0       	ldi	r19, 0x00	; 0
 22e:	b9 01       	movw	r22, r18
 230:	02 c0       	rjmp	.+4      	; 0x236 <DIO_write+0x68>
 232:	66 0f       	add	r22, r22
 234:	77 1f       	adc	r23, r23
 236:	8a 95       	dec	r24
 238:	e2 f7       	brpl	.-8      	; 0x232 <DIO_write+0x64>
 23a:	cb 01       	movw	r24, r22
 23c:	84 2b       	or	r24, r20
 23e:	88 bb       	out	0x18, r24	; 24
 240:	08 95       	ret
 242:	48 b3       	in	r20, 0x18	; 24
 244:	21 e0       	ldi	r18, 0x01	; 1
 246:	30 e0       	ldi	r19, 0x00	; 0
 248:	b9 01       	movw	r22, r18
 24a:	02 c0       	rjmp	.+4      	; 0x250 <DIO_write+0x82>
 24c:	66 0f       	add	r22, r22
 24e:	77 1f       	adc	r23, r23
 250:	8a 95       	dec	r24
 252:	e2 f7       	brpl	.-8      	; 0x24c <DIO_write+0x7e>
 254:	cb 01       	movw	r24, r22
 256:	80 95       	com	r24
 258:	84 23       	and	r24, r20
 25a:	88 bb       	out	0x18, r24	; 24
 25c:	08 95       	ret
 25e:	61 30       	cpi	r22, 0x01	; 1
 260:	69 f4       	brne	.+26     	; 0x27c <DIO_write+0xae>
 262:	45 b3       	in	r20, 0x15	; 21
 264:	21 e0       	ldi	r18, 0x01	; 1
 266:	30 e0       	ldi	r19, 0x00	; 0
 268:	b9 01       	movw	r22, r18
 26a:	02 c0       	rjmp	.+4      	; 0x270 <DIO_write+0xa2>
 26c:	66 0f       	add	r22, r22
 26e:	77 1f       	adc	r23, r23
 270:	8a 95       	dec	r24
 272:	e2 f7       	brpl	.-8      	; 0x26c <DIO_write+0x9e>
 274:	cb 01       	movw	r24, r22
 276:	84 2b       	or	r24, r20
 278:	85 bb       	out	0x15, r24	; 21
 27a:	08 95       	ret
 27c:	45 b3       	in	r20, 0x15	; 21
 27e:	21 e0       	ldi	r18, 0x01	; 1
 280:	30 e0       	ldi	r19, 0x00	; 0
 282:	b9 01       	movw	r22, r18
 284:	02 c0       	rjmp	.+4      	; 0x28a <DIO_write+0xbc>
 286:	66 0f       	add	r22, r22
 288:	77 1f       	adc	r23, r23
 28a:	8a 95       	dec	r24
 28c:	e2 f7       	brpl	.-8      	; 0x286 <DIO_write+0xb8>
 28e:	cb 01       	movw	r24, r22
 290:	80 95       	com	r24
 292:	84 23       	and	r24, r20
 294:	85 bb       	out	0x15, r24	; 21
 296:	08 95       	ret
 298:	61 30       	cpi	r22, 0x01	; 1
 29a:	69 f4       	brne	.+26     	; 0x2b6 <DIO_write+0xe8>
 29c:	42 b3       	in	r20, 0x12	; 18
 29e:	21 e0       	ldi	r18, 0x01	; 1
 2a0:	30 e0       	ldi	r19, 0x00	; 0
 2a2:	b9 01       	movw	r22, r18
 2a4:	02 c0       	rjmp	.+4      	; 0x2aa <DIO_write+0xdc>
 2a6:	66 0f       	add	r22, r22
 2a8:	77 1f       	adc	r23, r23
 2aa:	8a 95       	dec	r24
 2ac:	e2 f7       	brpl	.-8      	; 0x2a6 <DIO_write+0xd8>
 2ae:	cb 01       	movw	r24, r22
 2b0:	84 2b       	or	r24, r20
 2b2:	82 bb       	out	0x12, r24	; 18
 2b4:	08 95       	ret
 2b6:	42 b3       	in	r20, 0x12	; 18
 2b8:	21 e0       	ldi	r18, 0x01	; 1
 2ba:	30 e0       	ldi	r19, 0x00	; 0
 2bc:	b9 01       	movw	r22, r18
 2be:	02 c0       	rjmp	.+4      	; 0x2c4 <DIO_write+0xf6>
 2c0:	66 0f       	add	r22, r22
 2c2:	77 1f       	adc	r23, r23
 2c4:	8a 95       	dec	r24
 2c6:	e2 f7       	brpl	.-8      	; 0x2c0 <DIO_write+0xf2>
 2c8:	cb 01       	movw	r24, r22
 2ca:	80 95       	com	r24
 2cc:	84 23       	and	r24, r20
 2ce:	82 bb       	out	0x12, r24	; 18
 2d0:	08 95       	ret

000002d2 <DIO_WritePort>:

void DIO_WritePort(DIO_PortTypes portx, uint8 data){
	switch(portx){
 2d2:	81 30       	cpi	r24, 0x01	; 1
 2d4:	41 f0       	breq	.+16     	; 0x2e6 <DIO_WritePort+0x14>
 2d6:	28 f0       	brcs	.+10     	; 0x2e2 <DIO_WritePort+0x10>
 2d8:	82 30       	cpi	r24, 0x02	; 2
 2da:	39 f0       	breq	.+14     	; 0x2ea <DIO_WritePort+0x18>
 2dc:	83 30       	cpi	r24, 0x03	; 3
 2de:	39 f0       	breq	.+14     	; 0x2ee <DIO_WritePort+0x1c>
 2e0:	08 95       	ret
		case DIO_PortA:
		PORTA_reg= data;
 2e2:	6b bb       	out	0x1b, r22	; 27
		break;
 2e4:	08 95       	ret
		
		case DIO_PortB:
		PORTB_reg= data;
 2e6:	68 bb       	out	0x18, r22	; 24
		break;
 2e8:	08 95       	ret
		
		case DIO_PortC:
		PORTC_reg= data;
 2ea:	65 bb       	out	0x15, r22	; 21
		break;
 2ec:	08 95       	ret
		
		case DIO_PortD:
		PORTD_reg= data;
 2ee:	62 bb       	out	0x12, r22	; 18
 2f0:	08 95       	ret

000002f2 <check1>:

#include "KeyPad.h"
#include "bit_math.h"

void check1(void){
	PORTD=0xEF;
 2f2:	8f ee       	ldi	r24, 0xEF	; 239
 2f4:	82 bb       	out	0x12, r24	; 18
	if(get_bit(PIND,C1) == 0){
 2f6:	80 99       	sbic	0x10, 0	; 16
 2f8:	09 c0       	rjmp	.+18     	; 0x30c <check1+0x1a>
		set_bit(PORTC,1);
 2fa:	85 b3       	in	r24, 0x15	; 21
 2fc:	82 60       	ori	r24, 0x02	; 2
 2fe:	85 bb       	out	0x15, r24	; 21
		while(get_bit(PIND,C1) == 0);
 300:	80 9b       	sbis	0x10, 0	; 16
 302:	fe cf       	rjmp	.-4      	; 0x300 <check1+0xe>
		reset_bit(PORTC,1);
 304:	85 b3       	in	r24, 0x15	; 21
 306:	8d 7f       	andi	r24, 0xFD	; 253
 308:	85 bb       	out	0x15, r24	; 21
 30a:	08 95       	ret
	}
	else if (get_bit(PIND,C2) == 0)
 30c:	81 99       	sbic	0x10, 1	; 16
 30e:	09 c0       	rjmp	.+18     	; 0x322 <check1+0x30>
	{
		set_bit(PORTC,1);
 310:	85 b3       	in	r24, 0x15	; 21
 312:	82 60       	ori	r24, 0x02	; 2
 314:	85 bb       	out	0x15, r24	; 21
		while(get_bit(PIND,C2) == 0);
 316:	81 9b       	sbis	0x10, 1	; 16
 318:	fe cf       	rjmp	.-4      	; 0x316 <check1+0x24>
		reset_bit(PORTC,1);
 31a:	85 b3       	in	r24, 0x15	; 21
 31c:	8d 7f       	andi	r24, 0xFD	; 253
 31e:	85 bb       	out	0x15, r24	; 21
 320:	08 95       	ret
	}
	else if (get_bit(PIND,C3) == 0)
 322:	82 99       	sbic	0x10, 2	; 16
 324:	09 c0       	rjmp	.+18     	; 0x338 <check1+0x46>
	{
		set_bit(PORTC,1);
 326:	85 b3       	in	r24, 0x15	; 21
 328:	82 60       	ori	r24, 0x02	; 2
 32a:	85 bb       	out	0x15, r24	; 21
		while(get_bit(PIND,C3) == 0);
 32c:	82 9b       	sbis	0x10, 2	; 16
 32e:	fe cf       	rjmp	.-4      	; 0x32c <check1+0x3a>
		reset_bit(PORTC,1);
 330:	85 b3       	in	r24, 0x15	; 21
 332:	8d 7f       	andi	r24, 0xFD	; 253
 334:	85 bb       	out	0x15, r24	; 21
 336:	08 95       	ret
	}
	else if (get_bit(PIND,C4) == 0)
 338:	83 99       	sbic	0x10, 3	; 16
 33a:	08 c0       	rjmp	.+16     	; 0x34c <check1+0x5a>
	{
		set_bit(PORTC,1);
 33c:	85 b3       	in	r24, 0x15	; 21
 33e:	82 60       	ori	r24, 0x02	; 2
 340:	85 bb       	out	0x15, r24	; 21
		while(get_bit(PIND,C4) == 0);
 342:	83 9b       	sbis	0x10, 3	; 16
 344:	fe cf       	rjmp	.-4      	; 0x342 <check1+0x50>
		reset_bit(PORTC,1);
 346:	85 b3       	in	r24, 0x15	; 21
 348:	8d 7f       	andi	r24, 0xFD	; 253
 34a:	85 bb       	out	0x15, r24	; 21
 34c:	08 95       	ret

0000034e <check2>:
	}
}


void check2(void){
	PORTD=0xDF;
 34e:	8f ed       	ldi	r24, 0xDF	; 223
 350:	82 bb       	out	0x12, r24	; 18
	if(get_bit(PIND,C1) == 0){
 352:	80 99       	sbic	0x10, 0	; 16
 354:	09 c0       	rjmp	.+18     	; 0x368 <check2+0x1a>
		set_bit(PORTC,1);
 356:	85 b3       	in	r24, 0x15	; 21
 358:	82 60       	ori	r24, 0x02	; 2
 35a:	85 bb       	out	0x15, r24	; 21
		while(get_bit(PIND,C1) == 0);
 35c:	80 9b       	sbis	0x10, 0	; 16
 35e:	fe cf       	rjmp	.-4      	; 0x35c <check2+0xe>
		reset_bit(PORTC,1);
 360:	85 b3       	in	r24, 0x15	; 21
 362:	8d 7f       	andi	r24, 0xFD	; 253
 364:	85 bb       	out	0x15, r24	; 21
 366:	08 95       	ret
	}
	else if (get_bit(PIND,C2) == 0)
 368:	81 99       	sbic	0x10, 1	; 16
 36a:	09 c0       	rjmp	.+18     	; 0x37e <check2+0x30>
	{
		set_bit(PORTC,1);
 36c:	85 b3       	in	r24, 0x15	; 21
 36e:	82 60       	ori	r24, 0x02	; 2
 370:	85 bb       	out	0x15, r24	; 21
		while(get_bit(PIND,C2) == 0);
 372:	81 9b       	sbis	0x10, 1	; 16
 374:	fe cf       	rjmp	.-4      	; 0x372 <check2+0x24>
		reset_bit(PORTC,1);
 376:	85 b3       	in	r24, 0x15	; 21
 378:	8d 7f       	andi	r24, 0xFD	; 253
 37a:	85 bb       	out	0x15, r24	; 21
 37c:	08 95       	ret
	}
	else if (get_bit(PIND,C3) == 0)
 37e:	82 99       	sbic	0x10, 2	; 16
 380:	09 c0       	rjmp	.+18     	; 0x394 <check2+0x46>
	{
		set_bit(PORTC,1);
 382:	85 b3       	in	r24, 0x15	; 21
 384:	82 60       	ori	r24, 0x02	; 2
 386:	85 bb       	out	0x15, r24	; 21
		while(get_bit(PIND,C3) == 0);
 388:	82 9b       	sbis	0x10, 2	; 16
 38a:	fe cf       	rjmp	.-4      	; 0x388 <check2+0x3a>
		reset_bit(PORTC,1);
 38c:	85 b3       	in	r24, 0x15	; 21
 38e:	8d 7f       	andi	r24, 0xFD	; 253
 390:	85 bb       	out	0x15, r24	; 21
 392:	08 95       	ret
	}
	else if (get_bit(PIND,C4) == 0)
 394:	83 99       	sbic	0x10, 3	; 16
 396:	08 c0       	rjmp	.+16     	; 0x3a8 <check2+0x5a>
	{
		set_bit(PORTC,1);
 398:	85 b3       	in	r24, 0x15	; 21
 39a:	82 60       	ori	r24, 0x02	; 2
 39c:	85 bb       	out	0x15, r24	; 21
		while(get_bit(PIND,C4) == 0);
 39e:	83 9b       	sbis	0x10, 3	; 16
 3a0:	fe cf       	rjmp	.-4      	; 0x39e <check2+0x50>
		reset_bit(PORTC,1);
 3a2:	85 b3       	in	r24, 0x15	; 21
 3a4:	8d 7f       	andi	r24, 0xFD	; 253
 3a6:	85 bb       	out	0x15, r24	; 21
 3a8:	08 95       	ret

000003aa <check3>:
	}
	
}
void check3(void){
	PORTD=0xBF;
 3aa:	8f eb       	ldi	r24, 0xBF	; 191
 3ac:	82 bb       	out	0x12, r24	; 18
	if(get_bit(PIND,C1) == 0){
 3ae:	80 99       	sbic	0x10, 0	; 16
 3b0:	09 c0       	rjmp	.+18     	; 0x3c4 <check3+0x1a>
		set_bit(PORTC,1);
 3b2:	85 b3       	in	r24, 0x15	; 21
 3b4:	82 60       	ori	r24, 0x02	; 2
 3b6:	85 bb       	out	0x15, r24	; 21
		while(get_bit(PIND,C1) == 0);
 3b8:	80 9b       	sbis	0x10, 0	; 16
 3ba:	fe cf       	rjmp	.-4      	; 0x3b8 <check3+0xe>
		reset_bit(PORTC,1);
 3bc:	85 b3       	in	r24, 0x15	; 21
 3be:	8d 7f       	andi	r24, 0xFD	; 253
 3c0:	85 bb       	out	0x15, r24	; 21
 3c2:	08 95       	ret
	}
	else if (get_bit(PIND,C2) == 0)
 3c4:	81 99       	sbic	0x10, 1	; 16
 3c6:	09 c0       	rjmp	.+18     	; 0x3da <check3+0x30>
	{
		set_bit(PORTC,1);
 3c8:	85 b3       	in	r24, 0x15	; 21
 3ca:	82 60       	ori	r24, 0x02	; 2
 3cc:	85 bb       	out	0x15, r24	; 21
		while(get_bit(PIND,C2) == 0);
 3ce:	81 9b       	sbis	0x10, 1	; 16
 3d0:	fe cf       	rjmp	.-4      	; 0x3ce <check3+0x24>
		reset_bit(PORTC,1);
 3d2:	85 b3       	in	r24, 0x15	; 21
 3d4:	8d 7f       	andi	r24, 0xFD	; 253
 3d6:	85 bb       	out	0x15, r24	; 21
 3d8:	08 95       	ret
	}
	else if (get_bit(PIND,C3) == 0)
 3da:	82 99       	sbic	0x10, 2	; 16
 3dc:	09 c0       	rjmp	.+18     	; 0x3f0 <check3+0x46>
	{
		set_bit(PORTC,1);
 3de:	85 b3       	in	r24, 0x15	; 21
 3e0:	82 60       	ori	r24, 0x02	; 2
 3e2:	85 bb       	out	0x15, r24	; 21
		while(get_bit(PIND,C3) == 0);
 3e4:	82 9b       	sbis	0x10, 2	; 16
 3e6:	fe cf       	rjmp	.-4      	; 0x3e4 <check3+0x3a>
		reset_bit(PORTC,1);
 3e8:	85 b3       	in	r24, 0x15	; 21
 3ea:	8d 7f       	andi	r24, 0xFD	; 253
 3ec:	85 bb       	out	0x15, r24	; 21
 3ee:	08 95       	ret
	}
	else if (get_bit(PIND,C4) == 0)
 3f0:	83 99       	sbic	0x10, 3	; 16
 3f2:	08 c0       	rjmp	.+16     	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
	{
		set_bit(PORTC,1);
 3f4:	85 b3       	in	r24, 0x15	; 21
 3f6:	82 60       	ori	r24, 0x02	; 2
 3f8:	85 bb       	out	0x15, r24	; 21
		while(get_bit(PIND,C4) == 0);
 3fa:	83 9b       	sbis	0x10, 3	; 16
 3fc:	fe cf       	rjmp	.-4      	; 0x3fa <check3+0x50>
		reset_bit(PORTC,1);
 3fe:	85 b3       	in	r24, 0x15	; 21
 400:	8d 7f       	andi	r24, 0xFD	; 253
 402:	85 bb       	out	0x15, r24	; 21
 404:	08 95       	ret

00000406 <check4>:
	}
}
void check4(void){
	PORTD=0x7F;
 406:	8f e7       	ldi	r24, 0x7F	; 127
 408:	82 bb       	out	0x12, r24	; 18
	if(get_bit(PIND,C1) == 0){
 40a:	80 99       	sbic	0x10, 0	; 16
 40c:	09 c0       	rjmp	.+18     	; 0x420 <check4+0x1a>
		set_bit(PORTC,1);
 40e:	85 b3       	in	r24, 0x15	; 21
 410:	82 60       	ori	r24, 0x02	; 2
 412:	85 bb       	out	0x15, r24	; 21
		while(get_bit(PIND,C1) == 0);
 414:	80 9b       	sbis	0x10, 0	; 16
 416:	fe cf       	rjmp	.-4      	; 0x414 <check4+0xe>
		reset_bit(PORTC,1);
 418:	85 b3       	in	r24, 0x15	; 21
 41a:	8d 7f       	andi	r24, 0xFD	; 253
 41c:	85 bb       	out	0x15, r24	; 21
 41e:	08 95       	ret
	}
	else if (get_bit(PIND,C2) == 0)
 420:	81 99       	sbic	0x10, 1	; 16
 422:	09 c0       	rjmp	.+18     	; 0x436 <check4+0x30>
	{
		set_bit(PORTC,1);
 424:	85 b3       	in	r24, 0x15	; 21
 426:	82 60       	ori	r24, 0x02	; 2
 428:	85 bb       	out	0x15, r24	; 21
		while(get_bit(PIND,C2) == 0);
 42a:	81 9b       	sbis	0x10, 1	; 16
 42c:	fe cf       	rjmp	.-4      	; 0x42a <check4+0x24>
		reset_bit(PORTC,1);
 42e:	85 b3       	in	r24, 0x15	; 21
 430:	8d 7f       	andi	r24, 0xFD	; 253
 432:	85 bb       	out	0x15, r24	; 21
 434:	08 95       	ret
	}
	else if (get_bit(PIND,C3) == 0)
 436:	82 99       	sbic	0x10, 2	; 16
 438:	09 c0       	rjmp	.+18     	; 0x44c <check4+0x46>
	{
		set_bit(PORTC,1);
 43a:	85 b3       	in	r24, 0x15	; 21
 43c:	82 60       	ori	r24, 0x02	; 2
 43e:	85 bb       	out	0x15, r24	; 21
		while(get_bit(PIND,C3) == 0);
 440:	82 9b       	sbis	0x10, 2	; 16
 442:	fe cf       	rjmp	.-4      	; 0x440 <check4+0x3a>
		reset_bit(PORTC,1);
 444:	85 b3       	in	r24, 0x15	; 21
 446:	8d 7f       	andi	r24, 0xFD	; 253
 448:	85 bb       	out	0x15, r24	; 21
 44a:	08 95       	ret
	}
	else if (get_bit(PIND,C4) == 0)
 44c:	83 99       	sbic	0x10, 3	; 16
 44e:	08 c0       	rjmp	.+16     	; 0x460 <check4+0x5a>
	{
		set_bit(PORTC,1);
 450:	85 b3       	in	r24, 0x15	; 21
 452:	82 60       	ori	r24, 0x02	; 2
 454:	85 bb       	out	0x15, r24	; 21
		while(get_bit(PIND,C4) == 0);
 456:	83 9b       	sbis	0x10, 3	; 16
 458:	fe cf       	rjmp	.-4      	; 0x456 <check4+0x50>
		reset_bit(PORTC,1);
 45a:	85 b3       	in	r24, 0x15	; 21
 45c:	8d 7f       	andi	r24, 0xFD	; 253
 45e:	85 bb       	out	0x15, r24	; 21
 460:	08 95       	ret

00000462 <LCD_Command>:
 * Created: 6/23/2023 5:03:16 AM
 *  Author: mohamed
 */ 
#include "LCD.h"

void LCD_Command(uint8 cmd){
 462:	cf 93       	push	r28
 464:	c8 2f       	mov	r28, r24
	uint8 send_cmd;
	send_cmd =(LCD_Data_Port & (0x0F)) | (cmd &(0xF0));
 466:	68 2f       	mov	r22, r24
 468:	60 7f       	andi	r22, 0xF0	; 240
	DIO_WritePort(LCD_Data_Port,send_cmd);
 46a:	80 e0       	ldi	r24, 0x00	; 0
 46c:	0e 94 69 01 	call	0x2d2	; 0x2d2 <DIO_WritePort>
	DIO_write(LCD_RS,STD_low);
 470:	60 e0       	ldi	r22, 0x00	; 0
 472:	89 e0       	ldi	r24, 0x09	; 9
 474:	0e 94 e7 00 	call	0x1ce	; 0x1ce <DIO_write>
	DIO_write(LCD_E,STD_low);
 478:	60 e0       	ldi	r22, 0x00	; 0
 47a:	8b e0       	ldi	r24, 0x0B	; 11
 47c:	0e 94 e7 00 	call	0x1ce	; 0x1ce <DIO_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 480:	8f e3       	ldi	r24, 0x3F	; 63
 482:	9f e1       	ldi	r25, 0x1F	; 31
 484:	01 97       	sbiw	r24, 0x01	; 1
 486:	f1 f7       	brne	.-4      	; 0x484 <LCD_Command+0x22>
 488:	00 c0       	rjmp	.+0      	; 0x48a <LCD_Command+0x28>
 48a:	00 00       	nop
	_delay_ms(2);
	DIO_write(LCD_E,STD_high);
 48c:	61 e0       	ldi	r22, 0x01	; 1
 48e:	8b e0       	ldi	r24, 0x0B	; 11
 490:	0e 94 e7 00 	call	0x1ce	; 0x1ce <DIO_write>
 494:	8f e3       	ldi	r24, 0x3F	; 63
 496:	9c e9       	ldi	r25, 0x9C	; 156
 498:	01 97       	sbiw	r24, 0x01	; 1
 49a:	f1 f7       	brne	.-4      	; 0x498 <LCD_Command+0x36>
 49c:	00 c0       	rjmp	.+0      	; 0x49e <LCD_Command+0x3c>
 49e:	00 00       	nop
	_delay_ms(10);
	send_cmd =(LCD_Data_Port & (0x0F)) | (cmd << 4);
 4a0:	6c 2f       	mov	r22, r28
 4a2:	62 95       	swap	r22
 4a4:	60 7f       	andi	r22, 0xF0	; 240
	DIO_WritePort(LCD_Data_Port,send_cmd);
 4a6:	80 e0       	ldi	r24, 0x00	; 0
 4a8:	0e 94 69 01 	call	0x2d2	; 0x2d2 <DIO_WritePort>
	DIO_write(LCD_RS,STD_low);
 4ac:	60 e0       	ldi	r22, 0x00	; 0
 4ae:	89 e0       	ldi	r24, 0x09	; 9
 4b0:	0e 94 e7 00 	call	0x1ce	; 0x1ce <DIO_write>
	DIO_write(LCD_E,STD_low);
 4b4:	60 e0       	ldi	r22, 0x00	; 0
 4b6:	8b e0       	ldi	r24, 0x0B	; 11
 4b8:	0e 94 e7 00 	call	0x1ce	; 0x1ce <DIO_write>
 4bc:	8f e3       	ldi	r24, 0x3F	; 63
 4be:	9f e1       	ldi	r25, 0x1F	; 31
 4c0:	01 97       	sbiw	r24, 0x01	; 1
 4c2:	f1 f7       	brne	.-4      	; 0x4c0 <LCD_Command+0x5e>
 4c4:	00 c0       	rjmp	.+0      	; 0x4c6 <LCD_Command+0x64>
 4c6:	00 00       	nop
	_delay_ms(2);
	DIO_write(LCD_E,STD_high);
 4c8:	61 e0       	ldi	r22, 0x01	; 1
 4ca:	8b e0       	ldi	r24, 0x0B	; 11
 4cc:	0e 94 e7 00 	call	0x1ce	; 0x1ce <DIO_write>
 4d0:	8f e3       	ldi	r24, 0x3F	; 63
 4d2:	9f e1       	ldi	r25, 0x1F	; 31
 4d4:	01 97       	sbiw	r24, 0x01	; 1
 4d6:	f1 f7       	brne	.-4      	; 0x4d4 <LCD_Command+0x72>
 4d8:	00 c0       	rjmp	.+0      	; 0x4da <LCD_Command+0x78>
 4da:	00 00       	nop
	_delay_ms(2);
}
 4dc:	cf 91       	pop	r28
 4de:	08 95       	ret

000004e0 <LCD_init>:
void LCD_init(void){
	DIO_write(LCD_RW,STD_low);
 4e0:	60 e0       	ldi	r22, 0x00	; 0
 4e2:	8a e0       	ldi	r24, 0x0A	; 10
 4e4:	0e 94 e7 00 	call	0x1ce	; 0x1ce <DIO_write>
 4e8:	2f ef       	ldi	r18, 0xFF	; 255
 4ea:	89 ef       	ldi	r24, 0xF9	; 249
 4ec:	90 e0       	ldi	r25, 0x00	; 0
 4ee:	21 50       	subi	r18, 0x01	; 1
 4f0:	80 40       	sbci	r24, 0x00	; 0
 4f2:	90 40       	sbci	r25, 0x00	; 0
 4f4:	e1 f7       	brne	.-8      	; 0x4ee <LCD_init+0xe>
 4f6:	00 c0       	rjmp	.+0      	; 0x4f8 <LCD_init+0x18>
 4f8:	00 00       	nop
	_delay_ms(20);
	LCD_Command(0x33);
 4fa:	83 e3       	ldi	r24, 0x33	; 51
 4fc:	0e 94 31 02 	call	0x462	; 0x462 <LCD_Command>
 500:	8f e3       	ldi	r24, 0x3F	; 63
 502:	9f e1       	ldi	r25, 0x1F	; 31
 504:	01 97       	sbiw	r24, 0x01	; 1
 506:	f1 f7       	brne	.-4      	; 0x504 <LCD_init+0x24>
 508:	00 c0       	rjmp	.+0      	; 0x50a <LCD_init+0x2a>
 50a:	00 00       	nop
	_delay_ms(2);
	LCD_Command(0x32);
 50c:	82 e3       	ldi	r24, 0x32	; 50
 50e:	0e 94 31 02 	call	0x462	; 0x462 <LCD_Command>
	LCD_Command(0x28);
 512:	88 e2       	ldi	r24, 0x28	; 40
 514:	0e 94 31 02 	call	0x462	; 0x462 <LCD_Command>
	LCD_Command(0x06);
 518:	86 e0       	ldi	r24, 0x06	; 6
 51a:	0e 94 31 02 	call	0x462	; 0x462 <LCD_Command>
	LCD_Command(0x0C);
 51e:	8c e0       	ldi	r24, 0x0C	; 12
 520:	0e 94 31 02 	call	0x462	; 0x462 <LCD_Command>
	LCD_Command(0x01);
 524:	81 e0       	ldi	r24, 0x01	; 1
 526:	0e 94 31 02 	call	0x462	; 0x462 <LCD_Command>
 52a:	8f e3       	ldi	r24, 0x3F	; 63
 52c:	9f e1       	ldi	r25, 0x1F	; 31
 52e:	01 97       	sbiw	r24, 0x01	; 1
 530:	f1 f7       	brne	.-4      	; 0x52e <LCD_init+0x4e>
 532:	00 c0       	rjmp	.+0      	; 0x534 <LCD_init+0x54>
 534:	00 00       	nop
 536:	08 95       	ret

00000538 <LCD_Send_Char>:
	_delay_ms(2);
	
}
void LCD_Send_Char(uint8 data){
 538:	cf 93       	push	r28
 53a:	c8 2f       	mov	r28, r24
	uint8 send_Data;
	send_Data =(LCD_Data_Port & (0x0F)) | (data &(0xF0));
 53c:	68 2f       	mov	r22, r24
 53e:	60 7f       	andi	r22, 0xF0	; 240
	DIO_WritePort(LCD_Data_Port,send_Data);
 540:	80 e0       	ldi	r24, 0x00	; 0
 542:	0e 94 69 01 	call	0x2d2	; 0x2d2 <DIO_WritePort>
	DIO_write(LCD_RS,STD_high);
 546:	61 e0       	ldi	r22, 0x01	; 1
 548:	89 e0       	ldi	r24, 0x09	; 9
 54a:	0e 94 e7 00 	call	0x1ce	; 0x1ce <DIO_write>
	DIO_write(LCD_E,STD_low);
 54e:	60 e0       	ldi	r22, 0x00	; 0
 550:	8b e0       	ldi	r24, 0x0B	; 11
 552:	0e 94 e7 00 	call	0x1ce	; 0x1ce <DIO_write>
 556:	8f e3       	ldi	r24, 0x3F	; 63
 558:	9f e1       	ldi	r25, 0x1F	; 31
 55a:	01 97       	sbiw	r24, 0x01	; 1
 55c:	f1 f7       	brne	.-4      	; 0x55a <LCD_Send_Char+0x22>
 55e:	00 c0       	rjmp	.+0      	; 0x560 <LCD_Send_Char+0x28>
 560:	00 00       	nop
	_delay_ms(2);
	DIO_write(LCD_E,STD_high);
 562:	61 e0       	ldi	r22, 0x01	; 1
 564:	8b e0       	ldi	r24, 0x0B	; 11
 566:	0e 94 e7 00 	call	0x1ce	; 0x1ce <DIO_write>
 56a:	8f e3       	ldi	r24, 0x3F	; 63
 56c:	9c e9       	ldi	r25, 0x9C	; 156
 56e:	01 97       	sbiw	r24, 0x01	; 1
 570:	f1 f7       	brne	.-4      	; 0x56e <LCD_Send_Char+0x36>
 572:	00 c0       	rjmp	.+0      	; 0x574 <LCD_Send_Char+0x3c>
 574:	00 00       	nop
	_delay_ms(10);
	send_Data =(LCD_Data_Port & (0x0F)) | (data << 4);
 576:	6c 2f       	mov	r22, r28
 578:	62 95       	swap	r22
 57a:	60 7f       	andi	r22, 0xF0	; 240
	DIO_WritePort(LCD_Data_Port,send_Data);
 57c:	80 e0       	ldi	r24, 0x00	; 0
 57e:	0e 94 69 01 	call	0x2d2	; 0x2d2 <DIO_WritePort>
	DIO_write(LCD_RS,STD_high);
 582:	61 e0       	ldi	r22, 0x01	; 1
 584:	89 e0       	ldi	r24, 0x09	; 9
 586:	0e 94 e7 00 	call	0x1ce	; 0x1ce <DIO_write>
	DIO_write(LCD_E,STD_low);
 58a:	60 e0       	ldi	r22, 0x00	; 0
 58c:	8b e0       	ldi	r24, 0x0B	; 11
 58e:	0e 94 e7 00 	call	0x1ce	; 0x1ce <DIO_write>
 592:	8f e3       	ldi	r24, 0x3F	; 63
 594:	9f e1       	ldi	r25, 0x1F	; 31
 596:	01 97       	sbiw	r24, 0x01	; 1
 598:	f1 f7       	brne	.-4      	; 0x596 <LCD_Send_Char+0x5e>
 59a:	00 c0       	rjmp	.+0      	; 0x59c <LCD_Send_Char+0x64>
 59c:	00 00       	nop
	_delay_ms(2);
	DIO_write(LCD_E,STD_high);
 59e:	61 e0       	ldi	r22, 0x01	; 1
 5a0:	8b e0       	ldi	r24, 0x0B	; 11
 5a2:	0e 94 e7 00 	call	0x1ce	; 0x1ce <DIO_write>
 5a6:	8f e3       	ldi	r24, 0x3F	; 63
 5a8:	9f e1       	ldi	r25, 0x1F	; 31
 5aa:	01 97       	sbiw	r24, 0x01	; 1
 5ac:	f1 f7       	brne	.-4      	; 0x5aa <LCD_Send_Char+0x72>
 5ae:	00 c0       	rjmp	.+0      	; 0x5b0 <LCD_Send_Char+0x78>
 5b0:	00 00       	nop
	_delay_ms(2);
}
 5b2:	cf 91       	pop	r28
 5b4:	08 95       	ret

000005b6 <LCD_string>:

void LCD_string(uint8 * string){
 5b6:	0f 93       	push	r16
 5b8:	1f 93       	push	r17
 5ba:	cf 93       	push	r28
 5bc:	8c 01       	movw	r16, r24
	uint8 i=0;
 5be:	c0 e0       	ldi	r28, 0x00	; 0
	while(string[i] != '\0'){
 5c0:	03 c0       	rjmp	.+6      	; 0x5c8 <LCD_string+0x12>
		LCD_Send_Char(string[i]);
 5c2:	0e 94 9c 02 	call	0x538	; 0x538 <LCD_Send_Char>
		i++;
 5c6:	cf 5f       	subi	r28, 0xFF	; 255
	_delay_ms(2);
}

void LCD_string(uint8 * string){
	uint8 i=0;
	while(string[i] != '\0'){
 5c8:	f8 01       	movw	r30, r16
 5ca:	ec 0f       	add	r30, r28
 5cc:	f1 1d       	adc	r31, r1
 5ce:	80 81       	ld	r24, Z
 5d0:	81 11       	cpse	r24, r1
 5d2:	f7 cf       	rjmp	.-18     	; 0x5c2 <LCD_string+0xc>
		LCD_Send_Char(string[i]);
		i++;
	}
}
 5d4:	cf 91       	pop	r28
 5d6:	1f 91       	pop	r17
 5d8:	0f 91       	pop	r16
 5da:	08 95       	ret

000005dc <LCD_GoTo>:

void LCD_GoTo (uint8 line,uint8 pos,uint8 * data){
 5dc:	cf 93       	push	r28
 5de:	df 93       	push	r29
 5e0:	ea 01       	movw	r28, r20
	switch(line){
 5e2:	81 30       	cpi	r24, 0x01	; 1
 5e4:	19 f0       	breq	.+6      	; 0x5ec <LCD_GoTo+0x10>
 5e6:	82 30       	cpi	r24, 0x02	; 2
 5e8:	51 f0       	breq	.+20     	; 0x5fe <LCD_GoTo+0x22>
 5ea:	11 c0       	rjmp	.+34     	; 0x60e <LCD_GoTo+0x32>
		case 1:
		LCD_Command((0x80|(pos & 0x0F)));  //POS 0->15
 5ec:	86 2f       	mov	r24, r22
 5ee:	8f 70       	andi	r24, 0x0F	; 15
 5f0:	80 68       	ori	r24, 0x80	; 128
 5f2:	0e 94 31 02 	call	0x462	; 0x462 <LCD_Command>
		LCD_string(data);
 5f6:	ce 01       	movw	r24, r28
 5f8:	0e 94 db 02 	call	0x5b6	; 0x5b6 <LCD_string>
		break;
 5fc:	08 c0       	rjmp	.+16     	; 0x60e <LCD_GoTo+0x32>
		case 2:
		LCD_Command((0xC0|(pos & 0x0F)));
 5fe:	86 2f       	mov	r24, r22
 600:	8f 70       	andi	r24, 0x0F	; 15
 602:	80 6c       	ori	r24, 0xC0	; 192
 604:	0e 94 31 02 	call	0x462	; 0x462 <LCD_Command>
		LCD_string(data);
 608:	ce 01       	movw	r24, r28
 60a:	0e 94 db 02 	call	0x5b6	; 0x5b6 <LCD_string>
		break;
	}
	
}
 60e:	df 91       	pop	r29
 610:	cf 91       	pop	r28
 612:	08 95       	ret

00000614 <main>:
#include "KeyPad.h"
#include "LCD.h"


int main(void)
{
 614:	cf 93       	push	r28
 616:	df 93       	push	r29
 618:	cd b7       	in	r28, 0x3d	; 61
 61a:	de b7       	in	r29, 0x3e	; 62
 61c:	29 97       	sbiw	r28, 0x09	; 9
 61e:	0f b6       	in	r0, 0x3f	; 63
 620:	f8 94       	cli
 622:	de bf       	out	0x3e, r29	; 62
 624:	0f be       	out	0x3f, r0	; 63
 626:	cd bf       	out	0x3d, r28	; 61
	DIO_Init();
 628:	0e 94 41 00 	call	0x82	; 0x82 <DIO_Init>
	LCD_init();
 62c:	0e 94 70 02 	call	0x4e0	; 0x4e0 <LCD_init>
	DDRD = 0b11110000;
 630:	80 ef       	ldi	r24, 0xF0	; 240
 632:	81 bb       	out	0x11, r24	; 17
	DDRC = 0b00000010;
 634:	82 e0       	ldi	r24, 0x02	; 2
 636:	84 bb       	out	0x14, r24	; 20
	//LCD_Send_Char('M');
	
	char arr[]="MOHAMED ";
 638:	89 e0       	ldi	r24, 0x09	; 9
 63a:	e8 e9       	ldi	r30, 0x98	; 152
 63c:	f0 e0       	ldi	r31, 0x00	; 0
 63e:	de 01       	movw	r26, r28
 640:	11 96       	adiw	r26, 0x01	; 1
 642:	01 90       	ld	r0, Z+
 644:	0d 92       	st	X+, r0
 646:	8a 95       	dec	r24
 648:	e1 f7       	brne	.-8      	; 0x642 <main+0x2e>
	LCD_string(arr);
 64a:	ce 01       	movw	r24, r28
 64c:	01 96       	adiw	r24, 0x01	; 1
 64e:	0e 94 db 02 	call	0x5b6	; 0x5b6 <LCD_string>
	LCD_GoTo (2,5,arr);
 652:	ae 01       	movw	r20, r28
 654:	4f 5f       	subi	r20, 0xFF	; 255
 656:	5f 4f       	sbci	r21, 0xFF	; 255
 658:	65 e0       	ldi	r22, 0x05	; 5
 65a:	82 e0       	ldi	r24, 0x02	; 2
 65c:	0e 94 ee 02 	call	0x5dc	; 0x5dc <LCD_GoTo>
	
	/* Replace with your application code */
	while (1)
	{
		check1();
 660:	0e 94 79 01 	call	0x2f2	; 0x2f2 <check1>
		check2();
 664:	0e 94 a7 01 	call	0x34e	; 0x34e <check2>
		check3();
 668:	0e 94 d5 01 	call	0x3aa	; 0x3aa <check3>
		check4();
 66c:	0e 94 03 02 	call	0x406	; 0x406 <check4>
 670:	f7 cf       	rjmp	.-18     	; 0x660 <main+0x4c>

00000672 <_exit>:
 672:	f8 94       	cli

00000674 <__stop_program>:
 674:	ff cf       	rjmp	.-2      	; 0x674 <__stop_program>
