
RTOS_semaphore.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001a16  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000036  00800060  00001a16  00001aaa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000640  00800096  00800096  00001ae0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001ae0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001b10  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000390  00000000  00000000  00001b4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004391  00000000  00000000  00001edc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e9d  00000000  00000000  0000626d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000026b0  00000000  00000000  0000710a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000af8  00000000  00000000  000097bc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000014af  00000000  00000000  0000a2b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00004270  00000000  00000000  0000b763  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000003a8  00000000  00000000  0000f9d3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e1       	ldi	r30, 0x16	; 22
      68:	fa e1       	ldi	r31, 0x1A	; 26
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a6 39       	cpi	r26, 0x96	; 150
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	26 e0       	ldi	r18, 0x06	; 6
      78:	a6 e9       	ldi	r26, 0x96	; 150
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a6 3d       	cpi	r26, 0xD6	; 214
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 3e 01 	call	0x27c	; 0x27c <main>
      8a:	0c 94 09 0d 	jmp	0x1a12	; 0x1a12 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
      92:	cf 93       	push	r28
      94:	df 93       	push	r29
      96:	ec 01       	movw	r28, r24
            }
        }
    }
    #endif /* if ( portBYTE_ALIGNMENT != 1 ) */

    vTaskSuspendAll();
      98:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <vTaskSuspendAll>
    {
        if( pucAlignedHeap == NULL )
      9c:	80 91 96 00 	lds	r24, 0x0096	; 0x800096 <__data_end>
      a0:	90 91 97 00 	lds	r25, 0x0097	; 0x800097 <__data_end+0x1>
      a4:	89 2b       	or	r24, r25
      a6:	31 f4       	brne	.+12     	; 0xb4 <pvPortMalloc+0x22>
        {
            /* Ensure the heap starts on a correctly aligned boundary. */
            pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) & ucHeap[ portBYTE_ALIGNMENT - 1 ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
      a8:	8a e9       	ldi	r24, 0x9A	; 154
      aa:	90 e0       	ldi	r25, 0x00	; 0
      ac:	90 93 97 00 	sts	0x0097, r25	; 0x800097 <__data_end+0x1>
      b0:	80 93 96 00 	sts	0x0096, r24	; 0x800096 <__data_end>
        }

        /* Check there is enough room left for the allocation and. */
        if( ( xWantedSize > 0 ) &&                                /* valid size */
      b4:	20 97       	sbiw	r28, 0x00	; 0
      b6:	c9 f0       	breq	.+50     	; 0xea <pvPortMalloc+0x58>
            ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
      b8:	80 91 98 00 	lds	r24, 0x0098	; 0x800098 <xNextFreeByte>
      bc:	90 91 99 00 	lds	r25, 0x0099	; 0x800099 <xNextFreeByte+0x1>
      c0:	9e 01       	movw	r18, r28
      c2:	28 0f       	add	r18, r24
      c4:	39 1f       	adc	r19, r25
            /* Ensure the heap starts on a correctly aligned boundary. */
            pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) & ucHeap[ portBYTE_ALIGNMENT - 1 ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
        }

        /* Check there is enough room left for the allocation and. */
        if( ( xWantedSize > 0 ) &&                                /* valid size */
      c6:	2b 3d       	cpi	r18, 0xDB	; 219
      c8:	45 e0       	ldi	r20, 0x05	; 5
      ca:	34 07       	cpc	r19, r20
      cc:	88 f4       	brcc	.+34     	; 0xf0 <pvPortMalloc+0x5e>
            ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
      ce:	82 17       	cp	r24, r18
      d0:	93 07       	cpc	r25, r19
      d2:	88 f4       	brcc	.+34     	; 0xf6 <pvPortMalloc+0x64>
            ( ( xNextFreeByte + xWantedSize ) > xNextFreeByte ) ) /* Check for overflow. */
        {
            /* Return the next free byte then increment the index past this
             * block. */
            pvReturn = pucAlignedHeap + xNextFreeByte;
      d4:	c0 91 96 00 	lds	r28, 0x0096	; 0x800096 <__data_end>
      d8:	d0 91 97 00 	lds	r29, 0x0097	; 0x800097 <__data_end+0x1>
      dc:	c8 0f       	add	r28, r24
      de:	d9 1f       	adc	r29, r25
            xNextFreeByte += xWantedSize;
      e0:	30 93 99 00 	sts	0x0099, r19	; 0x800099 <xNextFreeByte+0x1>
      e4:	20 93 98 00 	sts	0x0098, r18	; 0x800098 <xNextFreeByte>
      e8:	08 c0       	rjmp	.+16     	; 0xfa <pvPortMalloc+0x68>

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
    void * pvReturn = NULL;
      ea:	c0 e0       	ldi	r28, 0x00	; 0
      ec:	d0 e0       	ldi	r29, 0x00	; 0
      ee:	05 c0       	rjmp	.+10     	; 0xfa <pvPortMalloc+0x68>
      f0:	c0 e0       	ldi	r28, 0x00	; 0
      f2:	d0 e0       	ldi	r29, 0x00	; 0
      f4:	02 c0       	rjmp	.+4      	; 0xfa <pvPortMalloc+0x68>
      f6:	c0 e0       	ldi	r28, 0x00	; 0
      f8:	d0 e0       	ldi	r29, 0x00	; 0
            xNextFreeByte += xWantedSize;
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
      fa:	0e 94 02 09 	call	0x1204	; 0x1204 <xTaskResumeAll>
        }
    }
    #endif

    return pvReturn;
}
      fe:	ce 01       	movw	r24, r28
     100:	df 91       	pop	r29
     102:	cf 91       	pop	r28
     104:	08 95       	ret

00000106 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
     106:	08 95       	ret

00000108 <vListInitialise>:

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;

    ( pxList->uxNumberOfItems )++;
}
     108:	fc 01       	movw	r30, r24
     10a:	03 96       	adiw	r24, 0x03	; 3
     10c:	92 83       	std	Z+2, r25	; 0x02
     10e:	81 83       	std	Z+1, r24	; 0x01
     110:	2f ef       	ldi	r18, 0xFF	; 255
     112:	3f ef       	ldi	r19, 0xFF	; 255
     114:	34 83       	std	Z+4, r19	; 0x04
     116:	23 83       	std	Z+3, r18	; 0x03
     118:	96 83       	std	Z+6, r25	; 0x06
     11a:	85 83       	std	Z+5, r24	; 0x05
     11c:	90 87       	std	Z+8, r25	; 0x08
     11e:	87 83       	std	Z+7, r24	; 0x07
     120:	10 82       	st	Z, r1
     122:	08 95       	ret

00000124 <vListInitialiseItem>:
     124:	fc 01       	movw	r30, r24
     126:	11 86       	std	Z+9, r1	; 0x09
     128:	10 86       	std	Z+8, r1	; 0x08
     12a:	08 95       	ret

0000012c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
     12c:	cf 93       	push	r28
     12e:	df 93       	push	r29
     130:	eb 01       	movw	r28, r22
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     132:	48 81       	ld	r20, Y
     134:	59 81       	ldd	r21, Y+1	; 0x01
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
     136:	4f 3f       	cpi	r20, 0xFF	; 255
     138:	2f ef       	ldi	r18, 0xFF	; 255
     13a:	52 07       	cpc	r21, r18
     13c:	21 f4       	brne	.+8      	; 0x146 <vListInsert+0x1a>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
     13e:	fc 01       	movw	r30, r24
     140:	a7 81       	ldd	r26, Z+7	; 0x07
     142:	b0 85       	ldd	r27, Z+8	; 0x08
     144:	0d c0       	rjmp	.+26     	; 0x160 <vListInsert+0x34>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
     146:	dc 01       	movw	r26, r24
     148:	13 96       	adiw	r26, 0x03	; 3
     14a:	01 c0       	rjmp	.+2      	; 0x14e <vListInsert+0x22>
     14c:	df 01       	movw	r26, r30
     14e:	12 96       	adiw	r26, 0x02	; 2
     150:	ed 91       	ld	r30, X+
     152:	fc 91       	ld	r31, X
     154:	13 97       	sbiw	r26, 0x03	; 3
     156:	20 81       	ld	r18, Z
     158:	31 81       	ldd	r19, Z+1	; 0x01
     15a:	42 17       	cp	r20, r18
     15c:	53 07       	cpc	r21, r19
     15e:	b0 f7       	brcc	.-20     	; 0x14c <vListInsert+0x20>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
     160:	12 96       	adiw	r26, 0x02	; 2
     162:	ed 91       	ld	r30, X+
     164:	fc 91       	ld	r31, X
     166:	13 97       	sbiw	r26, 0x03	; 3
     168:	fb 83       	std	Y+3, r31	; 0x03
     16a:	ea 83       	std	Y+2, r30	; 0x02
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     16c:	d5 83       	std	Z+5, r29	; 0x05
     16e:	c4 83       	std	Z+4, r28	; 0x04
    pxNewListItem->pxPrevious = pxIterator;
     170:	bd 83       	std	Y+5, r27	; 0x05
     172:	ac 83       	std	Y+4, r26	; 0x04
    pxIterator->pxNext = pxNewListItem;
     174:	13 96       	adiw	r26, 0x03	; 3
     176:	dc 93       	st	X, r29
     178:	ce 93       	st	-X, r28
     17a:	12 97       	sbiw	r26, 0x02	; 2

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
     17c:	99 87       	std	Y+9, r25	; 0x09
     17e:	88 87       	std	Y+8, r24	; 0x08

    ( pxList->uxNumberOfItems )++;
     180:	fc 01       	movw	r30, r24
     182:	20 81       	ld	r18, Z
     184:	2f 5f       	subi	r18, 0xFF	; 255
     186:	20 83       	st	Z, r18
}
     188:	df 91       	pop	r29
     18a:	cf 91       	pop	r28
     18c:	08 95       	ret

0000018e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     18e:	cf 93       	push	r28
     190:	df 93       	push	r29
     192:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
     194:	a0 85       	ldd	r26, Z+8	; 0x08
     196:	b1 85       	ldd	r27, Z+9	; 0x09

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     198:	c2 81       	ldd	r28, Z+2	; 0x02
     19a:	d3 81       	ldd	r29, Z+3	; 0x03
     19c:	84 81       	ldd	r24, Z+4	; 0x04
     19e:	95 81       	ldd	r25, Z+5	; 0x05
     1a0:	9d 83       	std	Y+5, r25	; 0x05
     1a2:	8c 83       	std	Y+4, r24	; 0x04
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     1a4:	c4 81       	ldd	r28, Z+4	; 0x04
     1a6:	d5 81       	ldd	r29, Z+5	; 0x05
     1a8:	82 81       	ldd	r24, Z+2	; 0x02
     1aa:	93 81       	ldd	r25, Z+3	; 0x03
     1ac:	9b 83       	std	Y+3, r25	; 0x03
     1ae:	8a 83       	std	Y+2, r24	; 0x02

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
     1b0:	11 96       	adiw	r26, 0x01	; 1
     1b2:	8d 91       	ld	r24, X+
     1b4:	9c 91       	ld	r25, X
     1b6:	12 97       	sbiw	r26, 0x02	; 2
     1b8:	e8 17       	cp	r30, r24
     1ba:	f9 07       	cpc	r31, r25
     1bc:	31 f4       	brne	.+12     	; 0x1ca <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
     1be:	84 81       	ldd	r24, Z+4	; 0x04
     1c0:	95 81       	ldd	r25, Z+5	; 0x05
     1c2:	12 96       	adiw	r26, 0x02	; 2
     1c4:	9c 93       	st	X, r25
     1c6:	8e 93       	st	-X, r24
     1c8:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
     1ca:	11 86       	std	Z+9, r1	; 0x09
     1cc:	10 86       	std	Z+8, r1	; 0x08
    ( pxList->uxNumberOfItems )--;
     1ce:	8c 91       	ld	r24, X
     1d0:	81 50       	subi	r24, 0x01	; 1
     1d2:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
     1d4:	8c 91       	ld	r24, X
}
     1d6:	df 91       	pop	r29
     1d8:	cf 91       	pop	r28
     1da:	08 95       	ret

000001dc <printTask3>:
		xSemaphoreGive(xSemaphore);
		vTaskDelay(500/ portTICK_PERIOD_MS);
	}
}

void printTask3(void * string){
     1dc:	ec 01       	movw	r28, r24
	
	while(1){
		xSemaphoreTake(xSemaphore,5000/ portTICK_PERIOD_MS);
     1de:	68 e8       	ldi	r22, 0x88	; 136
     1e0:	73 e1       	ldi	r23, 0x13	; 19
     1e2:	80 91 d4 06 	lds	r24, 0x06D4	; 0x8006d4 <xSemaphore>
     1e6:	90 91 d5 06 	lds	r25, 0x06D5	; 0x8006d5 <xSemaphore+0x1>
     1ea:	0e 94 f6 04 	call	0x9ec	; 0x9ec <xQueueSemaphoreTake>
		UART_SENDSTRING((char *)string) ;
     1ee:	ce 01       	movw	r24, r28
     1f0:	0e 94 d9 0c 	call	0x19b2	; 0x19b2 <UART_SENDSTRING>
		xSemaphoreGive(xSemaphore);
     1f4:	20 e0       	ldi	r18, 0x00	; 0
     1f6:	40 e0       	ldi	r20, 0x00	; 0
     1f8:	50 e0       	ldi	r21, 0x00	; 0
     1fa:	60 e0       	ldi	r22, 0x00	; 0
     1fc:	70 e0       	ldi	r23, 0x00	; 0
     1fe:	80 91 d4 06 	lds	r24, 0x06D4	; 0x8006d4 <xSemaphore>
     202:	90 91 d5 06 	lds	r25, 0x06D5	; 0x8006d5 <xSemaphore+0x1>
     206:	0e 94 46 04 	call	0x88c	; 0x88c <xQueueGenericSend>
     20a:	e9 cf       	rjmp	.-46     	; 0x1de <printTask3+0x2>

0000020c <printTask1>:
    {
    }
}


void printTask1(void * string){
     20c:	ec 01       	movw	r28, r24
	while(1){
		xSemaphoreTake(xSemaphore,500/ portTICK_PERIOD_MS);
     20e:	64 ef       	ldi	r22, 0xF4	; 244
     210:	71 e0       	ldi	r23, 0x01	; 1
     212:	80 91 d4 06 	lds	r24, 0x06D4	; 0x8006d4 <xSemaphore>
     216:	90 91 d5 06 	lds	r25, 0x06D5	; 0x8006d5 <xSemaphore+0x1>
     21a:	0e 94 f6 04 	call	0x9ec	; 0x9ec <xQueueSemaphoreTake>
		UART_SENDSTRING((char *)string) ;
     21e:	ce 01       	movw	r24, r28
     220:	0e 94 d9 0c 	call	0x19b2	; 0x19b2 <UART_SENDSTRING>
		xSemaphoreGive(xSemaphore);
     224:	20 e0       	ldi	r18, 0x00	; 0
     226:	40 e0       	ldi	r20, 0x00	; 0
     228:	50 e0       	ldi	r21, 0x00	; 0
     22a:	60 e0       	ldi	r22, 0x00	; 0
     22c:	70 e0       	ldi	r23, 0x00	; 0
     22e:	80 91 d4 06 	lds	r24, 0x06D4	; 0x8006d4 <xSemaphore>
     232:	90 91 d5 06 	lds	r25, 0x06D5	; 0x8006d5 <xSemaphore+0x1>
     236:	0e 94 46 04 	call	0x88c	; 0x88c <xQueueGenericSend>
		vTaskDelay(500/ portTICK_PERIOD_MS);
     23a:	84 ef       	ldi	r24, 0xF4	; 244
     23c:	91 e0       	ldi	r25, 0x01	; 1
     23e:	0e 94 d7 09 	call	0x13ae	; 0x13ae <vTaskDelay>
     242:	e5 cf       	rjmp	.-54     	; 0x20e <printTask1+0x2>

00000244 <printTask2>:
	}
}

void printTask2(void * string){
     244:	ec 01       	movw	r28, r24
	
	while(1){
		xSemaphoreTake(xSemaphore,500/ portTICK_PERIOD_MS);
     246:	64 ef       	ldi	r22, 0xF4	; 244
     248:	71 e0       	ldi	r23, 0x01	; 1
     24a:	80 91 d4 06 	lds	r24, 0x06D4	; 0x8006d4 <xSemaphore>
     24e:	90 91 d5 06 	lds	r25, 0x06D5	; 0x8006d5 <xSemaphore+0x1>
     252:	0e 94 f6 04 	call	0x9ec	; 0x9ec <xQueueSemaphoreTake>
		UART_SENDSTRING((char *)string) ;
     256:	ce 01       	movw	r24, r28
     258:	0e 94 d9 0c 	call	0x19b2	; 0x19b2 <UART_SENDSTRING>
		//_delay_ms(200);
		xSemaphoreGive(xSemaphore);
     25c:	20 e0       	ldi	r18, 0x00	; 0
     25e:	40 e0       	ldi	r20, 0x00	; 0
     260:	50 e0       	ldi	r21, 0x00	; 0
     262:	60 e0       	ldi	r22, 0x00	; 0
     264:	70 e0       	ldi	r23, 0x00	; 0
     266:	80 91 d4 06 	lds	r24, 0x06D4	; 0x8006d4 <xSemaphore>
     26a:	90 91 d5 06 	lds	r25, 0x06D5	; 0x8006d5 <xSemaphore+0x1>
     26e:	0e 94 46 04 	call	0x88c	; 0x88c <xQueueGenericSend>
		vTaskDelay(500/ portTICK_PERIOD_MS);
     272:	84 ef       	ldi	r24, 0xF4	; 244
     274:	91 e0       	ldi	r25, 0x01	; 1
     276:	0e 94 d7 09 	call	0x13ae	; 0x13ae <vTaskDelay>
     27a:	e5 cf       	rjmp	.-54     	; 0x246 <printTask2+0x2>

0000027c <main>:
void printTask3(void * string);
SemaphoreHandle_t xSemaphore;

int main(void)
{
	UART_INT();
     27c:	0e 94 cd 0c 	call	0x199a	; 0x199a <UART_INT>
	xSemaphore = xSemaphoreCreateMutex();
     280:	81 e0       	ldi	r24, 0x01	; 1
     282:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <xQueueCreateMutex>
     286:	90 93 d5 06 	sts	0x06D5, r25	; 0x8006d5 <xSemaphore+0x1>
     28a:	80 93 d4 06 	sts	0x06D4, r24	; 0x8006d4 <xSemaphore>
	xTaskCreate(printTask1,"print1",200,(void *)"print1\r\n",1,NULL);
     28e:	e1 2c       	mov	r14, r1
     290:	f1 2c       	mov	r15, r1
     292:	01 e0       	ldi	r16, 0x01	; 1
     294:	21 e6       	ldi	r18, 0x61	; 97
     296:	30 e0       	ldi	r19, 0x00	; 0
     298:	48 ec       	ldi	r20, 0xC8	; 200
     29a:	50 e0       	ldi	r21, 0x00	; 0
     29c:	6a e6       	ldi	r22, 0x6A	; 106
     29e:	70 e0       	ldi	r23, 0x00	; 0
     2a0:	86 e0       	ldi	r24, 0x06	; 6
     2a2:	91 e0       	ldi	r25, 0x01	; 1
     2a4:	0e 94 5d 07 	call	0xeba	; 0xeba <xTaskCreate>
	xTaskCreate(printTask2,"print2",200,(void *)"print2\r\n",2,NULL);
     2a8:	02 e0       	ldi	r16, 0x02	; 2
     2aa:	21 e7       	ldi	r18, 0x71	; 113
     2ac:	30 e0       	ldi	r19, 0x00	; 0
     2ae:	48 ec       	ldi	r20, 0xC8	; 200
     2b0:	50 e0       	ldi	r21, 0x00	; 0
     2b2:	6a e7       	ldi	r22, 0x7A	; 122
     2b4:	70 e0       	ldi	r23, 0x00	; 0
     2b6:	82 e2       	ldi	r24, 0x22	; 34
     2b8:	91 e0       	ldi	r25, 0x01	; 1
     2ba:	0e 94 5d 07 	call	0xeba	; 0xeba <xTaskCreate>
	xTaskCreate(printTask3,"print3",200,(void *)"print3\r\n",3,NULL);
     2be:	03 e0       	ldi	r16, 0x03	; 3
     2c0:	21 e8       	ldi	r18, 0x81	; 129
     2c2:	30 e0       	ldi	r19, 0x00	; 0
     2c4:	48 ec       	ldi	r20, 0xC8	; 200
     2c6:	50 e0       	ldi	r21, 0x00	; 0
     2c8:	6a e8       	ldi	r22, 0x8A	; 138
     2ca:	70 e0       	ldi	r23, 0x00	; 0
     2cc:	8e ee       	ldi	r24, 0xEE	; 238
     2ce:	90 e0       	ldi	r25, 0x00	; 0
     2d0:	0e 94 5d 07 	call	0xeba	; 0xeba <xTaskCreate>
	vTaskStartScheduler();
     2d4:	0e 94 b6 07 	call	0xf6c	; 0xf6c <vTaskStartScheduler>
	xSemaphoreGive(xSemaphore);
     2d8:	20 e0       	ldi	r18, 0x00	; 0
     2da:	40 e0       	ldi	r20, 0x00	; 0
     2dc:	50 e0       	ldi	r21, 0x00	; 0
     2de:	60 e0       	ldi	r22, 0x00	; 0
     2e0:	70 e0       	ldi	r23, 0x00	; 0
     2e2:	80 91 d4 06 	lds	r24, 0x06D4	; 0x8006d4 <xSemaphore>
     2e6:	90 91 d5 06 	lds	r25, 0x06D5	; 0x8006d5 <xSemaphore+0x1>
     2ea:	0e 94 46 04 	call	0x88c	; 0x88c <xQueueGenericSend>
     2ee:	ff cf       	rjmp	.-2      	; 0x2ee <main+0x72>

000002f0 <prvSetupTimerInterrupt>:
	return pdTRUE;
}
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
     2f0:	1b bc       	out	0x2b, r1	; 43
     2f2:	89 ef       	ldi	r24, 0xF9	; 249
     2f4:	8a bd       	out	0x2a, r24	; 42
     2f6:	8b e0       	ldi	r24, 0x0B	; 11
     2f8:	8e bd       	out	0x2e, r24	; 46
     2fa:	89 b7       	in	r24, 0x39	; 57
     2fc:	80 61       	ori	r24, 0x10	; 16
     2fe:	89 bf       	out	0x39, r24	; 57
     300:	08 95       	ret

00000302 <pxPortInitialiseStack>:
     302:	31 e1       	ldi	r19, 0x11	; 17
     304:	fc 01       	movw	r30, r24
     306:	30 83       	st	Z, r19
     308:	31 97       	sbiw	r30, 0x01	; 1
     30a:	22 e2       	ldi	r18, 0x22	; 34
     30c:	20 83       	st	Z, r18
     30e:	31 97       	sbiw	r30, 0x01	; 1
     310:	a3 e3       	ldi	r26, 0x33	; 51
     312:	a0 83       	st	Z, r26
     314:	31 97       	sbiw	r30, 0x01	; 1
     316:	60 83       	st	Z, r22
     318:	31 97       	sbiw	r30, 0x01	; 1
     31a:	70 83       	st	Z, r23
     31c:	31 97       	sbiw	r30, 0x01	; 1
     31e:	10 82       	st	Z, r1
     320:	31 97       	sbiw	r30, 0x01	; 1
     322:	60 e8       	ldi	r22, 0x80	; 128
     324:	60 83       	st	Z, r22
     326:	31 97       	sbiw	r30, 0x01	; 1
     328:	10 82       	st	Z, r1
     32a:	31 97       	sbiw	r30, 0x01	; 1
     32c:	62 e0       	ldi	r22, 0x02	; 2
     32e:	60 83       	st	Z, r22
     330:	31 97       	sbiw	r30, 0x01	; 1
     332:	63 e0       	ldi	r22, 0x03	; 3
     334:	60 83       	st	Z, r22
     336:	31 97       	sbiw	r30, 0x01	; 1
     338:	64 e0       	ldi	r22, 0x04	; 4
     33a:	60 83       	st	Z, r22
     33c:	31 97       	sbiw	r30, 0x01	; 1
     33e:	65 e0       	ldi	r22, 0x05	; 5
     340:	60 83       	st	Z, r22
     342:	31 97       	sbiw	r30, 0x01	; 1
     344:	66 e0       	ldi	r22, 0x06	; 6
     346:	60 83       	st	Z, r22
     348:	31 97       	sbiw	r30, 0x01	; 1
     34a:	67 e0       	ldi	r22, 0x07	; 7
     34c:	60 83       	st	Z, r22
     34e:	31 97       	sbiw	r30, 0x01	; 1
     350:	68 e0       	ldi	r22, 0x08	; 8
     352:	60 83       	st	Z, r22
     354:	31 97       	sbiw	r30, 0x01	; 1
     356:	69 e0       	ldi	r22, 0x09	; 9
     358:	60 83       	st	Z, r22
     35a:	31 97       	sbiw	r30, 0x01	; 1
     35c:	60 e1       	ldi	r22, 0x10	; 16
     35e:	60 83       	st	Z, r22
     360:	31 97       	sbiw	r30, 0x01	; 1
     362:	30 83       	st	Z, r19
     364:	31 97       	sbiw	r30, 0x01	; 1
     366:	32 e1       	ldi	r19, 0x12	; 18
     368:	30 83       	st	Z, r19
     36a:	31 97       	sbiw	r30, 0x01	; 1
     36c:	33 e1       	ldi	r19, 0x13	; 19
     36e:	30 83       	st	Z, r19
     370:	31 97       	sbiw	r30, 0x01	; 1
     372:	34 e1       	ldi	r19, 0x14	; 20
     374:	30 83       	st	Z, r19
     376:	31 97       	sbiw	r30, 0x01	; 1
     378:	35 e1       	ldi	r19, 0x15	; 21
     37a:	30 83       	st	Z, r19
     37c:	31 97       	sbiw	r30, 0x01	; 1
     37e:	36 e1       	ldi	r19, 0x16	; 22
     380:	30 83       	st	Z, r19
     382:	31 97       	sbiw	r30, 0x01	; 1
     384:	37 e1       	ldi	r19, 0x17	; 23
     386:	30 83       	st	Z, r19
     388:	31 97       	sbiw	r30, 0x01	; 1
     38a:	38 e1       	ldi	r19, 0x18	; 24
     38c:	30 83       	st	Z, r19
     38e:	31 97       	sbiw	r30, 0x01	; 1
     390:	39 e1       	ldi	r19, 0x19	; 25
     392:	30 83       	st	Z, r19
     394:	31 97       	sbiw	r30, 0x01	; 1
     396:	30 e2       	ldi	r19, 0x20	; 32
     398:	30 83       	st	Z, r19
     39a:	31 97       	sbiw	r30, 0x01	; 1
     39c:	31 e2       	ldi	r19, 0x21	; 33
     39e:	30 83       	st	Z, r19
     3a0:	31 97       	sbiw	r30, 0x01	; 1
     3a2:	20 83       	st	Z, r18
     3a4:	31 97       	sbiw	r30, 0x01	; 1
     3a6:	23 e2       	ldi	r18, 0x23	; 35
     3a8:	20 83       	st	Z, r18
     3aa:	31 97       	sbiw	r30, 0x01	; 1
     3ac:	40 83       	st	Z, r20
     3ae:	31 97       	sbiw	r30, 0x01	; 1
     3b0:	50 83       	st	Z, r21
     3b2:	31 97       	sbiw	r30, 0x01	; 1
     3b4:	26 e2       	ldi	r18, 0x26	; 38
     3b6:	20 83       	st	Z, r18
     3b8:	31 97       	sbiw	r30, 0x01	; 1
     3ba:	27 e2       	ldi	r18, 0x27	; 39
     3bc:	20 83       	st	Z, r18
     3be:	31 97       	sbiw	r30, 0x01	; 1
     3c0:	28 e2       	ldi	r18, 0x28	; 40
     3c2:	20 83       	st	Z, r18
     3c4:	31 97       	sbiw	r30, 0x01	; 1
     3c6:	29 e2       	ldi	r18, 0x29	; 41
     3c8:	20 83       	st	Z, r18
     3ca:	31 97       	sbiw	r30, 0x01	; 1
     3cc:	20 e3       	ldi	r18, 0x30	; 48
     3ce:	20 83       	st	Z, r18
     3d0:	31 97       	sbiw	r30, 0x01	; 1
     3d2:	21 e3       	ldi	r18, 0x31	; 49
     3d4:	20 83       	st	Z, r18
     3d6:	86 97       	sbiw	r24, 0x26	; 38
     3d8:	08 95       	ret

000003da <xPortStartScheduler>:
     3da:	0e 94 78 01 	call	0x2f0	; 0x2f0 <prvSetupTimerInterrupt>
     3de:	a0 91 d2 06 	lds	r26, 0x06D2	; 0x8006d2 <pxCurrentTCB>
     3e2:	b0 91 d3 06 	lds	r27, 0x06D3	; 0x8006d3 <pxCurrentTCB+0x1>
     3e6:	cd 91       	ld	r28, X+
     3e8:	cd bf       	out	0x3d, r28	; 61
     3ea:	dd 91       	ld	r29, X+
     3ec:	de bf       	out	0x3e, r29	; 62
     3ee:	ff 91       	pop	r31
     3f0:	ef 91       	pop	r30
     3f2:	df 91       	pop	r29
     3f4:	cf 91       	pop	r28
     3f6:	bf 91       	pop	r27
     3f8:	af 91       	pop	r26
     3fa:	9f 91       	pop	r25
     3fc:	8f 91       	pop	r24
     3fe:	7f 91       	pop	r23
     400:	6f 91       	pop	r22
     402:	5f 91       	pop	r21
     404:	4f 91       	pop	r20
     406:	3f 91       	pop	r19
     408:	2f 91       	pop	r18
     40a:	1f 91       	pop	r17
     40c:	0f 91       	pop	r16
     40e:	ff 90       	pop	r15
     410:	ef 90       	pop	r14
     412:	df 90       	pop	r13
     414:	cf 90       	pop	r12
     416:	bf 90       	pop	r11
     418:	af 90       	pop	r10
     41a:	9f 90       	pop	r9
     41c:	8f 90       	pop	r8
     41e:	7f 90       	pop	r7
     420:	6f 90       	pop	r6
     422:	5f 90       	pop	r5
     424:	4f 90       	pop	r4
     426:	3f 90       	pop	r3
     428:	2f 90       	pop	r2
     42a:	1f 90       	pop	r1
     42c:	0f 90       	pop	r0
     42e:	0f be       	out	0x3f, r0	; 63
     430:	0f 90       	pop	r0
     432:	08 95       	ret
     434:	81 e0       	ldi	r24, 0x01	; 1
     436:	08 95       	ret

00000438 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
     438:	0f 92       	push	r0
     43a:	0f b6       	in	r0, 0x3f	; 63
     43c:	f8 94       	cli
     43e:	0f 92       	push	r0
     440:	1f 92       	push	r1
     442:	11 24       	eor	r1, r1
     444:	2f 92       	push	r2
     446:	3f 92       	push	r3
     448:	4f 92       	push	r4
     44a:	5f 92       	push	r5
     44c:	6f 92       	push	r6
     44e:	7f 92       	push	r7
     450:	8f 92       	push	r8
     452:	9f 92       	push	r9
     454:	af 92       	push	r10
     456:	bf 92       	push	r11
     458:	cf 92       	push	r12
     45a:	df 92       	push	r13
     45c:	ef 92       	push	r14
     45e:	ff 92       	push	r15
     460:	0f 93       	push	r16
     462:	1f 93       	push	r17
     464:	2f 93       	push	r18
     466:	3f 93       	push	r19
     468:	4f 93       	push	r20
     46a:	5f 93       	push	r21
     46c:	6f 93       	push	r22
     46e:	7f 93       	push	r23
     470:	8f 93       	push	r24
     472:	9f 93       	push	r25
     474:	af 93       	push	r26
     476:	bf 93       	push	r27
     478:	cf 93       	push	r28
     47a:	df 93       	push	r29
     47c:	ef 93       	push	r30
     47e:	ff 93       	push	r31
     480:	a0 91 d2 06 	lds	r26, 0x06D2	; 0x8006d2 <pxCurrentTCB>
     484:	b0 91 d3 06 	lds	r27, 0x06D3	; 0x8006d3 <pxCurrentTCB+0x1>
     488:	0d b6       	in	r0, 0x3d	; 61
     48a:	0d 92       	st	X+, r0
     48c:	0e b6       	in	r0, 0x3e	; 62
     48e:	0d 92       	st	X+, r0
	vTaskSwitchContext();
     490:	0e 94 ed 09 	call	0x13da	; 0x13da <vTaskSwitchContext>
	portRESTORE_CONTEXT();
     494:	a0 91 d2 06 	lds	r26, 0x06D2	; 0x8006d2 <pxCurrentTCB>
     498:	b0 91 d3 06 	lds	r27, 0x06D3	; 0x8006d3 <pxCurrentTCB+0x1>
     49c:	cd 91       	ld	r28, X+
     49e:	cd bf       	out	0x3d, r28	; 61
     4a0:	dd 91       	ld	r29, X+
     4a2:	de bf       	out	0x3e, r29	; 62
     4a4:	ff 91       	pop	r31
     4a6:	ef 91       	pop	r30
     4a8:	df 91       	pop	r29
     4aa:	cf 91       	pop	r28
     4ac:	bf 91       	pop	r27
     4ae:	af 91       	pop	r26
     4b0:	9f 91       	pop	r25
     4b2:	8f 91       	pop	r24
     4b4:	7f 91       	pop	r23
     4b6:	6f 91       	pop	r22
     4b8:	5f 91       	pop	r21
     4ba:	4f 91       	pop	r20
     4bc:	3f 91       	pop	r19
     4be:	2f 91       	pop	r18
     4c0:	1f 91       	pop	r17
     4c2:	0f 91       	pop	r16
     4c4:	ff 90       	pop	r15
     4c6:	ef 90       	pop	r14
     4c8:	df 90       	pop	r13
     4ca:	cf 90       	pop	r12
     4cc:	bf 90       	pop	r11
     4ce:	af 90       	pop	r10
     4d0:	9f 90       	pop	r9
     4d2:	8f 90       	pop	r8
     4d4:	7f 90       	pop	r7
     4d6:	6f 90       	pop	r6
     4d8:	5f 90       	pop	r5
     4da:	4f 90       	pop	r4
     4dc:	3f 90       	pop	r3
     4de:	2f 90       	pop	r2
     4e0:	1f 90       	pop	r1
     4e2:	0f 90       	pop	r0
     4e4:	0f be       	out	0x3f, r0	; 63
     4e6:	0f 90       	pop	r0

	asm volatile ( "ret" );
     4e8:	08 95       	ret

000004ea <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
     4ea:	0f 92       	push	r0
     4ec:	0f b6       	in	r0, 0x3f	; 63
     4ee:	f8 94       	cli
     4f0:	0f 92       	push	r0
     4f2:	1f 92       	push	r1
     4f4:	11 24       	eor	r1, r1
     4f6:	2f 92       	push	r2
     4f8:	3f 92       	push	r3
     4fa:	4f 92       	push	r4
     4fc:	5f 92       	push	r5
     4fe:	6f 92       	push	r6
     500:	7f 92       	push	r7
     502:	8f 92       	push	r8
     504:	9f 92       	push	r9
     506:	af 92       	push	r10
     508:	bf 92       	push	r11
     50a:	cf 92       	push	r12
     50c:	df 92       	push	r13
     50e:	ef 92       	push	r14
     510:	ff 92       	push	r15
     512:	0f 93       	push	r16
     514:	1f 93       	push	r17
     516:	2f 93       	push	r18
     518:	3f 93       	push	r19
     51a:	4f 93       	push	r20
     51c:	5f 93       	push	r21
     51e:	6f 93       	push	r22
     520:	7f 93       	push	r23
     522:	8f 93       	push	r24
     524:	9f 93       	push	r25
     526:	af 93       	push	r26
     528:	bf 93       	push	r27
     52a:	cf 93       	push	r28
     52c:	df 93       	push	r29
     52e:	ef 93       	push	r30
     530:	ff 93       	push	r31
     532:	a0 91 d2 06 	lds	r26, 0x06D2	; 0x8006d2 <pxCurrentTCB>
     536:	b0 91 d3 06 	lds	r27, 0x06D3	; 0x8006d3 <pxCurrentTCB+0x1>
     53a:	0d b6       	in	r0, 0x3d	; 61
     53c:	0d 92       	st	X+, r0
     53e:	0e b6       	in	r0, 0x3e	; 62
     540:	0d 92       	st	X+, r0
	if( xTaskIncrementTick() != pdFALSE )
     542:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <xTaskIncrementTick>
     546:	81 11       	cpse	r24, r1
	{
		vTaskSwitchContext();
     548:	0e 94 ed 09 	call	0x13da	; 0x13da <vTaskSwitchContext>
	}
	portRESTORE_CONTEXT();
     54c:	a0 91 d2 06 	lds	r26, 0x06D2	; 0x8006d2 <pxCurrentTCB>
     550:	b0 91 d3 06 	lds	r27, 0x06D3	; 0x8006d3 <pxCurrentTCB+0x1>
     554:	cd 91       	ld	r28, X+
     556:	cd bf       	out	0x3d, r28	; 61
     558:	dd 91       	ld	r29, X+
     55a:	de bf       	out	0x3e, r29	; 62
     55c:	ff 91       	pop	r31
     55e:	ef 91       	pop	r30
     560:	df 91       	pop	r29
     562:	cf 91       	pop	r28
     564:	bf 91       	pop	r27
     566:	af 91       	pop	r26
     568:	9f 91       	pop	r25
     56a:	8f 91       	pop	r24
     56c:	7f 91       	pop	r23
     56e:	6f 91       	pop	r22
     570:	5f 91       	pop	r21
     572:	4f 91       	pop	r20
     574:	3f 91       	pop	r19
     576:	2f 91       	pop	r18
     578:	1f 91       	pop	r17
     57a:	0f 91       	pop	r16
     57c:	ff 90       	pop	r15
     57e:	ef 90       	pop	r14
     580:	df 90       	pop	r13
     582:	cf 90       	pop	r12
     584:	bf 90       	pop	r11
     586:	af 90       	pop	r10
     588:	9f 90       	pop	r9
     58a:	8f 90       	pop	r8
     58c:	7f 90       	pop	r7
     58e:	6f 90       	pop	r6
     590:	5f 90       	pop	r5
     592:	4f 90       	pop	r4
     594:	3f 90       	pop	r3
     596:	2f 90       	pop	r2
     598:	1f 90       	pop	r1
     59a:	0f 90       	pop	r0
     59c:	0f be       	out	0x3f, r0	; 63
     59e:	0f 90       	pop	r0

	asm volatile ( "ret" );
     5a0:	08 95       	ret

000005a2 <__vector_7>:
	 * count is incremented after the context is saved.
	 */
	void TIMER1_COMPA_vect( void ) __attribute__ ( ( signal, naked ) );
	void TIMER1_COMPA_vect( void )
	{
		vPortYieldFromTick();
     5a2:	0e 94 75 02 	call	0x4ea	; 0x4ea <vPortYieldFromTick>
		asm volatile ( "reti" );
     5a6:	18 95       	reti

000005a8 <prvGetDisinheritPriorityAfterTimeout>:
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
     5a8:	dc 01       	movw	r26, r24
     5aa:	51 96       	adiw	r26, 0x11	; 17
     5ac:	2c 91       	ld	r18, X
     5ae:	51 97       	sbiw	r26, 0x11	; 17
     5b0:	22 23       	and	r18, r18
     5b2:	41 f0       	breq	.+16     	; 0x5c4 <prvGetDisinheritPriorityAfterTimeout+0x1c>
     5b4:	56 96       	adiw	r26, 0x16	; 22
     5b6:	ed 91       	ld	r30, X+
     5b8:	fc 91       	ld	r31, X
     5ba:	57 97       	sbiw	r26, 0x17	; 23
     5bc:	90 81       	ld	r25, Z
     5be:	84 e0       	ldi	r24, 0x04	; 4
     5c0:	89 1b       	sub	r24, r25
     5c2:	08 95       	ret
     5c4:	80 e0       	ldi	r24, 0x00	; 0
     5c6:	08 95       	ret

000005c8 <prvIsQueueEmpty>:
     5c8:	0f b6       	in	r0, 0x3f	; 63
     5ca:	f8 94       	cli
     5cc:	0f 92       	push	r0
     5ce:	fc 01       	movw	r30, r24
     5d0:	82 8d       	ldd	r24, Z+26	; 0x1a
     5d2:	81 11       	cpse	r24, r1
     5d4:	02 c0       	rjmp	.+4      	; 0x5da <prvIsQueueEmpty+0x12>
     5d6:	81 e0       	ldi	r24, 0x01	; 1
     5d8:	01 c0       	rjmp	.+2      	; 0x5dc <prvIsQueueEmpty+0x14>
     5da:	80 e0       	ldi	r24, 0x00	; 0
     5dc:	0f 90       	pop	r0
     5de:	0f be       	out	0x3f, r0	; 63
     5e0:	08 95       	ret

000005e2 <prvIsQueueFull>:
     5e2:	0f b6       	in	r0, 0x3f	; 63
     5e4:	f8 94       	cli
     5e6:	0f 92       	push	r0
     5e8:	fc 01       	movw	r30, r24
     5ea:	22 8d       	ldd	r18, Z+26	; 0x1a
     5ec:	83 8d       	ldd	r24, Z+27	; 0x1b
     5ee:	28 13       	cpse	r18, r24
     5f0:	02 c0       	rjmp	.+4      	; 0x5f6 <prvIsQueueFull+0x14>
     5f2:	81 e0       	ldi	r24, 0x01	; 1
     5f4:	01 c0       	rjmp	.+2      	; 0x5f8 <prvIsQueueFull+0x16>
     5f6:	80 e0       	ldi	r24, 0x00	; 0
     5f8:	0f 90       	pop	r0
     5fa:	0f be       	out	0x3f, r0	; 63
     5fc:	08 95       	ret

000005fe <prvCopyDataToQueue>:
     5fe:	0f 93       	push	r16
     600:	1f 93       	push	r17
     602:	cf 93       	push	r28
     604:	df 93       	push	r29
     606:	ec 01       	movw	r28, r24
     608:	04 2f       	mov	r16, r20
     60a:	1a 8d       	ldd	r17, Y+26	; 0x1a
     60c:	4c 8d       	ldd	r20, Y+28	; 0x1c
     60e:	41 11       	cpse	r20, r1
     610:	0c c0       	rjmp	.+24     	; 0x62a <prvCopyDataToQueue+0x2c>
     612:	88 81       	ld	r24, Y
     614:	99 81       	ldd	r25, Y+1	; 0x01
     616:	89 2b       	or	r24, r25
     618:	09 f0       	breq	.+2      	; 0x61c <prvCopyDataToQueue+0x1e>
     61a:	42 c0       	rjmp	.+132    	; 0x6a0 <prvCopyDataToQueue+0xa2>
     61c:	8c 81       	ldd	r24, Y+4	; 0x04
     61e:	9d 81       	ldd	r25, Y+5	; 0x05
     620:	0e 94 e5 0b 	call	0x17ca	; 0x17ca <xTaskPriorityDisinherit>
     624:	1d 82       	std	Y+5, r1	; 0x05
     626:	1c 82       	std	Y+4, r1	; 0x04
     628:	42 c0       	rjmp	.+132    	; 0x6ae <prvCopyDataToQueue+0xb0>
     62a:	01 11       	cpse	r16, r1
     62c:	17 c0       	rjmp	.+46     	; 0x65c <prvCopyDataToQueue+0x5e>
     62e:	50 e0       	ldi	r21, 0x00	; 0
     630:	8a 81       	ldd	r24, Y+2	; 0x02
     632:	9b 81       	ldd	r25, Y+3	; 0x03
     634:	0e 94 00 0d 	call	0x1a00	; 0x1a00 <memcpy>
     638:	2c 8d       	ldd	r18, Y+28	; 0x1c
     63a:	8a 81       	ldd	r24, Y+2	; 0x02
     63c:	9b 81       	ldd	r25, Y+3	; 0x03
     63e:	82 0f       	add	r24, r18
     640:	91 1d       	adc	r25, r1
     642:	9b 83       	std	Y+3, r25	; 0x03
     644:	8a 83       	std	Y+2, r24	; 0x02
     646:	2c 81       	ldd	r18, Y+4	; 0x04
     648:	3d 81       	ldd	r19, Y+5	; 0x05
     64a:	82 17       	cp	r24, r18
     64c:	93 07       	cpc	r25, r19
     64e:	50 f1       	brcs	.+84     	; 0x6a4 <prvCopyDataToQueue+0xa6>
     650:	88 81       	ld	r24, Y
     652:	99 81       	ldd	r25, Y+1	; 0x01
     654:	9b 83       	std	Y+3, r25	; 0x03
     656:	8a 83       	std	Y+2, r24	; 0x02
     658:	80 e0       	ldi	r24, 0x00	; 0
     65a:	29 c0       	rjmp	.+82     	; 0x6ae <prvCopyDataToQueue+0xb0>
     65c:	50 e0       	ldi	r21, 0x00	; 0
     65e:	8e 81       	ldd	r24, Y+6	; 0x06
     660:	9f 81       	ldd	r25, Y+7	; 0x07
     662:	0e 94 00 0d 	call	0x1a00	; 0x1a00 <memcpy>
     666:	8c 8d       	ldd	r24, Y+28	; 0x1c
     668:	90 e0       	ldi	r25, 0x00	; 0
     66a:	91 95       	neg	r25
     66c:	81 95       	neg	r24
     66e:	91 09       	sbc	r25, r1
     670:	2e 81       	ldd	r18, Y+6	; 0x06
     672:	3f 81       	ldd	r19, Y+7	; 0x07
     674:	28 0f       	add	r18, r24
     676:	39 1f       	adc	r19, r25
     678:	3f 83       	std	Y+7, r19	; 0x07
     67a:	2e 83       	std	Y+6, r18	; 0x06
     67c:	48 81       	ld	r20, Y
     67e:	59 81       	ldd	r21, Y+1	; 0x01
     680:	24 17       	cp	r18, r20
     682:	35 07       	cpc	r19, r21
     684:	30 f4       	brcc	.+12     	; 0x692 <prvCopyDataToQueue+0x94>
     686:	2c 81       	ldd	r18, Y+4	; 0x04
     688:	3d 81       	ldd	r19, Y+5	; 0x05
     68a:	82 0f       	add	r24, r18
     68c:	93 1f       	adc	r25, r19
     68e:	9f 83       	std	Y+7, r25	; 0x07
     690:	8e 83       	std	Y+6, r24	; 0x06
     692:	02 30       	cpi	r16, 0x02	; 2
     694:	49 f4       	brne	.+18     	; 0x6a8 <prvCopyDataToQueue+0xaa>
     696:	11 23       	and	r17, r17
     698:	49 f0       	breq	.+18     	; 0x6ac <prvCopyDataToQueue+0xae>
     69a:	11 50       	subi	r17, 0x01	; 1
     69c:	80 e0       	ldi	r24, 0x00	; 0
     69e:	07 c0       	rjmp	.+14     	; 0x6ae <prvCopyDataToQueue+0xb0>
     6a0:	80 e0       	ldi	r24, 0x00	; 0
     6a2:	05 c0       	rjmp	.+10     	; 0x6ae <prvCopyDataToQueue+0xb0>
     6a4:	80 e0       	ldi	r24, 0x00	; 0
     6a6:	03 c0       	rjmp	.+6      	; 0x6ae <prvCopyDataToQueue+0xb0>
     6a8:	80 e0       	ldi	r24, 0x00	; 0
     6aa:	01 c0       	rjmp	.+2      	; 0x6ae <prvCopyDataToQueue+0xb0>
     6ac:	80 e0       	ldi	r24, 0x00	; 0
     6ae:	1f 5f       	subi	r17, 0xFF	; 255
     6b0:	1a 8f       	std	Y+26, r17	; 0x1a
     6b2:	df 91       	pop	r29
     6b4:	cf 91       	pop	r28
     6b6:	1f 91       	pop	r17
     6b8:	0f 91       	pop	r16
     6ba:	08 95       	ret

000006bc <prvUnlockQueue>:
     6bc:	1f 93       	push	r17
     6be:	cf 93       	push	r28
     6c0:	df 93       	push	r29
     6c2:	ec 01       	movw	r28, r24
     6c4:	0f b6       	in	r0, 0x3f	; 63
     6c6:	f8 94       	cli
     6c8:	0f 92       	push	r0
     6ca:	1e 8d       	ldd	r17, Y+30	; 0x1e
     6cc:	0b c0       	rjmp	.+22     	; 0x6e4 <prvUnlockQueue+0x28>
     6ce:	89 89       	ldd	r24, Y+17	; 0x11
     6d0:	88 23       	and	r24, r24
     6d2:	51 f0       	breq	.+20     	; 0x6e8 <prvUnlockQueue+0x2c>
     6d4:	ce 01       	movw	r24, r28
     6d6:	41 96       	adiw	r24, 0x11	; 17
     6d8:	0e 94 53 0a 	call	0x14a6	; 0x14a6 <xTaskRemoveFromEventList>
     6dc:	81 11       	cpse	r24, r1
     6de:	0e 94 4d 0b 	call	0x169a	; 0x169a <vTaskMissedYield>
     6e2:	11 50       	subi	r17, 0x01	; 1
     6e4:	11 16       	cp	r1, r17
     6e6:	9c f3       	brlt	.-26     	; 0x6ce <prvUnlockQueue+0x12>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	8e 8f       	std	Y+30, r24	; 0x1e
     6ec:	0f 90       	pop	r0
     6ee:	0f be       	out	0x3f, r0	; 63
     6f0:	0f b6       	in	r0, 0x3f	; 63
     6f2:	f8 94       	cli
     6f4:	0f 92       	push	r0
     6f6:	1d 8d       	ldd	r17, Y+29	; 0x1d
     6f8:	0b c0       	rjmp	.+22     	; 0x710 <prvUnlockQueue+0x54>
     6fa:	88 85       	ldd	r24, Y+8	; 0x08
     6fc:	88 23       	and	r24, r24
     6fe:	51 f0       	breq	.+20     	; 0x714 <prvUnlockQueue+0x58>
     700:	ce 01       	movw	r24, r28
     702:	08 96       	adiw	r24, 0x08	; 8
     704:	0e 94 53 0a 	call	0x14a6	; 0x14a6 <xTaskRemoveFromEventList>
     708:	81 11       	cpse	r24, r1
     70a:	0e 94 4d 0b 	call	0x169a	; 0x169a <vTaskMissedYield>
     70e:	11 50       	subi	r17, 0x01	; 1
     710:	11 16       	cp	r1, r17
     712:	9c f3       	brlt	.-26     	; 0x6fa <prvUnlockQueue+0x3e>
     714:	8f ef       	ldi	r24, 0xFF	; 255
     716:	8d 8f       	std	Y+29, r24	; 0x1d
     718:	0f 90       	pop	r0
     71a:	0f be       	out	0x3f, r0	; 63
     71c:	df 91       	pop	r29
     71e:	cf 91       	pop	r28
     720:	1f 91       	pop	r17
     722:	08 95       	ret

00000724 <xQueueGenericReset>:
     724:	0f 93       	push	r16
     726:	1f 93       	push	r17
     728:	cf 93       	push	r28
     72a:	df 93       	push	r29
     72c:	fc 01       	movw	r30, r24
     72e:	36 2f       	mov	r19, r22
     730:	89 2b       	or	r24, r25
     732:	09 f4       	brne	.+2      	; 0x736 <xQueueGenericReset+0x12>
     734:	4d c0       	rjmp	.+154    	; 0x7d0 <xQueueGenericReset+0xac>
     736:	23 8d       	ldd	r18, Z+27	; 0x1b
     738:	22 23       	and	r18, r18
     73a:	09 f4       	brne	.+2      	; 0x73e <xQueueGenericReset+0x1a>
     73c:	4b c0       	rjmp	.+150    	; 0x7d4 <xQueueGenericReset+0xb0>
     73e:	02 2f       	mov	r16, r18
     740:	10 e0       	ldi	r17, 0x00	; 0
     742:	8f ef       	ldi	r24, 0xFF	; 255
     744:	9f ef       	ldi	r25, 0xFF	; 255
     746:	b8 01       	movw	r22, r16
     748:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <__udivmodhi4>
     74c:	44 8d       	ldd	r20, Z+28	; 0x1c
     74e:	84 2f       	mov	r24, r20
     750:	90 e0       	ldi	r25, 0x00	; 0
     752:	68 17       	cp	r22, r24
     754:	79 07       	cpc	r23, r25
     756:	08 f4       	brcc	.+2      	; 0x75a <xQueueGenericReset+0x36>
     758:	3f c0       	rjmp	.+126    	; 0x7d8 <xQueueGenericReset+0xb4>
     75a:	ef 01       	movw	r28, r30
     75c:	0f b6       	in	r0, 0x3f	; 63
     75e:	f8 94       	cli
     760:	0f 92       	push	r0
     762:	60 81       	ld	r22, Z
     764:	71 81       	ldd	r23, Z+1	; 0x01
     766:	fb 01       	movw	r30, r22
     768:	24 9f       	mul	r18, r20
     76a:	e0 0d       	add	r30, r0
     76c:	f1 1d       	adc	r31, r1
     76e:	11 24       	eor	r1, r1
     770:	fd 83       	std	Y+5, r31	; 0x05
     772:	ec 83       	std	Y+4, r30	; 0x04
     774:	1a 8e       	std	Y+26, r1	; 0x1a
     776:	7b 83       	std	Y+3, r23	; 0x03
     778:	6a 83       	std	Y+2, r22	; 0x02
     77a:	01 50       	subi	r16, 0x01	; 1
     77c:	11 09       	sbc	r17, r1
     77e:	80 9f       	mul	r24, r16
     780:	a0 01       	movw	r20, r0
     782:	81 9f       	mul	r24, r17
     784:	50 0d       	add	r21, r0
     786:	90 9f       	mul	r25, r16
     788:	50 0d       	add	r21, r0
     78a:	11 24       	eor	r1, r1
     78c:	cb 01       	movw	r24, r22
     78e:	84 0f       	add	r24, r20
     790:	95 1f       	adc	r25, r21
     792:	9f 83       	std	Y+7, r25	; 0x07
     794:	8e 83       	std	Y+6, r24	; 0x06
     796:	8f ef       	ldi	r24, 0xFF	; 255
     798:	8d 8f       	std	Y+29, r24	; 0x1d
     79a:	8e 8f       	std	Y+30, r24	; 0x1e
     79c:	31 11       	cpse	r19, r1
     79e:	0c c0       	rjmp	.+24     	; 0x7b8 <xQueueGenericReset+0x94>
     7a0:	88 85       	ldd	r24, Y+8	; 0x08
     7a2:	88 23       	and	r24, r24
     7a4:	89 f0       	breq	.+34     	; 0x7c8 <xQueueGenericReset+0xa4>
     7a6:	ce 01       	movw	r24, r28
     7a8:	08 96       	adiw	r24, 0x08	; 8
     7aa:	0e 94 53 0a 	call	0x14a6	; 0x14a6 <xTaskRemoveFromEventList>
     7ae:	88 23       	and	r24, r24
     7b0:	59 f0       	breq	.+22     	; 0x7c8 <xQueueGenericReset+0xa4>
     7b2:	0e 94 1c 02 	call	0x438	; 0x438 <vPortYield>
     7b6:	08 c0       	rjmp	.+16     	; 0x7c8 <xQueueGenericReset+0xa4>
     7b8:	ce 01       	movw	r24, r28
     7ba:	08 96       	adiw	r24, 0x08	; 8
     7bc:	0e 94 84 00 	call	0x108	; 0x108 <vListInitialise>
     7c0:	ce 01       	movw	r24, r28
     7c2:	41 96       	adiw	r24, 0x11	; 17
     7c4:	0e 94 84 00 	call	0x108	; 0x108 <vListInitialise>
     7c8:	0f 90       	pop	r0
     7ca:	0f be       	out	0x3f, r0	; 63
     7cc:	81 e0       	ldi	r24, 0x01	; 1
     7ce:	05 c0       	rjmp	.+10     	; 0x7da <xQueueGenericReset+0xb6>
     7d0:	80 e0       	ldi	r24, 0x00	; 0
     7d2:	03 c0       	rjmp	.+6      	; 0x7da <xQueueGenericReset+0xb6>
     7d4:	80 e0       	ldi	r24, 0x00	; 0
     7d6:	01 c0       	rjmp	.+2      	; 0x7da <xQueueGenericReset+0xb6>
     7d8:	80 e0       	ldi	r24, 0x00	; 0
     7da:	df 91       	pop	r29
     7dc:	cf 91       	pop	r28
     7de:	1f 91       	pop	r17
     7e0:	0f 91       	pop	r16
     7e2:	08 95       	ret

000007e4 <prvInitialiseNewQueue>:
     7e4:	0f 93       	push	r16
     7e6:	1f 93       	push	r17
     7e8:	f8 01       	movw	r30, r16
     7ea:	61 11       	cpse	r22, r1
     7ec:	03 c0       	rjmp	.+6      	; 0x7f4 <prvInitialiseNewQueue+0x10>
     7ee:	11 83       	std	Z+1, r17	; 0x01
     7f0:	00 83       	st	Z, r16
     7f2:	02 c0       	rjmp	.+4      	; 0x7f8 <prvInitialiseNewQueue+0x14>
     7f4:	51 83       	std	Z+1, r21	; 0x01
     7f6:	40 83       	st	Z, r20
     7f8:	83 8f       	std	Z+27, r24	; 0x1b
     7fa:	64 8f       	std	Z+28, r22	; 0x1c
     7fc:	61 e0       	ldi	r22, 0x01	; 1
     7fe:	cf 01       	movw	r24, r30
     800:	0e 94 92 03 	call	0x724	; 0x724 <xQueueGenericReset>
     804:	1f 91       	pop	r17
     806:	0f 91       	pop	r16
     808:	08 95       	ret

0000080a <xQueueGenericCreate>:
     80a:	df 92       	push	r13
     80c:	ef 92       	push	r14
     80e:	ff 92       	push	r15
     810:	0f 93       	push	r16
     812:	1f 93       	push	r17
     814:	cf 93       	push	r28
     816:	df 93       	push	r29
     818:	38 2f       	mov	r19, r24
     81a:	e6 2f       	mov	r30, r22
     81c:	88 23       	and	r24, r24
     81e:	29 f1       	breq	.+74     	; 0x86a <__stack+0xb>
     820:	68 2f       	mov	r22, r24
     822:	70 e0       	ldi	r23, 0x00	; 0
     824:	8f ef       	ldi	r24, 0xFF	; 255
     826:	9f ef       	ldi	r25, 0xFF	; 255
     828:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <__udivmodhi4>
     82c:	8e 2f       	mov	r24, r30
     82e:	90 e0       	ldi	r25, 0x00	; 0
     830:	68 17       	cp	r22, r24
     832:	79 07       	cpc	r23, r25
     834:	e8 f0       	brcs	.+58     	; 0x870 <__stack+0x11>
     836:	3e 9f       	mul	r19, r30
     838:	c0 01       	movw	r24, r0
     83a:	11 24       	eor	r1, r1
     83c:	81 3e       	cpi	r24, 0xE1	; 225
     83e:	2f ef       	ldi	r18, 0xFF	; 255
     840:	92 07       	cpc	r25, r18
     842:	c8 f4       	brcc	.+50     	; 0x876 <__stack+0x17>
     844:	d4 2e       	mov	r13, r20
     846:	de 2f       	mov	r29, r30
     848:	c3 2f       	mov	r28, r19
     84a:	4f 96       	adiw	r24, 0x1f	; 31
     84c:	0e 94 49 00 	call	0x92	; 0x92 <pvPortMalloc>
     850:	7c 01       	movw	r14, r24
     852:	00 97       	sbiw	r24, 0x00	; 0
     854:	91 f0       	breq	.+36     	; 0x87a <__stack+0x1b>
     856:	8c 01       	movw	r16, r24
     858:	2d 2d       	mov	r18, r13
     85a:	ac 01       	movw	r20, r24
     85c:	41 5e       	subi	r20, 0xE1	; 225
     85e:	5f 4f       	sbci	r21, 0xFF	; 255
     860:	6d 2f       	mov	r22, r29
     862:	8c 2f       	mov	r24, r28
     864:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <prvInitialiseNewQueue>
     868:	08 c0       	rjmp	.+16     	; 0x87a <__stack+0x1b>
     86a:	e1 2c       	mov	r14, r1
     86c:	f1 2c       	mov	r15, r1
     86e:	05 c0       	rjmp	.+10     	; 0x87a <__stack+0x1b>
     870:	e1 2c       	mov	r14, r1
     872:	f1 2c       	mov	r15, r1
     874:	02 c0       	rjmp	.+4      	; 0x87a <__stack+0x1b>
     876:	e1 2c       	mov	r14, r1
     878:	f1 2c       	mov	r15, r1
     87a:	c7 01       	movw	r24, r14
     87c:	df 91       	pop	r29
     87e:	cf 91       	pop	r28
     880:	1f 91       	pop	r17
     882:	0f 91       	pop	r16
     884:	ff 90       	pop	r15
     886:	ef 90       	pop	r14
     888:	df 90       	pop	r13
     88a:	08 95       	ret

0000088c <xQueueGenericSend>:
     88c:	cf 92       	push	r12
     88e:	df 92       	push	r13
     890:	ef 92       	push	r14
     892:	ff 92       	push	r15
     894:	0f 93       	push	r16
     896:	1f 93       	push	r17
     898:	cf 93       	push	r28
     89a:	df 93       	push	r29
     89c:	00 d0       	rcall	.+0      	; 0x89e <xQueueGenericSend+0x12>
     89e:	00 d0       	rcall	.+0      	; 0x8a0 <xQueueGenericSend+0x14>
     8a0:	1f 92       	push	r1
     8a2:	cd b7       	in	r28, 0x3d	; 61
     8a4:	de b7       	in	r29, 0x3e	; 62
     8a6:	8c 01       	movw	r16, r24
     8a8:	7b 01       	movw	r14, r22
     8aa:	5d 83       	std	Y+5, r21	; 0x05
     8ac:	4c 83       	std	Y+4, r20	; 0x04
     8ae:	c2 2e       	mov	r12, r18
     8b0:	d1 2c       	mov	r13, r1
     8b2:	0f b6       	in	r0, 0x3f	; 63
     8b4:	f8 94       	cli
     8b6:	0f 92       	push	r0
     8b8:	f8 01       	movw	r30, r16
     8ba:	92 8d       	ldd	r25, Z+26	; 0x1a
     8bc:	83 8d       	ldd	r24, Z+27	; 0x1b
     8be:	98 17       	cp	r25, r24
     8c0:	18 f0       	brcs	.+6      	; 0x8c8 <xQueueGenericSend+0x3c>
     8c2:	f2 e0       	ldi	r31, 0x02	; 2
     8c4:	cf 12       	cpse	r12, r31
     8c6:	19 c0       	rjmp	.+50     	; 0x8fa <xQueueGenericSend+0x6e>
     8c8:	4c 2d       	mov	r20, r12
     8ca:	b7 01       	movw	r22, r14
     8cc:	c8 01       	movw	r24, r16
     8ce:	0e 94 ff 02 	call	0x5fe	; 0x5fe <prvCopyDataToQueue>
     8d2:	f8 01       	movw	r30, r16
     8d4:	91 89       	ldd	r25, Z+17	; 0x11
     8d6:	99 23       	and	r25, r25
     8d8:	49 f0       	breq	.+18     	; 0x8ec <xQueueGenericSend+0x60>
     8da:	c8 01       	movw	r24, r16
     8dc:	41 96       	adiw	r24, 0x11	; 17
     8de:	0e 94 53 0a 	call	0x14a6	; 0x14a6 <xTaskRemoveFromEventList>
     8e2:	88 23       	and	r24, r24
     8e4:	31 f0       	breq	.+12     	; 0x8f2 <xQueueGenericSend+0x66>
     8e6:	0e 94 1c 02 	call	0x438	; 0x438 <vPortYield>
     8ea:	03 c0       	rjmp	.+6      	; 0x8f2 <xQueueGenericSend+0x66>
     8ec:	81 11       	cpse	r24, r1
     8ee:	0e 94 1c 02 	call	0x438	; 0x438 <vPortYield>
     8f2:	0f 90       	pop	r0
     8f4:	0f be       	out	0x3f, r0	; 63
     8f6:	81 e0       	ldi	r24, 0x01	; 1
     8f8:	4d c0       	rjmp	.+154    	; 0x994 <xQueueGenericSend+0x108>
     8fa:	8c 81       	ldd	r24, Y+4	; 0x04
     8fc:	9d 81       	ldd	r25, Y+5	; 0x05
     8fe:	89 2b       	or	r24, r25
     900:	21 f4       	brne	.+8      	; 0x90a <xQueueGenericSend+0x7e>
     902:	0f 90       	pop	r0
     904:	0f be       	out	0x3f, r0	; 63
     906:	80 e0       	ldi	r24, 0x00	; 0
     908:	45 c0       	rjmp	.+138    	; 0x994 <xQueueGenericSend+0x108>
     90a:	d1 10       	cpse	r13, r1
     90c:	06 c0       	rjmp	.+12     	; 0x91a <xQueueGenericSend+0x8e>
     90e:	ce 01       	movw	r24, r28
     910:	01 96       	adiw	r24, 0x01	; 1
     912:	0e 94 10 0b 	call	0x1620	; 0x1620 <vTaskInternalSetTimeOutState>
     916:	dd 24       	eor	r13, r13
     918:	d3 94       	inc	r13
     91a:	0f 90       	pop	r0
     91c:	0f be       	out	0x3f, r0	; 63
     91e:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <vTaskSuspendAll>
     922:	0f b6       	in	r0, 0x3f	; 63
     924:	f8 94       	cli
     926:	0f 92       	push	r0
     928:	f8 01       	movw	r30, r16
     92a:	85 8d       	ldd	r24, Z+29	; 0x1d
     92c:	8f 3f       	cpi	r24, 0xFF	; 255
     92e:	09 f4       	brne	.+2      	; 0x932 <xQueueGenericSend+0xa6>
     930:	15 8e       	std	Z+29, r1	; 0x1d
     932:	f8 01       	movw	r30, r16
     934:	86 8d       	ldd	r24, Z+30	; 0x1e
     936:	8f 3f       	cpi	r24, 0xFF	; 255
     938:	09 f4       	brne	.+2      	; 0x93c <xQueueGenericSend+0xb0>
     93a:	16 8e       	std	Z+30, r1	; 0x1e
     93c:	0f 90       	pop	r0
     93e:	0f be       	out	0x3f, r0	; 63
     940:	be 01       	movw	r22, r28
     942:	6c 5f       	subi	r22, 0xFC	; 252
     944:	7f 4f       	sbci	r23, 0xFF	; 255
     946:	ce 01       	movw	r24, r28
     948:	01 96       	adiw	r24, 0x01	; 1
     94a:	0e 94 1b 0b 	call	0x1636	; 0x1636 <xTaskCheckForTimeOut>
     94e:	81 11       	cpse	r24, r1
     950:	1b c0       	rjmp	.+54     	; 0x988 <xQueueGenericSend+0xfc>
     952:	c8 01       	movw	r24, r16
     954:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <prvIsQueueFull>
     958:	88 23       	and	r24, r24
     95a:	81 f0       	breq	.+32     	; 0x97c <xQueueGenericSend+0xf0>
     95c:	6c 81       	ldd	r22, Y+4	; 0x04
     95e:	7d 81       	ldd	r23, Y+5	; 0x05
     960:	c8 01       	movw	r24, r16
     962:	08 96       	adiw	r24, 0x08	; 8
     964:	0e 94 41 0a 	call	0x1482	; 0x1482 <vTaskPlaceOnEventList>
     968:	c8 01       	movw	r24, r16
     96a:	0e 94 5e 03 	call	0x6bc	; 0x6bc <prvUnlockQueue>
     96e:	0e 94 02 09 	call	0x1204	; 0x1204 <xTaskResumeAll>
     972:	81 11       	cpse	r24, r1
     974:	9e cf       	rjmp	.-196    	; 0x8b2 <xQueueGenericSend+0x26>
     976:	0e 94 1c 02 	call	0x438	; 0x438 <vPortYield>
     97a:	9b cf       	rjmp	.-202    	; 0x8b2 <xQueueGenericSend+0x26>
     97c:	c8 01       	movw	r24, r16
     97e:	0e 94 5e 03 	call	0x6bc	; 0x6bc <prvUnlockQueue>
     982:	0e 94 02 09 	call	0x1204	; 0x1204 <xTaskResumeAll>
     986:	95 cf       	rjmp	.-214    	; 0x8b2 <xQueueGenericSend+0x26>
     988:	c8 01       	movw	r24, r16
     98a:	0e 94 5e 03 	call	0x6bc	; 0x6bc <prvUnlockQueue>
     98e:	0e 94 02 09 	call	0x1204	; 0x1204 <xTaskResumeAll>
     992:	80 e0       	ldi	r24, 0x00	; 0
     994:	0f 90       	pop	r0
     996:	0f 90       	pop	r0
     998:	0f 90       	pop	r0
     99a:	0f 90       	pop	r0
     99c:	0f 90       	pop	r0
     99e:	df 91       	pop	r29
     9a0:	cf 91       	pop	r28
     9a2:	1f 91       	pop	r17
     9a4:	0f 91       	pop	r16
     9a6:	ff 90       	pop	r15
     9a8:	ef 90       	pop	r14
     9aa:	df 90       	pop	r13
     9ac:	cf 90       	pop	r12
     9ae:	08 95       	ret

000009b0 <prvInitialiseMutex>:
     9b0:	00 97       	sbiw	r24, 0x00	; 0
     9b2:	69 f0       	breq	.+26     	; 0x9ce <prvInitialiseMutex+0x1e>
     9b4:	fc 01       	movw	r30, r24
     9b6:	15 82       	std	Z+5, r1	; 0x05
     9b8:	14 82       	std	Z+4, r1	; 0x04
     9ba:	11 82       	std	Z+1, r1	; 0x01
     9bc:	10 82       	st	Z, r1
     9be:	16 82       	std	Z+6, r1	; 0x06
     9c0:	20 e0       	ldi	r18, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	60 e0       	ldi	r22, 0x00	; 0
     9c8:	70 e0       	ldi	r23, 0x00	; 0
     9ca:	0e 94 46 04 	call	0x88c	; 0x88c <xQueueGenericSend>
     9ce:	08 95       	ret

000009d0 <xQueueCreateMutex>:
     9d0:	cf 93       	push	r28
     9d2:	df 93       	push	r29
     9d4:	48 2f       	mov	r20, r24
     9d6:	60 e0       	ldi	r22, 0x00	; 0
     9d8:	81 e0       	ldi	r24, 0x01	; 1
     9da:	0e 94 05 04 	call	0x80a	; 0x80a <xQueueGenericCreate>
     9de:	ec 01       	movw	r28, r24
     9e0:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <prvInitialiseMutex>
     9e4:	ce 01       	movw	r24, r28
     9e6:	df 91       	pop	r29
     9e8:	cf 91       	pop	r28
     9ea:	08 95       	ret

000009ec <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
     9ec:	ef 92       	push	r14
     9ee:	ff 92       	push	r15
     9f0:	0f 93       	push	r16
     9f2:	1f 93       	push	r17
     9f4:	cf 93       	push	r28
     9f6:	df 93       	push	r29
     9f8:	00 d0       	rcall	.+0      	; 0x9fa <xQueueSemaphoreTake+0xe>
     9fa:	00 d0       	rcall	.+0      	; 0x9fc <xQueueSemaphoreTake+0x10>
     9fc:	1f 92       	push	r1
     9fe:	cd b7       	in	r28, 0x3d	; 61
     a00:	de b7       	in	r29, 0x3e	; 62
     a02:	8c 01       	movw	r16, r24
     a04:	7d 83       	std	Y+5, r23	; 0x05
     a06:	6c 83       	std	Y+4, r22	; 0x04
    BaseType_t xEntryTimeSet = pdFALSE;
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;

    #if ( configUSE_MUTEXES == 1 )
        BaseType_t xInheritanceOccurred = pdFALSE;
     a08:	e1 2c       	mov	r14, r1
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
    BaseType_t xEntryTimeSet = pdFALSE;
     a0a:	f1 2c       	mov	r15, r1
    /*lint -save -e904 This function relaxes the coding standard somewhat to allow return
     * statements within the function itself.  This is done in the interest
     * of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
     a0c:	0f b6       	in	r0, 0x3f	; 63
     a0e:	f8 94       	cli
     a10:	0f 92       	push	r0
        {
            /* Semaphores are queues with an item size of 0, and where the
             * number of messages in the queue is the semaphore's count value. */
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
     a12:	f8 01       	movw	r30, r16
     a14:	82 8d       	ldd	r24, Z+26	; 0x1a

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
     a16:	88 23       	and	r24, r24
     a18:	d1 f0       	breq	.+52     	; 0xa4e <xQueueSemaphoreTake+0x62>
            {
                traceQUEUE_RECEIVE( pxQueue );

                /* Semaphores are queues with a data size of zero and where the
                 * messages waiting is the semaphore's count.  Reduce the count. */
                pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
     a1a:	81 50       	subi	r24, 0x01	; 1
     a1c:	82 8f       	std	Z+26, r24	; 0x1a

                #if ( configUSE_MUTEXES == 1 )
                {
                    if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
     a1e:	80 81       	ld	r24, Z
     a20:	91 81       	ldd	r25, Z+1	; 0x01
     a22:	89 2b       	or	r24, r25
     a24:	29 f4       	brne	.+10     	; 0xa30 <xQueueSemaphoreTake+0x44>
                    {
                        /* Record the information required to implement
                         * priority inheritance should it become necessary. */
                        pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
     a26:	0e 94 bb 0c 	call	0x1976	; 0x1976 <pvTaskIncrementMutexHeldCount>
     a2a:	f8 01       	movw	r30, r16
     a2c:	95 83       	std	Z+5, r25	; 0x05
     a2e:	84 83       	std	Z+4, r24	; 0x04
                }
                #endif /* configUSE_MUTEXES */

                /* Check to see if other tasks are blocked waiting to give the
                 * semaphore, and if so, unblock the highest priority such task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
     a30:	f8 01       	movw	r30, r16
     a32:	80 85       	ldd	r24, Z+8	; 0x08
     a34:	88 23       	and	r24, r24
     a36:	39 f0       	breq	.+14     	; 0xa46 <xQueueSemaphoreTake+0x5a>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
     a38:	c8 01       	movw	r24, r16
     a3a:	08 96       	adiw	r24, 0x08	; 8
     a3c:	0e 94 53 0a 	call	0x14a6	; 0x14a6 <xTaskRemoveFromEventList>
     a40:	81 11       	cpse	r24, r1
                    {
                        queueYIELD_IF_USING_PREEMPTION();
     a42:	0e 94 1c 02 	call	0x438	; 0x438 <vPortYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
     a46:	0f 90       	pop	r0
     a48:	0f be       	out	0x3f, r0	; 63
                return pdPASS;
     a4a:	81 e0       	ldi	r24, 0x01	; 1
     a4c:	74 c0       	rjmp	.+232    	; 0xb36 <xQueueSemaphoreTake+0x14a>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
     a4e:	8c 81       	ldd	r24, Y+4	; 0x04
     a50:	9d 81       	ldd	r25, Y+5	; 0x05
     a52:	89 2b       	or	r24, r25
     a54:	21 f4       	brne	.+8      	; 0xa5e <xQueueSemaphoreTake+0x72>
                {
                    /* The semaphore count was 0 and no block time is specified
                     * (or the block time has expired) so exit now. */
                    taskEXIT_CRITICAL();
     a56:	0f 90       	pop	r0
     a58:	0f be       	out	0x3f, r0	; 63
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
     a5a:	80 e0       	ldi	r24, 0x00	; 0
     a5c:	6c c0       	rjmp	.+216    	; 0xb36 <xQueueSemaphoreTake+0x14a>
                }
                else if( xEntryTimeSet == pdFALSE )
     a5e:	f1 10       	cpse	r15, r1
     a60:	06 c0       	rjmp	.+12     	; 0xa6e <xQueueSemaphoreTake+0x82>
                {
                    /* The semaphore count was 0 and a block time was specified
                     * so configure the timeout structure ready to block. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
     a62:	ce 01       	movw	r24, r28
     a64:	01 96       	adiw	r24, 0x01	; 1
     a66:	0e 94 10 0b 	call	0x1620	; 0x1620 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
     a6a:	ff 24       	eor	r15, r15
     a6c:	f3 94       	inc	r15
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
     a6e:	0f 90       	pop	r0
     a70:	0f be       	out	0x3f, r0	; 63

        /* Interrupts and other tasks can give to and take from the semaphore
         * now the critical section has been exited. */

        vTaskSuspendAll();
     a72:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
     a76:	0f b6       	in	r0, 0x3f	; 63
     a78:	f8 94       	cli
     a7a:	0f 92       	push	r0
     a7c:	f8 01       	movw	r30, r16
     a7e:	85 8d       	ldd	r24, Z+29	; 0x1d
     a80:	8f 3f       	cpi	r24, 0xFF	; 255
     a82:	09 f4       	brne	.+2      	; 0xa86 <xQueueSemaphoreTake+0x9a>
     a84:	15 8e       	std	Z+29, r1	; 0x1d
     a86:	f8 01       	movw	r30, r16
     a88:	86 8d       	ldd	r24, Z+30	; 0x1e
     a8a:	8f 3f       	cpi	r24, 0xFF	; 255
     a8c:	09 f4       	brne	.+2      	; 0xa90 <xQueueSemaphoreTake+0xa4>
     a8e:	16 8e       	std	Z+30, r1	; 0x1e
     a90:	0f 90       	pop	r0
     a92:	0f be       	out	0x3f, r0	; 63

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
     a94:	be 01       	movw	r22, r28
     a96:	6c 5f       	subi	r22, 0xFC	; 252
     a98:	7f 4f       	sbci	r23, 0xFF	; 255
     a9a:	ce 01       	movw	r24, r28
     a9c:	01 96       	adiw	r24, 0x01	; 1
     a9e:	0e 94 1b 0b 	call	0x1636	; 0x1636 <xTaskCheckForTimeOut>
     aa2:	81 11       	cpse	r24, r1
     aa4:	2a c0       	rjmp	.+84     	; 0xafa <xQueueSemaphoreTake+0x10e>
        {
            /* A block time is specified and not expired.  If the semaphore
             * count is 0 then enter the Blocked state to wait for a semaphore to
             * become available.  As semaphores are implemented with queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
     aa6:	c8 01       	movw	r24, r16
     aa8:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <prvIsQueueEmpty>
     aac:	88 23       	and	r24, r24
     aae:	f9 f0       	breq	.+62     	; 0xaee <xQueueSemaphoreTake+0x102>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

                #if ( configUSE_MUTEXES == 1 )
                {
                    if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
     ab0:	f8 01       	movw	r30, r16
     ab2:	80 81       	ld	r24, Z
     ab4:	91 81       	ldd	r25, Z+1	; 0x01
     ab6:	89 2b       	or	r24, r25
     ab8:	51 f4       	brne	.+20     	; 0xace <xQueueSemaphoreTake+0xe2>
                    {
                        taskENTER_CRITICAL();
     aba:	0f b6       	in	r0, 0x3f	; 63
     abc:	f8 94       	cli
     abe:	0f 92       	push	r0
                        {
                            xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
     ac0:	84 81       	ldd	r24, Z+4	; 0x04
     ac2:	95 81       	ldd	r25, Z+5	; 0x05
     ac4:	0e 94 51 0b 	call	0x16a2	; 0x16a2 <xTaskPriorityInherit>
     ac8:	e8 2e       	mov	r14, r24
                        }
                        taskEXIT_CRITICAL();
     aca:	0f 90       	pop	r0
     acc:	0f be       	out	0x3f, r0	; 63
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
     ace:	6c 81       	ldd	r22, Y+4	; 0x04
     ad0:	7d 81       	ldd	r23, Y+5	; 0x05
     ad2:	c8 01       	movw	r24, r16
     ad4:	41 96       	adiw	r24, 0x11	; 17
     ad6:	0e 94 41 0a 	call	0x1482	; 0x1482 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
     ada:	c8 01       	movw	r24, r16
     adc:	0e 94 5e 03 	call	0x6bc	; 0x6bc <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
     ae0:	0e 94 02 09 	call	0x1204	; 0x1204 <xTaskResumeAll>
     ae4:	81 11       	cpse	r24, r1
     ae6:	92 cf       	rjmp	.-220    	; 0xa0c <xQueueSemaphoreTake+0x20>
                {
                    portYIELD_WITHIN_API();
     ae8:	0e 94 1c 02 	call	0x438	; 0x438 <vPortYield>
     aec:	8f cf       	rjmp	.-226    	; 0xa0c <xQueueSemaphoreTake+0x20>
            }
            else
            {
                /* There was no timeout and the semaphore count was not 0, so
                 * attempt to take the semaphore again. */
                prvUnlockQueue( pxQueue );
     aee:	c8 01       	movw	r24, r16
     af0:	0e 94 5e 03 	call	0x6bc	; 0x6bc <prvUnlockQueue>
                ( void ) xTaskResumeAll();
     af4:	0e 94 02 09 	call	0x1204	; 0x1204 <xTaskResumeAll>
     af8:	89 cf       	rjmp	.-238    	; 0xa0c <xQueueSemaphoreTake+0x20>
            }
        }
        else
        {
            /* Timed out. */
            prvUnlockQueue( pxQueue );
     afa:	c8 01       	movw	r24, r16
     afc:	0e 94 5e 03 	call	0x6bc	; 0x6bc <prvUnlockQueue>
            ( void ) xTaskResumeAll();
     b00:	0e 94 02 09 	call	0x1204	; 0x1204 <xTaskResumeAll>

            /* If the semaphore count is 0 exit now as the timeout has
             * expired.  Otherwise return to attempt to take the semaphore that is
             * known to be available.  As semaphores are implemented by queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
     b04:	c8 01       	movw	r24, r16
     b06:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <prvIsQueueEmpty>
     b0a:	88 23       	and	r24, r24
     b0c:	09 f4       	brne	.+2      	; 0xb10 <xQueueSemaphoreTake+0x124>
     b0e:	7e cf       	rjmp	.-260    	; 0xa0c <xQueueSemaphoreTake+0x20>
                #if ( configUSE_MUTEXES == 1 )
                {
                    /* xInheritanceOccurred could only have be set if
                     * pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
                     * test the mutex type again to check it is actually a mutex. */
                    if( xInheritanceOccurred != pdFALSE )
     b10:	ee 20       	and	r14, r14
     b12:	81 f0       	breq	.+32     	; 0xb34 <xQueueSemaphoreTake+0x148>
                    {
                        taskENTER_CRITICAL();
     b14:	0f b6       	in	r0, 0x3f	; 63
     b16:	f8 94       	cli
     b18:	0f 92       	push	r0
                            /* This task blocking on the mutex caused another
                             * task to inherit this task's priority.  Now this task
                             * has timed out the priority should be disinherited
                             * again, but only as low as the next highest priority
                             * task that is waiting for the same mutex. */
                            uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
     b1a:	c8 01       	movw	r24, r16
     b1c:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <prvGetDisinheritPriorityAfterTimeout>
                            vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
     b20:	68 2f       	mov	r22, r24
     b22:	f8 01       	movw	r30, r16
     b24:	84 81       	ldd	r24, Z+4	; 0x04
     b26:	95 81       	ldd	r25, Z+5	; 0x05
     b28:	0e 94 48 0c 	call	0x1890	; 0x1890 <vTaskPriorityDisinheritAfterTimeout>
                        }
                        taskEXIT_CRITICAL();
     b2c:	0f 90       	pop	r0
     b2e:	0f be       	out	0x3f, r0	; 63
                    }
                }
                #endif /* configUSE_MUTEXES */

                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
     b30:	80 e0       	ldi	r24, 0x00	; 0
     b32:	01 c0       	rjmp	.+2      	; 0xb36 <xQueueSemaphoreTake+0x14a>
     b34:	80 e0       	ldi	r24, 0x00	; 0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
     b36:	0f 90       	pop	r0
     b38:	0f 90       	pop	r0
     b3a:	0f 90       	pop	r0
     b3c:	0f 90       	pop	r0
     b3e:	0f 90       	pop	r0
     b40:	df 91       	pop	r29
     b42:	cf 91       	pop	r28
     b44:	1f 91       	pop	r17
     b46:	0f 91       	pop	r16
     b48:	ff 90       	pop	r15
     b4a:	ef 90       	pop	r14
     b4c:	08 95       	ret

00000b4e <prvResetNextTaskUnblockTime>:
    /* Reset the event list item to its normal value - so it can be used with
     * queues and semaphores. */
    listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */

    return uxReturn;
}
     b4e:	e0 91 9a 06 	lds	r30, 0x069A	; 0x80069a <pxDelayedTaskList>
     b52:	f0 91 9b 06 	lds	r31, 0x069B	; 0x80069b <pxDelayedTaskList+0x1>
     b56:	80 81       	ld	r24, Z
     b58:	81 11       	cpse	r24, r1
     b5a:	07 c0       	rjmp	.+14     	; 0xb6a <prvResetNextTaskUnblockTime+0x1c>
     b5c:	8f ef       	ldi	r24, 0xFF	; 255
     b5e:	9f ef       	ldi	r25, 0xFF	; 255
     b60:	90 93 7a 06 	sts	0x067A, r25	; 0x80067a <xNextTaskUnblockTime+0x1>
     b64:	80 93 79 06 	sts	0x0679, r24	; 0x800679 <xNextTaskUnblockTime>
     b68:	08 95       	ret
     b6a:	e0 91 9a 06 	lds	r30, 0x069A	; 0x80069a <pxDelayedTaskList>
     b6e:	f0 91 9b 06 	lds	r31, 0x069B	; 0x80069b <pxDelayedTaskList+0x1>
     b72:	05 80       	ldd	r0, Z+5	; 0x05
     b74:	f6 81       	ldd	r31, Z+6	; 0x06
     b76:	e0 2d       	mov	r30, r0
     b78:	80 81       	ld	r24, Z
     b7a:	91 81       	ldd	r25, Z+1	; 0x01
     b7c:	90 93 7a 06 	sts	0x067A, r25	; 0x80067a <xNextTaskUnblockTime+0x1>
     b80:	80 93 79 06 	sts	0x0679, r24	; 0x800679 <xNextTaskUnblockTime>
     b84:	08 95       	ret

00000b86 <prvDeleteTCB>:
     b86:	cf 93       	push	r28
     b88:	df 93       	push	r29
     b8a:	ec 01       	movw	r28, r24
     b8c:	8f 89       	ldd	r24, Y+23	; 0x17
     b8e:	98 8d       	ldd	r25, Y+24	; 0x18
     b90:	0e 94 83 00 	call	0x106	; 0x106 <vPortFree>
     b94:	ce 01       	movw	r24, r28
     b96:	0e 94 83 00 	call	0x106	; 0x106 <vPortFree>
     b9a:	df 91       	pop	r29
     b9c:	cf 91       	pop	r28
     b9e:	08 95       	ret

00000ba0 <prvInitialiseNewTask>:
     ba0:	6f 92       	push	r6
     ba2:	7f 92       	push	r7
     ba4:	8f 92       	push	r8
     ba6:	9f 92       	push	r9
     ba8:	af 92       	push	r10
     baa:	bf 92       	push	r11
     bac:	cf 92       	push	r12
     bae:	df 92       	push	r13
     bb0:	ef 92       	push	r14
     bb2:	0f 93       	push	r16
     bb4:	1f 93       	push	r17
     bb6:	cf 93       	push	r28
     bb8:	df 93       	push	r29
     bba:	cd b7       	in	r28, 0x3d	; 61
     bbc:	de b7       	in	r29, 0x3e	; 62
     bbe:	4c 01       	movw	r8, r24
     bc0:	f5 01       	movw	r30, r10
     bc2:	87 89       	ldd	r24, Z+23	; 0x17
     bc4:	90 8d       	ldd	r25, Z+24	; 0x18
     bc6:	21 50       	subi	r18, 0x01	; 1
     bc8:	31 09       	sbc	r19, r1
     bca:	3c 01       	movw	r6, r24
     bcc:	62 0e       	add	r6, r18
     bce:	73 1e       	adc	r7, r19
     bd0:	61 15       	cp	r22, r1
     bd2:	71 05       	cpc	r23, r1
     bd4:	89 f4       	brne	.+34     	; 0xbf8 <prvInitialiseNewTask+0x58>
     bd6:	15 c0       	rjmp	.+42     	; 0xc02 <prvInitialiseNewTask+0x62>
     bd8:	82 2f       	mov	r24, r18
     bda:	90 e0       	ldi	r25, 0x00	; 0
     bdc:	fb 01       	movw	r30, r22
     bde:	e8 0f       	add	r30, r24
     be0:	f9 1f       	adc	r31, r25
     be2:	30 81       	ld	r19, Z
     be4:	d5 01       	movw	r26, r10
     be6:	a8 0f       	add	r26, r24
     be8:	b9 1f       	adc	r27, r25
     bea:	59 96       	adiw	r26, 0x19	; 25
     bec:	3c 93       	st	X, r19
     bee:	80 81       	ld	r24, Z
     bf0:	88 23       	and	r24, r24
     bf2:	29 f0       	breq	.+10     	; 0xbfe <prvInitialiseNewTask+0x5e>
     bf4:	2f 5f       	subi	r18, 0xFF	; 255
     bf6:	01 c0       	rjmp	.+2      	; 0xbfa <prvInitialiseNewTask+0x5a>
     bf8:	20 e0       	ldi	r18, 0x00	; 0
     bfa:	28 30       	cpi	r18, 0x08	; 8
     bfc:	68 f3       	brcs	.-38     	; 0xbd8 <prvInitialiseNewTask+0x38>
     bfe:	f5 01       	movw	r30, r10
     c00:	10 a2       	std	Z+32, r1	; 0x20
     c02:	f3 e0       	ldi	r31, 0x03	; 3
     c04:	fe 15       	cp	r31, r14
     c06:	20 f4       	brcc	.+8      	; 0xc10 <prvInitialiseNewTask+0x70>
     c08:	0f 2e       	mov	r0, r31
     c0a:	f3 e0       	ldi	r31, 0x03	; 3
     c0c:	ef 2e       	mov	r14, r31
     c0e:	f0 2d       	mov	r31, r0
     c10:	f5 01       	movw	r30, r10
     c12:	e6 8a       	std	Z+22, r14	; 0x16
     c14:	e1 a2       	std	Z+33, r14	; 0x21
     c16:	c5 01       	movw	r24, r10
     c18:	02 96       	adiw	r24, 0x02	; 2
     c1a:	0e 94 92 00 	call	0x124	; 0x124 <vListInitialiseItem>
     c1e:	c5 01       	movw	r24, r10
     c20:	0c 96       	adiw	r24, 0x0c	; 12
     c22:	0e 94 92 00 	call	0x124	; 0x124 <vListInitialiseItem>
     c26:	f5 01       	movw	r30, r10
     c28:	b1 86       	std	Z+9, r11	; 0x09
     c2a:	a0 86       	std	Z+8, r10	; 0x08
     c2c:	84 e0       	ldi	r24, 0x04	; 4
     c2e:	90 e0       	ldi	r25, 0x00	; 0
     c30:	8e 19       	sub	r24, r14
     c32:	91 09       	sbc	r25, r1
     c34:	95 87       	std	Z+13, r25	; 0x0d
     c36:	84 87       	std	Z+12, r24	; 0x0c
     c38:	b3 8a       	std	Z+19, r11	; 0x13
     c3a:	a2 8a       	std	Z+18, r10	; 0x12
     c3c:	a8 01       	movw	r20, r16
     c3e:	b4 01       	movw	r22, r8
     c40:	c3 01       	movw	r24, r6
     c42:	0e 94 81 01 	call	0x302	; 0x302 <pxPortInitialiseStack>
     c46:	f5 01       	movw	r30, r10
     c48:	91 83       	std	Z+1, r25	; 0x01
     c4a:	80 83       	st	Z, r24
     c4c:	c1 14       	cp	r12, r1
     c4e:	d1 04       	cpc	r13, r1
     c50:	19 f0       	breq	.+6      	; 0xc58 <prvInitialiseNewTask+0xb8>
     c52:	f6 01       	movw	r30, r12
     c54:	b1 82       	std	Z+1, r11	; 0x01
     c56:	a0 82       	st	Z, r10
     c58:	df 91       	pop	r29
     c5a:	cf 91       	pop	r28
     c5c:	1f 91       	pop	r17
     c5e:	0f 91       	pop	r16
     c60:	ef 90       	pop	r14
     c62:	df 90       	pop	r13
     c64:	cf 90       	pop	r12
     c66:	bf 90       	pop	r11
     c68:	af 90       	pop	r10
     c6a:	9f 90       	pop	r9
     c6c:	8f 90       	pop	r8
     c6e:	7f 90       	pop	r7
     c70:	6f 90       	pop	r6
     c72:	08 95       	ret

00000c74 <prvInitialiseTaskLists>:
     c74:	cf 93       	push	r28
     c76:	c0 e0       	ldi	r28, 0x00	; 0
     c78:	10 c0       	rjmp	.+32     	; 0xc9a <prvInitialiseTaskLists+0x26>
     c7a:	8c 2f       	mov	r24, r28
     c7c:	90 e0       	ldi	r25, 0x00	; 0
     c7e:	9c 01       	movw	r18, r24
     c80:	22 0f       	add	r18, r18
     c82:	33 1f       	adc	r19, r19
     c84:	22 0f       	add	r18, r18
     c86:	33 1f       	adc	r19, r19
     c88:	22 0f       	add	r18, r18
     c8a:	33 1f       	adc	r19, r19
     c8c:	82 0f       	add	r24, r18
     c8e:	93 1f       	adc	r25, r19
     c90:	82 55       	subi	r24, 0x52	; 82
     c92:	99 4f       	sbci	r25, 0xF9	; 249
     c94:	0e 94 84 00 	call	0x108	; 0x108 <vListInitialise>
     c98:	cf 5f       	subi	r28, 0xFF	; 255
     c9a:	c4 30       	cpi	r28, 0x04	; 4
     c9c:	70 f3       	brcs	.-36     	; 0xc7a <prvInitialiseTaskLists+0x6>
     c9e:	85 ea       	ldi	r24, 0xA5	; 165
     ca0:	96 e0       	ldi	r25, 0x06	; 6
     ca2:	0e 94 84 00 	call	0x108	; 0x108 <vListInitialise>
     ca6:	8c e9       	ldi	r24, 0x9C	; 156
     ca8:	96 e0       	ldi	r25, 0x06	; 6
     caa:	0e 94 84 00 	call	0x108	; 0x108 <vListInitialise>
     cae:	8f e8       	ldi	r24, 0x8F	; 143
     cb0:	96 e0       	ldi	r25, 0x06	; 6
     cb2:	0e 94 84 00 	call	0x108	; 0x108 <vListInitialise>
     cb6:	86 e8       	ldi	r24, 0x86	; 134
     cb8:	96 e0       	ldi	r25, 0x06	; 6
     cba:	0e 94 84 00 	call	0x108	; 0x108 <vListInitialise>
     cbe:	85 ea       	ldi	r24, 0xA5	; 165
     cc0:	96 e0       	ldi	r25, 0x06	; 6
     cc2:	90 93 9b 06 	sts	0x069B, r25	; 0x80069b <pxDelayedTaskList+0x1>
     cc6:	80 93 9a 06 	sts	0x069A, r24	; 0x80069a <pxDelayedTaskList>
     cca:	8c e9       	ldi	r24, 0x9C	; 156
     ccc:	96 e0       	ldi	r25, 0x06	; 6
     cce:	90 93 99 06 	sts	0x0699, r25	; 0x800699 <pxOverflowDelayedTaskList+0x1>
     cd2:	80 93 98 06 	sts	0x0698, r24	; 0x800698 <pxOverflowDelayedTaskList>
     cd6:	cf 91       	pop	r28
     cd8:	08 95       	ret

00000cda <prvAddNewTaskToReadyList>:
     cda:	cf 93       	push	r28
     cdc:	df 93       	push	r29
     cde:	ec 01       	movw	r28, r24
     ce0:	0f b6       	in	r0, 0x3f	; 63
     ce2:	f8 94       	cli
     ce4:	0f 92       	push	r0
     ce6:	80 91 84 06 	lds	r24, 0x0684	; 0x800684 <uxCurrentNumberOfTasks>
     cea:	8f 5f       	subi	r24, 0xFF	; 255
     cec:	80 93 84 06 	sts	0x0684, r24	; 0x800684 <uxCurrentNumberOfTasks>
     cf0:	80 91 d2 06 	lds	r24, 0x06D2	; 0x8006d2 <pxCurrentTCB>
     cf4:	90 91 d3 06 	lds	r25, 0x06D3	; 0x8006d3 <pxCurrentTCB+0x1>
     cf8:	89 2b       	or	r24, r25
     cfa:	59 f4       	brne	.+22     	; 0xd12 <prvAddNewTaskToReadyList+0x38>
     cfc:	d0 93 d3 06 	sts	0x06D3, r29	; 0x8006d3 <pxCurrentTCB+0x1>
     d00:	c0 93 d2 06 	sts	0x06D2, r28	; 0x8006d2 <pxCurrentTCB>
     d04:	80 91 84 06 	lds	r24, 0x0684	; 0x800684 <uxCurrentNumberOfTasks>
     d08:	81 30       	cpi	r24, 0x01	; 1
     d0a:	99 f4       	brne	.+38     	; 0xd32 <prvAddNewTaskToReadyList+0x58>
     d0c:	0e 94 3a 06 	call	0xc74	; 0xc74 <prvInitialiseTaskLists>
     d10:	10 c0       	rjmp	.+32     	; 0xd32 <prvAddNewTaskToReadyList+0x58>
     d12:	80 91 80 06 	lds	r24, 0x0680	; 0x800680 <xSchedulerRunning>
     d16:	81 11       	cpse	r24, r1
     d18:	0c c0       	rjmp	.+24     	; 0xd32 <prvAddNewTaskToReadyList+0x58>
     d1a:	e0 91 d2 06 	lds	r30, 0x06D2	; 0x8006d2 <pxCurrentTCB>
     d1e:	f0 91 d3 06 	lds	r31, 0x06D3	; 0x8006d3 <pxCurrentTCB+0x1>
     d22:	96 89       	ldd	r25, Z+22	; 0x16
     d24:	8e 89       	ldd	r24, Y+22	; 0x16
     d26:	89 17       	cp	r24, r25
     d28:	20 f0       	brcs	.+8      	; 0xd32 <prvAddNewTaskToReadyList+0x58>
     d2a:	d0 93 d3 06 	sts	0x06D3, r29	; 0x8006d3 <pxCurrentTCB+0x1>
     d2e:	c0 93 d2 06 	sts	0x06D2, r28	; 0x8006d2 <pxCurrentTCB>
     d32:	80 91 7b 06 	lds	r24, 0x067B	; 0x80067b <uxTaskNumber>
     d36:	8f 5f       	subi	r24, 0xFF	; 255
     d38:	80 93 7b 06 	sts	0x067B, r24	; 0x80067b <uxTaskNumber>
     d3c:	8e 89       	ldd	r24, Y+22	; 0x16
     d3e:	90 91 81 06 	lds	r25, 0x0681	; 0x800681 <uxTopReadyPriority>
     d42:	98 17       	cp	r25, r24
     d44:	10 f4       	brcc	.+4      	; 0xd4a <prvAddNewTaskToReadyList+0x70>
     d46:	80 93 81 06 	sts	0x0681, r24	; 0x800681 <uxTopReadyPriority>
     d4a:	90 e0       	ldi	r25, 0x00	; 0
     d4c:	fc 01       	movw	r30, r24
     d4e:	ee 0f       	add	r30, r30
     d50:	ff 1f       	adc	r31, r31
     d52:	ee 0f       	add	r30, r30
     d54:	ff 1f       	adc	r31, r31
     d56:	ee 0f       	add	r30, r30
     d58:	ff 1f       	adc	r31, r31
     d5a:	8e 0f       	add	r24, r30
     d5c:	9f 1f       	adc	r25, r31
     d5e:	fc 01       	movw	r30, r24
     d60:	e2 55       	subi	r30, 0x52	; 82
     d62:	f9 4f       	sbci	r31, 0xF9	; 249
     d64:	01 80       	ldd	r0, Z+1	; 0x01
     d66:	f2 81       	ldd	r31, Z+2	; 0x02
     d68:	e0 2d       	mov	r30, r0
     d6a:	fd 83       	std	Y+5, r31	; 0x05
     d6c:	ec 83       	std	Y+4, r30	; 0x04
     d6e:	84 81       	ldd	r24, Z+4	; 0x04
     d70:	95 81       	ldd	r25, Z+5	; 0x05
     d72:	9f 83       	std	Y+7, r25	; 0x07
     d74:	8e 83       	std	Y+6, r24	; 0x06
     d76:	a4 81       	ldd	r26, Z+4	; 0x04
     d78:	b5 81       	ldd	r27, Z+5	; 0x05
     d7a:	ce 01       	movw	r24, r28
     d7c:	02 96       	adiw	r24, 0x02	; 2
     d7e:	13 96       	adiw	r26, 0x03	; 3
     d80:	9c 93       	st	X, r25
     d82:	8e 93       	st	-X, r24
     d84:	12 97       	sbiw	r26, 0x02	; 2
     d86:	95 83       	std	Z+5, r25	; 0x05
     d88:	84 83       	std	Z+4, r24	; 0x04
     d8a:	ee 89       	ldd	r30, Y+22	; 0x16
     d8c:	f0 e0       	ldi	r31, 0x00	; 0
     d8e:	cf 01       	movw	r24, r30
     d90:	88 0f       	add	r24, r24
     d92:	99 1f       	adc	r25, r25
     d94:	88 0f       	add	r24, r24
     d96:	99 1f       	adc	r25, r25
     d98:	88 0f       	add	r24, r24
     d9a:	99 1f       	adc	r25, r25
     d9c:	e8 0f       	add	r30, r24
     d9e:	f9 1f       	adc	r31, r25
     da0:	e2 55       	subi	r30, 0x52	; 82
     da2:	f9 4f       	sbci	r31, 0xF9	; 249
     da4:	fb 87       	std	Y+11, r31	; 0x0b
     da6:	ea 87       	std	Y+10, r30	; 0x0a
     da8:	80 81       	ld	r24, Z
     daa:	8f 5f       	subi	r24, 0xFF	; 255
     dac:	80 83       	st	Z, r24
     dae:	0f 90       	pop	r0
     db0:	0f be       	out	0x3f, r0	; 63
     db2:	80 91 80 06 	lds	r24, 0x0680	; 0x800680 <xSchedulerRunning>
     db6:	88 23       	and	r24, r24
     db8:	51 f0       	breq	.+20     	; 0xdce <prvAddNewTaskToReadyList+0xf4>
     dba:	e0 91 d2 06 	lds	r30, 0x06D2	; 0x8006d2 <pxCurrentTCB>
     dbe:	f0 91 d3 06 	lds	r31, 0x06D3	; 0x8006d3 <pxCurrentTCB+0x1>
     dc2:	96 89       	ldd	r25, Z+22	; 0x16
     dc4:	8e 89       	ldd	r24, Y+22	; 0x16
     dc6:	98 17       	cp	r25, r24
     dc8:	10 f4       	brcc	.+4      	; 0xdce <prvAddNewTaskToReadyList+0xf4>
     dca:	0e 94 1c 02 	call	0x438	; 0x438 <vPortYield>
     dce:	df 91       	pop	r29
     dd0:	cf 91       	pop	r28
     dd2:	08 95       	ret

00000dd4 <prvCheckTasksWaitingTermination>:
     dd4:	cf 93       	push	r28
     dd6:	df 93       	push	r29
     dd8:	1c c0       	rjmp	.+56     	; 0xe12 <prvCheckTasksWaitingTermination+0x3e>
     dda:	0f b6       	in	r0, 0x3f	; 63
     ddc:	f8 94       	cli
     dde:	0f 92       	push	r0
     de0:	e0 91 8b 06 	lds	r30, 0x068B	; 0x80068b <xTasksWaitingTermination+0x5>
     de4:	f0 91 8c 06 	lds	r31, 0x068C	; 0x80068c <xTasksWaitingTermination+0x6>
     de8:	c6 81       	ldd	r28, Z+6	; 0x06
     dea:	d7 81       	ldd	r29, Z+7	; 0x07
     dec:	ce 01       	movw	r24, r28
     dee:	02 96       	adiw	r24, 0x02	; 2
     df0:	0e 94 c7 00 	call	0x18e	; 0x18e <uxListRemove>
     df4:	80 91 84 06 	lds	r24, 0x0684	; 0x800684 <uxCurrentNumberOfTasks>
     df8:	81 50       	subi	r24, 0x01	; 1
     dfa:	80 93 84 06 	sts	0x0684, r24	; 0x800684 <uxCurrentNumberOfTasks>
     dfe:	80 91 85 06 	lds	r24, 0x0685	; 0x800685 <uxDeletedTasksWaitingCleanUp>
     e02:	81 50       	subi	r24, 0x01	; 1
     e04:	80 93 85 06 	sts	0x0685, r24	; 0x800685 <uxDeletedTasksWaitingCleanUp>
     e08:	0f 90       	pop	r0
     e0a:	0f be       	out	0x3f, r0	; 63
     e0c:	ce 01       	movw	r24, r28
     e0e:	0e 94 c3 05 	call	0xb86	; 0xb86 <prvDeleteTCB>
     e12:	80 91 85 06 	lds	r24, 0x0685	; 0x800685 <uxDeletedTasksWaitingCleanUp>
     e16:	81 11       	cpse	r24, r1
     e18:	e0 cf       	rjmp	.-64     	; 0xdda <prvCheckTasksWaitingTermination+0x6>
     e1a:	df 91       	pop	r29
     e1c:	cf 91       	pop	r28
     e1e:	08 95       	ret

00000e20 <prvIdleTask>:
     e20:	0e 94 ea 06 	call	0xdd4	; 0xdd4 <prvCheckTasksWaitingTermination>
     e24:	80 91 ae 06 	lds	r24, 0x06AE	; 0x8006ae <pxReadyTasksLists>
     e28:	82 30       	cpi	r24, 0x02	; 2
     e2a:	d0 f3       	brcs	.-12     	; 0xe20 <prvIdleTask>
     e2c:	0e 94 1c 02 	call	0x438	; 0x438 <vPortYield>
     e30:	f7 cf       	rjmp	.-18     	; 0xe20 <prvIdleTask>

00000e32 <prvAddCurrentTaskToDelayedList>:
     e32:	0f 93       	push	r16
     e34:	1f 93       	push	r17
     e36:	cf 93       	push	r28
     e38:	df 93       	push	r29
     e3a:	ec 01       	movw	r28, r24
     e3c:	00 91 82 06 	lds	r16, 0x0682	; 0x800682 <xTickCount>
     e40:	10 91 83 06 	lds	r17, 0x0683	; 0x800683 <xTickCount+0x1>
     e44:	80 91 d2 06 	lds	r24, 0x06D2	; 0x8006d2 <pxCurrentTCB>
     e48:	90 91 d3 06 	lds	r25, 0x06D3	; 0x8006d3 <pxCurrentTCB+0x1>
     e4c:	02 96       	adiw	r24, 0x02	; 2
     e4e:	0e 94 c7 00 	call	0x18e	; 0x18e <uxListRemove>
     e52:	c0 0f       	add	r28, r16
     e54:	d1 1f       	adc	r29, r17
     e56:	e0 91 d2 06 	lds	r30, 0x06D2	; 0x8006d2 <pxCurrentTCB>
     e5a:	f0 91 d3 06 	lds	r31, 0x06D3	; 0x8006d3 <pxCurrentTCB+0x1>
     e5e:	d3 83       	std	Z+3, r29	; 0x03
     e60:	c2 83       	std	Z+2, r28	; 0x02
     e62:	c0 17       	cp	r28, r16
     e64:	d1 07       	cpc	r29, r17
     e66:	68 f4       	brcc	.+26     	; 0xe82 <prvAddCurrentTaskToDelayedList+0x50>
     e68:	60 91 d2 06 	lds	r22, 0x06D2	; 0x8006d2 <pxCurrentTCB>
     e6c:	70 91 d3 06 	lds	r23, 0x06D3	; 0x8006d3 <pxCurrentTCB+0x1>
     e70:	80 91 98 06 	lds	r24, 0x0698	; 0x800698 <pxOverflowDelayedTaskList>
     e74:	90 91 99 06 	lds	r25, 0x0699	; 0x800699 <pxOverflowDelayedTaskList+0x1>
     e78:	6e 5f       	subi	r22, 0xFE	; 254
     e7a:	7f 4f       	sbci	r23, 0xFF	; 255
     e7c:	0e 94 96 00 	call	0x12c	; 0x12c <vListInsert>
     e80:	17 c0       	rjmp	.+46     	; 0xeb0 <prvAddCurrentTaskToDelayedList+0x7e>
     e82:	60 91 d2 06 	lds	r22, 0x06D2	; 0x8006d2 <pxCurrentTCB>
     e86:	70 91 d3 06 	lds	r23, 0x06D3	; 0x8006d3 <pxCurrentTCB+0x1>
     e8a:	80 91 9a 06 	lds	r24, 0x069A	; 0x80069a <pxDelayedTaskList>
     e8e:	90 91 9b 06 	lds	r25, 0x069B	; 0x80069b <pxDelayedTaskList+0x1>
     e92:	6e 5f       	subi	r22, 0xFE	; 254
     e94:	7f 4f       	sbci	r23, 0xFF	; 255
     e96:	0e 94 96 00 	call	0x12c	; 0x12c <vListInsert>
     e9a:	80 91 79 06 	lds	r24, 0x0679	; 0x800679 <xNextTaskUnblockTime>
     e9e:	90 91 7a 06 	lds	r25, 0x067A	; 0x80067a <xNextTaskUnblockTime+0x1>
     ea2:	c8 17       	cp	r28, r24
     ea4:	d9 07       	cpc	r29, r25
     ea6:	20 f4       	brcc	.+8      	; 0xeb0 <prvAddCurrentTaskToDelayedList+0x7e>
     ea8:	d0 93 7a 06 	sts	0x067A, r29	; 0x80067a <xNextTaskUnblockTime+0x1>
     eac:	c0 93 79 06 	sts	0x0679, r28	; 0x800679 <xNextTaskUnblockTime>
     eb0:	df 91       	pop	r29
     eb2:	cf 91       	pop	r28
     eb4:	1f 91       	pop	r17
     eb6:	0f 91       	pop	r16
     eb8:	08 95       	ret

00000eba <xTaskCreate>:
     eba:	2f 92       	push	r2
     ebc:	3f 92       	push	r3
     ebe:	4f 92       	push	r4
     ec0:	5f 92       	push	r5
     ec2:	6f 92       	push	r6
     ec4:	7f 92       	push	r7
     ec6:	8f 92       	push	r8
     ec8:	9f 92       	push	r9
     eca:	af 92       	push	r10
     ecc:	bf 92       	push	r11
     ece:	cf 92       	push	r12
     ed0:	df 92       	push	r13
     ed2:	ef 92       	push	r14
     ed4:	ff 92       	push	r15
     ed6:	0f 93       	push	r16
     ed8:	1f 93       	push	r17
     eda:	cf 93       	push	r28
     edc:	df 93       	push	r29
     ede:	3c 01       	movw	r6, r24
     ee0:	1b 01       	movw	r2, r22
     ee2:	5a 01       	movw	r10, r20
     ee4:	29 01       	movw	r4, r18
     ee6:	ca 01       	movw	r24, r20
     ee8:	0e 94 49 00 	call	0x92	; 0x92 <pvPortMalloc>
     eec:	6c 01       	movw	r12, r24
     eee:	89 2b       	or	r24, r25
     ef0:	99 f0       	breq	.+38     	; 0xf18 <xTaskCreate+0x5e>
     ef2:	88 e2       	ldi	r24, 0x28	; 40
     ef4:	90 e0       	ldi	r25, 0x00	; 0
     ef6:	0e 94 49 00 	call	0x92	; 0x92 <pvPortMalloc>
     efa:	ec 01       	movw	r28, r24
     efc:	89 2b       	or	r24, r25
     efe:	41 f0       	breq	.+16     	; 0xf10 <xTaskCreate+0x56>
     f00:	88 e2       	ldi	r24, 0x28	; 40
     f02:	fe 01       	movw	r30, r28
     f04:	11 92       	st	Z+, r1
     f06:	8a 95       	dec	r24
     f08:	e9 f7       	brne	.-6      	; 0xf04 <xTaskCreate+0x4a>
     f0a:	d8 8e       	std	Y+24, r13	; 0x18
     f0c:	cf 8a       	std	Y+23, r12	; 0x17
     f0e:	06 c0       	rjmp	.+12     	; 0xf1c <xTaskCreate+0x62>
     f10:	c6 01       	movw	r24, r12
     f12:	0e 94 83 00 	call	0x106	; 0x106 <vPortFree>
     f16:	02 c0       	rjmp	.+4      	; 0xf1c <xTaskCreate+0x62>
     f18:	c0 e0       	ldi	r28, 0x00	; 0
     f1a:	d0 e0       	ldi	r29, 0x00	; 0
     f1c:	20 97       	sbiw	r28, 0x00	; 0
     f1e:	91 f0       	breq	.+36     	; 0xf44 <xTaskCreate+0x8a>
     f20:	95 01       	movw	r18, r10
     f22:	40 e0       	ldi	r20, 0x00	; 0
     f24:	50 e0       	ldi	r21, 0x00	; 0
     f26:	81 2c       	mov	r8, r1
     f28:	91 2c       	mov	r9, r1
     f2a:	5e 01       	movw	r10, r28
     f2c:	67 01       	movw	r12, r14
     f2e:	e0 2e       	mov	r14, r16
     f30:	82 01       	movw	r16, r4
     f32:	b1 01       	movw	r22, r2
     f34:	c3 01       	movw	r24, r6
     f36:	0e 94 d0 05 	call	0xba0	; 0xba0 <prvInitialiseNewTask>
     f3a:	ce 01       	movw	r24, r28
     f3c:	0e 94 6d 06 	call	0xcda	; 0xcda <prvAddNewTaskToReadyList>
     f40:	81 e0       	ldi	r24, 0x01	; 1
     f42:	01 c0       	rjmp	.+2      	; 0xf46 <xTaskCreate+0x8c>
     f44:	8f ef       	ldi	r24, 0xFF	; 255
     f46:	df 91       	pop	r29
     f48:	cf 91       	pop	r28
     f4a:	1f 91       	pop	r17
     f4c:	0f 91       	pop	r16
     f4e:	ff 90       	pop	r15
     f50:	ef 90       	pop	r14
     f52:	df 90       	pop	r13
     f54:	cf 90       	pop	r12
     f56:	bf 90       	pop	r11
     f58:	af 90       	pop	r10
     f5a:	9f 90       	pop	r9
     f5c:	8f 90       	pop	r8
     f5e:	7f 90       	pop	r7
     f60:	6f 90       	pop	r6
     f62:	5f 90       	pop	r5
     f64:	4f 90       	pop	r4
     f66:	3f 90       	pop	r3
     f68:	2f 90       	pop	r2
     f6a:	08 95       	ret

00000f6c <vTaskStartScheduler>:
     f6c:	ef 92       	push	r14
     f6e:	ff 92       	push	r15
     f70:	0f 93       	push	r16
     f72:	0f 2e       	mov	r0, r31
     f74:	f7 e7       	ldi	r31, 0x77	; 119
     f76:	ef 2e       	mov	r14, r31
     f78:	f6 e0       	ldi	r31, 0x06	; 6
     f7a:	ff 2e       	mov	r15, r31
     f7c:	f0 2d       	mov	r31, r0
     f7e:	00 e0       	ldi	r16, 0x00	; 0
     f80:	20 e0       	ldi	r18, 0x00	; 0
     f82:	30 e0       	ldi	r19, 0x00	; 0
     f84:	45 e5       	ldi	r20, 0x55	; 85
     f86:	50 e0       	ldi	r21, 0x00	; 0
     f88:	61 e9       	ldi	r22, 0x91	; 145
     f8a:	70 e0       	ldi	r23, 0x00	; 0
     f8c:	80 e1       	ldi	r24, 0x10	; 16
     f8e:	97 e0       	ldi	r25, 0x07	; 7
     f90:	0e 94 5d 07 	call	0xeba	; 0xeba <xTaskCreate>
     f94:	81 30       	cpi	r24, 0x01	; 1
     f96:	81 f4       	brne	.+32     	; 0xfb8 <vTaskStartScheduler+0x4c>
     f98:	f8 94       	cli
     f9a:	8f ef       	ldi	r24, 0xFF	; 255
     f9c:	9f ef       	ldi	r25, 0xFF	; 255
     f9e:	90 93 7a 06 	sts	0x067A, r25	; 0x80067a <xNextTaskUnblockTime+0x1>
     fa2:	80 93 79 06 	sts	0x0679, r24	; 0x800679 <xNextTaskUnblockTime>
     fa6:	81 e0       	ldi	r24, 0x01	; 1
     fa8:	80 93 80 06 	sts	0x0680, r24	; 0x800680 <xSchedulerRunning>
     fac:	10 92 83 06 	sts	0x0683, r1	; 0x800683 <xTickCount+0x1>
     fb0:	10 92 82 06 	sts	0x0682, r1	; 0x800682 <xTickCount>
     fb4:	0e 94 ed 01 	call	0x3da	; 0x3da <xPortStartScheduler>
     fb8:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     fbc:	0f 91       	pop	r16
     fbe:	ff 90       	pop	r15
     fc0:	ef 90       	pop	r14
     fc2:	08 95       	ret

00000fc4 <vTaskSuspendAll>:
     fc4:	80 91 76 06 	lds	r24, 0x0676	; 0x800676 <uxSchedulerSuspended>
     fc8:	8f 5f       	subi	r24, 0xFF	; 255
     fca:	80 93 76 06 	sts	0x0676, r24	; 0x800676 <uxSchedulerSuspended>
     fce:	08 95       	ret

00000fd0 <xTaskIncrementTick>:
     fd0:	0f 93       	push	r16
     fd2:	1f 93       	push	r17
     fd4:	cf 93       	push	r28
     fd6:	df 93       	push	r29
     fd8:	80 91 76 06 	lds	r24, 0x0676	; 0x800676 <uxSchedulerSuspended>
     fdc:	81 11       	cpse	r24, r1
     fde:	01 c1       	rjmp	.+514    	; 0x11e2 <xTaskIncrementTick+0x212>
     fe0:	c0 91 82 06 	lds	r28, 0x0682	; 0x800682 <xTickCount>
     fe4:	d0 91 83 06 	lds	r29, 0x0683	; 0x800683 <xTickCount+0x1>
     fe8:	8e 01       	movw	r16, r28
     fea:	0f 5f       	subi	r16, 0xFF	; 255
     fec:	1f 4f       	sbci	r17, 0xFF	; 255
     fee:	10 93 83 06 	sts	0x0683, r17	; 0x800683 <xTickCount+0x1>
     ff2:	00 93 82 06 	sts	0x0682, r16	; 0x800682 <xTickCount>
     ff6:	01 15       	cp	r16, r1
     ff8:	11 05       	cpc	r17, r1
     ffa:	b9 f4       	brne	.+46     	; 0x102a <xTaskIncrementTick+0x5a>
     ffc:	80 91 9a 06 	lds	r24, 0x069A	; 0x80069a <pxDelayedTaskList>
    1000:	90 91 9b 06 	lds	r25, 0x069B	; 0x80069b <pxDelayedTaskList+0x1>
    1004:	20 91 98 06 	lds	r18, 0x0698	; 0x800698 <pxOverflowDelayedTaskList>
    1008:	30 91 99 06 	lds	r19, 0x0699	; 0x800699 <pxOverflowDelayedTaskList+0x1>
    100c:	30 93 9b 06 	sts	0x069B, r19	; 0x80069b <pxDelayedTaskList+0x1>
    1010:	20 93 9a 06 	sts	0x069A, r18	; 0x80069a <pxDelayedTaskList>
    1014:	90 93 99 06 	sts	0x0699, r25	; 0x800699 <pxOverflowDelayedTaskList+0x1>
    1018:	80 93 98 06 	sts	0x0698, r24	; 0x800698 <pxOverflowDelayedTaskList>
    101c:	80 91 7c 06 	lds	r24, 0x067C	; 0x80067c <xNumOfOverflows>
    1020:	8f 5f       	subi	r24, 0xFF	; 255
    1022:	80 93 7c 06 	sts	0x067C, r24	; 0x80067c <xNumOfOverflows>
    1026:	0e 94 a7 05 	call	0xb4e	; 0xb4e <prvResetNextTaskUnblockTime>
    102a:	80 91 79 06 	lds	r24, 0x0679	; 0x800679 <xNextTaskUnblockTime>
    102e:	90 91 7a 06 	lds	r25, 0x067A	; 0x80067a <xNextTaskUnblockTime+0x1>
    1032:	08 17       	cp	r16, r24
    1034:	19 07       	cpc	r17, r25
    1036:	20 f4       	brcc	.+8      	; 0x1040 <xTaskIncrementTick+0x70>
    1038:	80 e0       	ldi	r24, 0x00	; 0
    103a:	b8 c0       	rjmp	.+368    	; 0x11ac <xTaskIncrementTick+0x1dc>
    103c:	81 e0       	ldi	r24, 0x01	; 1
    103e:	01 c0       	rjmp	.+2      	; 0x1042 <xTaskIncrementTick+0x72>
    1040:	80 e0       	ldi	r24, 0x00	; 0
    1042:	e0 91 9a 06 	lds	r30, 0x069A	; 0x80069a <pxDelayedTaskList>
    1046:	f0 91 9b 06 	lds	r31, 0x069B	; 0x80069b <pxDelayedTaskList+0x1>
    104a:	90 81       	ld	r25, Z
    104c:	91 11       	cpse	r25, r1
    104e:	07 c0       	rjmp	.+14     	; 0x105e <xTaskIncrementTick+0x8e>
    1050:	2f ef       	ldi	r18, 0xFF	; 255
    1052:	3f ef       	ldi	r19, 0xFF	; 255
    1054:	30 93 7a 06 	sts	0x067A, r19	; 0x80067a <xNextTaskUnblockTime+0x1>
    1058:	20 93 79 06 	sts	0x0679, r18	; 0x800679 <xNextTaskUnblockTime>
    105c:	a7 c0       	rjmp	.+334    	; 0x11ac <xTaskIncrementTick+0x1dc>
    105e:	e0 91 9a 06 	lds	r30, 0x069A	; 0x80069a <pxDelayedTaskList>
    1062:	f0 91 9b 06 	lds	r31, 0x069B	; 0x80069b <pxDelayedTaskList+0x1>
    1066:	05 80       	ldd	r0, Z+5	; 0x05
    1068:	f6 81       	ldd	r31, Z+6	; 0x06
    106a:	e0 2d       	mov	r30, r0
    106c:	06 80       	ldd	r0, Z+6	; 0x06
    106e:	f7 81       	ldd	r31, Z+7	; 0x07
    1070:	e0 2d       	mov	r30, r0
    1072:	22 81       	ldd	r18, Z+2	; 0x02
    1074:	33 81       	ldd	r19, Z+3	; 0x03
    1076:	02 17       	cp	r16, r18
    1078:	13 07       	cpc	r17, r19
    107a:	28 f4       	brcc	.+10     	; 0x1086 <xTaskIncrementTick+0xb6>
    107c:	30 93 7a 06 	sts	0x067A, r19	; 0x80067a <xNextTaskUnblockTime+0x1>
    1080:	20 93 79 06 	sts	0x0679, r18	; 0x800679 <xNextTaskUnblockTime>
    1084:	93 c0       	rjmp	.+294    	; 0x11ac <xTaskIncrementTick+0x1dc>
    1086:	a2 85       	ldd	r26, Z+10	; 0x0a
    1088:	b3 85       	ldd	r27, Z+11	; 0x0b
    108a:	24 81       	ldd	r18, Z+4	; 0x04
    108c:	35 81       	ldd	r19, Z+5	; 0x05
    108e:	46 81       	ldd	r20, Z+6	; 0x06
    1090:	57 81       	ldd	r21, Z+7	; 0x07
    1092:	e9 01       	movw	r28, r18
    1094:	5d 83       	std	Y+5, r21	; 0x05
    1096:	4c 83       	std	Y+4, r20	; 0x04
    1098:	26 81       	ldd	r18, Z+6	; 0x06
    109a:	37 81       	ldd	r19, Z+7	; 0x07
    109c:	44 81       	ldd	r20, Z+4	; 0x04
    109e:	55 81       	ldd	r21, Z+5	; 0x05
    10a0:	e9 01       	movw	r28, r18
    10a2:	5b 83       	std	Y+3, r21	; 0x03
    10a4:	4a 83       	std	Y+2, r20	; 0x02
    10a6:	11 96       	adiw	r26, 0x01	; 1
    10a8:	2d 91       	ld	r18, X+
    10aa:	3c 91       	ld	r19, X
    10ac:	12 97       	sbiw	r26, 0x02	; 2
    10ae:	af 01       	movw	r20, r30
    10b0:	4e 5f       	subi	r20, 0xFE	; 254
    10b2:	5f 4f       	sbci	r21, 0xFF	; 255
    10b4:	24 17       	cp	r18, r20
    10b6:	35 07       	cpc	r19, r21
    10b8:	31 f4       	brne	.+12     	; 0x10c6 <xTaskIncrementTick+0xf6>
    10ba:	26 81       	ldd	r18, Z+6	; 0x06
    10bc:	37 81       	ldd	r19, Z+7	; 0x07
    10be:	12 96       	adiw	r26, 0x02	; 2
    10c0:	3c 93       	st	X, r19
    10c2:	2e 93       	st	-X, r18
    10c4:	11 97       	sbiw	r26, 0x01	; 1
    10c6:	13 86       	std	Z+11, r1	; 0x0b
    10c8:	12 86       	std	Z+10, r1	; 0x0a
    10ca:	9c 91       	ld	r25, X
    10cc:	91 50       	subi	r25, 0x01	; 1
    10ce:	9c 93       	st	X, r25
    10d0:	a4 89       	ldd	r26, Z+20	; 0x14
    10d2:	b5 89       	ldd	r27, Z+21	; 0x15
    10d4:	10 97       	sbiw	r26, 0x00	; 0
    10d6:	19 f1       	breq	.+70     	; 0x111e <xTaskIncrementTick+0x14e>
    10d8:	26 85       	ldd	r18, Z+14	; 0x0e
    10da:	37 85       	ldd	r19, Z+15	; 0x0f
    10dc:	60 89       	ldd	r22, Z+16	; 0x10
    10de:	71 89       	ldd	r23, Z+17	; 0x11
    10e0:	e9 01       	movw	r28, r18
    10e2:	7d 83       	std	Y+5, r23	; 0x05
    10e4:	6c 83       	std	Y+4, r22	; 0x04
    10e6:	20 89       	ldd	r18, Z+16	; 0x10
    10e8:	31 89       	ldd	r19, Z+17	; 0x11
    10ea:	66 85       	ldd	r22, Z+14	; 0x0e
    10ec:	77 85       	ldd	r23, Z+15	; 0x0f
    10ee:	e9 01       	movw	r28, r18
    10f0:	7b 83       	std	Y+3, r23	; 0x03
    10f2:	6a 83       	std	Y+2, r22	; 0x02
    10f4:	11 96       	adiw	r26, 0x01	; 1
    10f6:	6d 91       	ld	r22, X+
    10f8:	7c 91       	ld	r23, X
    10fa:	12 97       	sbiw	r26, 0x02	; 2
    10fc:	9f 01       	movw	r18, r30
    10fe:	24 5f       	subi	r18, 0xF4	; 244
    1100:	3f 4f       	sbci	r19, 0xFF	; 255
    1102:	62 17       	cp	r22, r18
    1104:	73 07       	cpc	r23, r19
    1106:	31 f4       	brne	.+12     	; 0x1114 <xTaskIncrementTick+0x144>
    1108:	20 89       	ldd	r18, Z+16	; 0x10
    110a:	31 89       	ldd	r19, Z+17	; 0x11
    110c:	12 96       	adiw	r26, 0x02	; 2
    110e:	3c 93       	st	X, r19
    1110:	2e 93       	st	-X, r18
    1112:	11 97       	sbiw	r26, 0x01	; 1
    1114:	15 8a       	std	Z+21, r1	; 0x15
    1116:	14 8a       	std	Z+20, r1	; 0x14
    1118:	9c 91       	ld	r25, X
    111a:	91 50       	subi	r25, 0x01	; 1
    111c:	9c 93       	st	X, r25
    111e:	26 89       	ldd	r18, Z+22	; 0x16
    1120:	90 91 81 06 	lds	r25, 0x0681	; 0x800681 <uxTopReadyPriority>
    1124:	92 17       	cp	r25, r18
    1126:	10 f4       	brcc	.+4      	; 0x112c <xTaskIncrementTick+0x15c>
    1128:	20 93 81 06 	sts	0x0681, r18	; 0x800681 <uxTopReadyPriority>
    112c:	30 e0       	ldi	r19, 0x00	; 0
    112e:	d9 01       	movw	r26, r18
    1130:	aa 0f       	add	r26, r26
    1132:	bb 1f       	adc	r27, r27
    1134:	aa 0f       	add	r26, r26
    1136:	bb 1f       	adc	r27, r27
    1138:	aa 0f       	add	r26, r26
    113a:	bb 1f       	adc	r27, r27
    113c:	2a 0f       	add	r18, r26
    113e:	3b 1f       	adc	r19, r27
    1140:	d9 01       	movw	r26, r18
    1142:	a2 55       	subi	r26, 0x52	; 82
    1144:	b9 4f       	sbci	r27, 0xF9	; 249
    1146:	11 96       	adiw	r26, 0x01	; 1
    1148:	0d 90       	ld	r0, X+
    114a:	bc 91       	ld	r27, X
    114c:	a0 2d       	mov	r26, r0
    114e:	b5 83       	std	Z+5, r27	; 0x05
    1150:	a4 83       	std	Z+4, r26	; 0x04
    1152:	14 96       	adiw	r26, 0x04	; 4
    1154:	2d 91       	ld	r18, X+
    1156:	3c 91       	ld	r19, X
    1158:	15 97       	sbiw	r26, 0x05	; 5
    115a:	37 83       	std	Z+7, r19	; 0x07
    115c:	26 83       	std	Z+6, r18	; 0x06
    115e:	14 96       	adiw	r26, 0x04	; 4
    1160:	2d 91       	ld	r18, X+
    1162:	3c 91       	ld	r19, X
    1164:	15 97       	sbiw	r26, 0x05	; 5
    1166:	e9 01       	movw	r28, r18
    1168:	5b 83       	std	Y+3, r21	; 0x03
    116a:	4a 83       	std	Y+2, r20	; 0x02
    116c:	15 96       	adiw	r26, 0x05	; 5
    116e:	5c 93       	st	X, r21
    1170:	4e 93       	st	-X, r20
    1172:	14 97       	sbiw	r26, 0x04	; 4
    1174:	a6 89       	ldd	r26, Z+22	; 0x16
    1176:	b0 e0       	ldi	r27, 0x00	; 0
    1178:	9d 01       	movw	r18, r26
    117a:	22 0f       	add	r18, r18
    117c:	33 1f       	adc	r19, r19
    117e:	22 0f       	add	r18, r18
    1180:	33 1f       	adc	r19, r19
    1182:	22 0f       	add	r18, r18
    1184:	33 1f       	adc	r19, r19
    1186:	a2 0f       	add	r26, r18
    1188:	b3 1f       	adc	r27, r19
    118a:	a2 55       	subi	r26, 0x52	; 82
    118c:	b9 4f       	sbci	r27, 0xF9	; 249
    118e:	b3 87       	std	Z+11, r27	; 0x0b
    1190:	a2 87       	std	Z+10, r26	; 0x0a
    1192:	9c 91       	ld	r25, X
    1194:	9f 5f       	subi	r25, 0xFF	; 255
    1196:	9c 93       	st	X, r25
    1198:	26 89       	ldd	r18, Z+22	; 0x16
    119a:	e0 91 d2 06 	lds	r30, 0x06D2	; 0x8006d2 <pxCurrentTCB>
    119e:	f0 91 d3 06 	lds	r31, 0x06D3	; 0x8006d3 <pxCurrentTCB+0x1>
    11a2:	96 89       	ldd	r25, Z+22	; 0x16
    11a4:	92 17       	cp	r25, r18
    11a6:	08 f4       	brcc	.+2      	; 0x11aa <xTaskIncrementTick+0x1da>
    11a8:	49 cf       	rjmp	.-366    	; 0x103c <xTaskIncrementTick+0x6c>
    11aa:	4b cf       	rjmp	.-362    	; 0x1042 <xTaskIncrementTick+0x72>
    11ac:	e0 91 d2 06 	lds	r30, 0x06D2	; 0x8006d2 <pxCurrentTCB>
    11b0:	f0 91 d3 06 	lds	r31, 0x06D3	; 0x8006d3 <pxCurrentTCB+0x1>
    11b4:	26 89       	ldd	r18, Z+22	; 0x16
    11b6:	30 e0       	ldi	r19, 0x00	; 0
    11b8:	f9 01       	movw	r30, r18
    11ba:	ee 0f       	add	r30, r30
    11bc:	ff 1f       	adc	r31, r31
    11be:	ee 0f       	add	r30, r30
    11c0:	ff 1f       	adc	r31, r31
    11c2:	ee 0f       	add	r30, r30
    11c4:	ff 1f       	adc	r31, r31
    11c6:	2e 0f       	add	r18, r30
    11c8:	3f 1f       	adc	r19, r31
    11ca:	f9 01       	movw	r30, r18
    11cc:	e2 55       	subi	r30, 0x52	; 82
    11ce:	f9 4f       	sbci	r31, 0xF9	; 249
    11d0:	90 81       	ld	r25, Z
    11d2:	92 30       	cpi	r25, 0x02	; 2
    11d4:	08 f0       	brcs	.+2      	; 0x11d8 <xTaskIncrementTick+0x208>
    11d6:	81 e0       	ldi	r24, 0x01	; 1
    11d8:	90 91 7d 06 	lds	r25, 0x067D	; 0x80067d <xYieldPending>
    11dc:	91 11       	cpse	r25, r1
    11de:	0c c0       	rjmp	.+24     	; 0x11f8 <xTaskIncrementTick+0x228>
    11e0:	0c c0       	rjmp	.+24     	; 0x11fa <xTaskIncrementTick+0x22a>
    11e2:	80 91 7e 06 	lds	r24, 0x067E	; 0x80067e <xPendedTicks>
    11e6:	90 91 7f 06 	lds	r25, 0x067F	; 0x80067f <xPendedTicks+0x1>
    11ea:	01 96       	adiw	r24, 0x01	; 1
    11ec:	90 93 7f 06 	sts	0x067F, r25	; 0x80067f <xPendedTicks+0x1>
    11f0:	80 93 7e 06 	sts	0x067E, r24	; 0x80067e <xPendedTicks>
    11f4:	80 e0       	ldi	r24, 0x00	; 0
    11f6:	01 c0       	rjmp	.+2      	; 0x11fa <xTaskIncrementTick+0x22a>
    11f8:	81 e0       	ldi	r24, 0x01	; 1
    11fa:	df 91       	pop	r29
    11fc:	cf 91       	pop	r28
    11fe:	1f 91       	pop	r17
    1200:	0f 91       	pop	r16
    1202:	08 95       	ret

00001204 <xTaskResumeAll>:
    1204:	cf 93       	push	r28
    1206:	df 93       	push	r29
    1208:	0f b6       	in	r0, 0x3f	; 63
    120a:	f8 94       	cli
    120c:	0f 92       	push	r0
    120e:	80 91 76 06 	lds	r24, 0x0676	; 0x800676 <uxSchedulerSuspended>
    1212:	81 50       	subi	r24, 0x01	; 1
    1214:	80 93 76 06 	sts	0x0676, r24	; 0x800676 <uxSchedulerSuspended>
    1218:	80 91 76 06 	lds	r24, 0x0676	; 0x800676 <uxSchedulerSuspended>
    121c:	81 11       	cpse	r24, r1
    121e:	bf c0       	rjmp	.+382    	; 0x139e <xTaskResumeAll+0x19a>
    1220:	80 91 84 06 	lds	r24, 0x0684	; 0x800684 <uxCurrentNumberOfTasks>
    1224:	81 11       	cpse	r24, r1
    1226:	96 c0       	rjmp	.+300    	; 0x1354 <xTaskResumeAll+0x150>
    1228:	bd c0       	rjmp	.+378    	; 0x13a4 <xTaskResumeAll+0x1a0>
    122a:	e0 91 94 06 	lds	r30, 0x0694	; 0x800694 <xPendingReadyList+0x5>
    122e:	f0 91 95 06 	lds	r31, 0x0695	; 0x800695 <xPendingReadyList+0x6>
    1232:	06 80       	ldd	r0, Z+6	; 0x06
    1234:	f7 81       	ldd	r31, Z+7	; 0x07
    1236:	e0 2d       	mov	r30, r0
    1238:	a4 89       	ldd	r26, Z+20	; 0x14
    123a:	b5 89       	ldd	r27, Z+21	; 0x15
    123c:	c6 85       	ldd	r28, Z+14	; 0x0e
    123e:	d7 85       	ldd	r29, Z+15	; 0x0f
    1240:	80 89       	ldd	r24, Z+16	; 0x10
    1242:	91 89       	ldd	r25, Z+17	; 0x11
    1244:	9d 83       	std	Y+5, r25	; 0x05
    1246:	8c 83       	std	Y+4, r24	; 0x04
    1248:	c0 89       	ldd	r28, Z+16	; 0x10
    124a:	d1 89       	ldd	r29, Z+17	; 0x11
    124c:	86 85       	ldd	r24, Z+14	; 0x0e
    124e:	97 85       	ldd	r25, Z+15	; 0x0f
    1250:	9b 83       	std	Y+3, r25	; 0x03
    1252:	8a 83       	std	Y+2, r24	; 0x02
    1254:	11 96       	adiw	r26, 0x01	; 1
    1256:	2d 91       	ld	r18, X+
    1258:	3c 91       	ld	r19, X
    125a:	12 97       	sbiw	r26, 0x02	; 2
    125c:	cf 01       	movw	r24, r30
    125e:	0c 96       	adiw	r24, 0x0c	; 12
    1260:	28 17       	cp	r18, r24
    1262:	39 07       	cpc	r19, r25
    1264:	31 f4       	brne	.+12     	; 0x1272 <xTaskResumeAll+0x6e>
    1266:	80 89       	ldd	r24, Z+16	; 0x10
    1268:	91 89       	ldd	r25, Z+17	; 0x11
    126a:	12 96       	adiw	r26, 0x02	; 2
    126c:	9c 93       	st	X, r25
    126e:	8e 93       	st	-X, r24
    1270:	11 97       	sbiw	r26, 0x01	; 1
    1272:	15 8a       	std	Z+21, r1	; 0x15
    1274:	14 8a       	std	Z+20, r1	; 0x14
    1276:	8c 91       	ld	r24, X
    1278:	81 50       	subi	r24, 0x01	; 1
    127a:	8c 93       	st	X, r24
    127c:	a2 85       	ldd	r26, Z+10	; 0x0a
    127e:	b3 85       	ldd	r27, Z+11	; 0x0b
    1280:	c4 81       	ldd	r28, Z+4	; 0x04
    1282:	d5 81       	ldd	r29, Z+5	; 0x05
    1284:	86 81       	ldd	r24, Z+6	; 0x06
    1286:	97 81       	ldd	r25, Z+7	; 0x07
    1288:	9d 83       	std	Y+5, r25	; 0x05
    128a:	8c 83       	std	Y+4, r24	; 0x04
    128c:	c6 81       	ldd	r28, Z+6	; 0x06
    128e:	d7 81       	ldd	r29, Z+7	; 0x07
    1290:	84 81       	ldd	r24, Z+4	; 0x04
    1292:	95 81       	ldd	r25, Z+5	; 0x05
    1294:	9b 83       	std	Y+3, r25	; 0x03
    1296:	8a 83       	std	Y+2, r24	; 0x02
    1298:	11 96       	adiw	r26, 0x01	; 1
    129a:	8d 91       	ld	r24, X+
    129c:	9c 91       	ld	r25, X
    129e:	12 97       	sbiw	r26, 0x02	; 2
    12a0:	9f 01       	movw	r18, r30
    12a2:	2e 5f       	subi	r18, 0xFE	; 254
    12a4:	3f 4f       	sbci	r19, 0xFF	; 255
    12a6:	82 17       	cp	r24, r18
    12a8:	93 07       	cpc	r25, r19
    12aa:	31 f4       	brne	.+12     	; 0x12b8 <xTaskResumeAll+0xb4>
    12ac:	86 81       	ldd	r24, Z+6	; 0x06
    12ae:	97 81       	ldd	r25, Z+7	; 0x07
    12b0:	12 96       	adiw	r26, 0x02	; 2
    12b2:	9c 93       	st	X, r25
    12b4:	8e 93       	st	-X, r24
    12b6:	11 97       	sbiw	r26, 0x01	; 1
    12b8:	13 86       	std	Z+11, r1	; 0x0b
    12ba:	12 86       	std	Z+10, r1	; 0x0a
    12bc:	8c 91       	ld	r24, X
    12be:	81 50       	subi	r24, 0x01	; 1
    12c0:	8c 93       	st	X, r24
    12c2:	86 89       	ldd	r24, Z+22	; 0x16
    12c4:	90 91 81 06 	lds	r25, 0x0681	; 0x800681 <uxTopReadyPriority>
    12c8:	98 17       	cp	r25, r24
    12ca:	10 f4       	brcc	.+4      	; 0x12d0 <xTaskResumeAll+0xcc>
    12cc:	80 93 81 06 	sts	0x0681, r24	; 0x800681 <uxTopReadyPriority>
    12d0:	90 e0       	ldi	r25, 0x00	; 0
    12d2:	dc 01       	movw	r26, r24
    12d4:	aa 0f       	add	r26, r26
    12d6:	bb 1f       	adc	r27, r27
    12d8:	aa 0f       	add	r26, r26
    12da:	bb 1f       	adc	r27, r27
    12dc:	aa 0f       	add	r26, r26
    12de:	bb 1f       	adc	r27, r27
    12e0:	8a 0f       	add	r24, r26
    12e2:	9b 1f       	adc	r25, r27
    12e4:	dc 01       	movw	r26, r24
    12e6:	a2 55       	subi	r26, 0x52	; 82
    12e8:	b9 4f       	sbci	r27, 0xF9	; 249
    12ea:	11 96       	adiw	r26, 0x01	; 1
    12ec:	0d 90       	ld	r0, X+
    12ee:	bc 91       	ld	r27, X
    12f0:	a0 2d       	mov	r26, r0
    12f2:	b5 83       	std	Z+5, r27	; 0x05
    12f4:	a4 83       	std	Z+4, r26	; 0x04
    12f6:	14 96       	adiw	r26, 0x04	; 4
    12f8:	8d 91       	ld	r24, X+
    12fa:	9c 91       	ld	r25, X
    12fc:	15 97       	sbiw	r26, 0x05	; 5
    12fe:	97 83       	std	Z+7, r25	; 0x07
    1300:	86 83       	std	Z+6, r24	; 0x06
    1302:	14 96       	adiw	r26, 0x04	; 4
    1304:	cd 91       	ld	r28, X+
    1306:	dc 91       	ld	r29, X
    1308:	15 97       	sbiw	r26, 0x05	; 5
    130a:	3b 83       	std	Y+3, r19	; 0x03
    130c:	2a 83       	std	Y+2, r18	; 0x02
    130e:	15 96       	adiw	r26, 0x05	; 5
    1310:	3c 93       	st	X, r19
    1312:	2e 93       	st	-X, r18
    1314:	14 97       	sbiw	r26, 0x04	; 4
    1316:	a6 89       	ldd	r26, Z+22	; 0x16
    1318:	b0 e0       	ldi	r27, 0x00	; 0
    131a:	cd 01       	movw	r24, r26
    131c:	88 0f       	add	r24, r24
    131e:	99 1f       	adc	r25, r25
    1320:	88 0f       	add	r24, r24
    1322:	99 1f       	adc	r25, r25
    1324:	88 0f       	add	r24, r24
    1326:	99 1f       	adc	r25, r25
    1328:	a8 0f       	add	r26, r24
    132a:	b9 1f       	adc	r27, r25
    132c:	a2 55       	subi	r26, 0x52	; 82
    132e:	b9 4f       	sbci	r27, 0xF9	; 249
    1330:	b3 87       	std	Z+11, r27	; 0x0b
    1332:	a2 87       	std	Z+10, r26	; 0x0a
    1334:	8c 91       	ld	r24, X
    1336:	8f 5f       	subi	r24, 0xFF	; 255
    1338:	8c 93       	st	X, r24
    133a:	96 89       	ldd	r25, Z+22	; 0x16
    133c:	a0 91 d2 06 	lds	r26, 0x06D2	; 0x8006d2 <pxCurrentTCB>
    1340:	b0 91 d3 06 	lds	r27, 0x06D3	; 0x8006d3 <pxCurrentTCB+0x1>
    1344:	56 96       	adiw	r26, 0x16	; 22
    1346:	8c 91       	ld	r24, X
    1348:	98 17       	cp	r25, r24
    134a:	30 f0       	brcs	.+12     	; 0x1358 <xTaskResumeAll+0x154>
    134c:	81 e0       	ldi	r24, 0x01	; 1
    134e:	80 93 7d 06 	sts	0x067D, r24	; 0x80067d <xYieldPending>
    1352:	02 c0       	rjmp	.+4      	; 0x1358 <xTaskResumeAll+0x154>
    1354:	e0 e0       	ldi	r30, 0x00	; 0
    1356:	f0 e0       	ldi	r31, 0x00	; 0
    1358:	80 91 8f 06 	lds	r24, 0x068F	; 0x80068f <xPendingReadyList>
    135c:	81 11       	cpse	r24, r1
    135e:	65 cf       	rjmp	.-310    	; 0x122a <xTaskResumeAll+0x26>
    1360:	ef 2b       	or	r30, r31
    1362:	11 f0       	breq	.+4      	; 0x1368 <xTaskResumeAll+0x164>
    1364:	0e 94 a7 05 	call	0xb4e	; 0xb4e <prvResetNextTaskUnblockTime>
    1368:	c0 91 7e 06 	lds	r28, 0x067E	; 0x80067e <xPendedTicks>
    136c:	d0 91 7f 06 	lds	r29, 0x067F	; 0x80067f <xPendedTicks+0x1>
    1370:	20 97       	sbiw	r28, 0x00	; 0
    1372:	69 f0       	breq	.+26     	; 0x138e <xTaskResumeAll+0x18a>
    1374:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <xTaskIncrementTick>
    1378:	88 23       	and	r24, r24
    137a:	19 f0       	breq	.+6      	; 0x1382 <xTaskResumeAll+0x17e>
    137c:	81 e0       	ldi	r24, 0x01	; 1
    137e:	80 93 7d 06 	sts	0x067D, r24	; 0x80067d <xYieldPending>
    1382:	21 97       	sbiw	r28, 0x01	; 1
    1384:	b9 f7       	brne	.-18     	; 0x1374 <xTaskResumeAll+0x170>
    1386:	10 92 7f 06 	sts	0x067F, r1	; 0x80067f <xPendedTicks+0x1>
    138a:	10 92 7e 06 	sts	0x067E, r1	; 0x80067e <xPendedTicks>
    138e:	80 91 7d 06 	lds	r24, 0x067D	; 0x80067d <xYieldPending>
    1392:	88 23       	and	r24, r24
    1394:	31 f0       	breq	.+12     	; 0x13a2 <xTaskResumeAll+0x19e>
    1396:	0e 94 1c 02 	call	0x438	; 0x438 <vPortYield>
    139a:	81 e0       	ldi	r24, 0x01	; 1
    139c:	03 c0       	rjmp	.+6      	; 0x13a4 <xTaskResumeAll+0x1a0>
    139e:	80 e0       	ldi	r24, 0x00	; 0
    13a0:	01 c0       	rjmp	.+2      	; 0x13a4 <xTaskResumeAll+0x1a0>
    13a2:	80 e0       	ldi	r24, 0x00	; 0
    13a4:	0f 90       	pop	r0
    13a6:	0f be       	out	0x3f, r0	; 63
    13a8:	df 91       	pop	r29
    13aa:	cf 91       	pop	r28
    13ac:	08 95       	ret

000013ae <vTaskDelay>:
    13ae:	cf 93       	push	r28
    13b0:	df 93       	push	r29
    13b2:	ec 01       	movw	r28, r24
    13b4:	89 2b       	or	r24, r25
    13b6:	49 f0       	breq	.+18     	; 0x13ca <vTaskDelay+0x1c>
    13b8:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <vTaskSuspendAll>
    13bc:	60 e0       	ldi	r22, 0x00	; 0
    13be:	ce 01       	movw	r24, r28
    13c0:	0e 94 19 07 	call	0xe32	; 0xe32 <prvAddCurrentTaskToDelayedList>
    13c4:	0e 94 02 09 	call	0x1204	; 0x1204 <xTaskResumeAll>
    13c8:	01 c0       	rjmp	.+2      	; 0x13cc <vTaskDelay+0x1e>
    13ca:	80 e0       	ldi	r24, 0x00	; 0
    13cc:	81 11       	cpse	r24, r1
    13ce:	02 c0       	rjmp	.+4      	; 0x13d4 <vTaskDelay+0x26>
    13d0:	0e 94 1c 02 	call	0x438	; 0x438 <vPortYield>
    13d4:	df 91       	pop	r29
    13d6:	cf 91       	pop	r28
    13d8:	08 95       	ret

000013da <vTaskSwitchContext>:
    13da:	80 91 76 06 	lds	r24, 0x0676	; 0x800676 <uxSchedulerSuspended>
    13de:	88 23       	and	r24, r24
    13e0:	21 f0       	breq	.+8      	; 0x13ea <vTaskSwitchContext+0x10>
    13e2:	81 e0       	ldi	r24, 0x01	; 1
    13e4:	80 93 7d 06 	sts	0x067D, r24	; 0x80067d <xYieldPending>
    13e8:	08 95       	ret
    13ea:	10 92 7d 06 	sts	0x067D, r1	; 0x80067d <xYieldPending>
    13ee:	20 91 81 06 	lds	r18, 0x0681	; 0x800681 <uxTopReadyPriority>
    13f2:	01 c0       	rjmp	.+2      	; 0x13f6 <vTaskSwitchContext+0x1c>
    13f4:	21 50       	subi	r18, 0x01	; 1
    13f6:	82 2f       	mov	r24, r18
    13f8:	90 e0       	ldi	r25, 0x00	; 0
    13fa:	fc 01       	movw	r30, r24
    13fc:	ee 0f       	add	r30, r30
    13fe:	ff 1f       	adc	r31, r31
    1400:	ee 0f       	add	r30, r30
    1402:	ff 1f       	adc	r31, r31
    1404:	ee 0f       	add	r30, r30
    1406:	ff 1f       	adc	r31, r31
    1408:	e8 0f       	add	r30, r24
    140a:	f9 1f       	adc	r31, r25
    140c:	e2 55       	subi	r30, 0x52	; 82
    140e:	f9 4f       	sbci	r31, 0xF9	; 249
    1410:	30 81       	ld	r19, Z
    1412:	33 23       	and	r19, r19
    1414:	79 f3       	breq	.-34     	; 0x13f4 <vTaskSwitchContext+0x1a>
    1416:	ac 01       	movw	r20, r24
    1418:	44 0f       	add	r20, r20
    141a:	55 1f       	adc	r21, r21
    141c:	44 0f       	add	r20, r20
    141e:	55 1f       	adc	r21, r21
    1420:	44 0f       	add	r20, r20
    1422:	55 1f       	adc	r21, r21
    1424:	48 0f       	add	r20, r24
    1426:	59 1f       	adc	r21, r25
    1428:	df 01       	movw	r26, r30
    142a:	01 80       	ldd	r0, Z+1	; 0x01
    142c:	f2 81       	ldd	r31, Z+2	; 0x02
    142e:	e0 2d       	mov	r30, r0
    1430:	02 80       	ldd	r0, Z+2	; 0x02
    1432:	f3 81       	ldd	r31, Z+3	; 0x03
    1434:	e0 2d       	mov	r30, r0
    1436:	12 96       	adiw	r26, 0x02	; 2
    1438:	fc 93       	st	X, r31
    143a:	ee 93       	st	-X, r30
    143c:	11 97       	sbiw	r26, 0x01	; 1
    143e:	4f 54       	subi	r20, 0x4F	; 79
    1440:	59 4f       	sbci	r21, 0xF9	; 249
    1442:	e4 17       	cp	r30, r20
    1444:	f5 07       	cpc	r31, r21
    1446:	29 f4       	brne	.+10     	; 0x1452 <vTaskSwitchContext+0x78>
    1448:	42 81       	ldd	r20, Z+2	; 0x02
    144a:	53 81       	ldd	r21, Z+3	; 0x03
    144c:	fd 01       	movw	r30, r26
    144e:	52 83       	std	Z+2, r21	; 0x02
    1450:	41 83       	std	Z+1, r20	; 0x01
    1452:	fc 01       	movw	r30, r24
    1454:	ee 0f       	add	r30, r30
    1456:	ff 1f       	adc	r31, r31
    1458:	ee 0f       	add	r30, r30
    145a:	ff 1f       	adc	r31, r31
    145c:	ee 0f       	add	r30, r30
    145e:	ff 1f       	adc	r31, r31
    1460:	8e 0f       	add	r24, r30
    1462:	9f 1f       	adc	r25, r31
    1464:	fc 01       	movw	r30, r24
    1466:	e2 55       	subi	r30, 0x52	; 82
    1468:	f9 4f       	sbci	r31, 0xF9	; 249
    146a:	01 80       	ldd	r0, Z+1	; 0x01
    146c:	f2 81       	ldd	r31, Z+2	; 0x02
    146e:	e0 2d       	mov	r30, r0
    1470:	86 81       	ldd	r24, Z+6	; 0x06
    1472:	97 81       	ldd	r25, Z+7	; 0x07
    1474:	90 93 d3 06 	sts	0x06D3, r25	; 0x8006d3 <pxCurrentTCB+0x1>
    1478:	80 93 d2 06 	sts	0x06D2, r24	; 0x8006d2 <pxCurrentTCB>
    147c:	20 93 81 06 	sts	0x0681, r18	; 0x800681 <uxTopReadyPriority>
    1480:	08 95       	ret

00001482 <vTaskPlaceOnEventList>:
    1482:	cf 93       	push	r28
    1484:	df 93       	push	r29
    1486:	eb 01       	movw	r28, r22
    1488:	60 91 d2 06 	lds	r22, 0x06D2	; 0x8006d2 <pxCurrentTCB>
    148c:	70 91 d3 06 	lds	r23, 0x06D3	; 0x8006d3 <pxCurrentTCB+0x1>
    1490:	64 5f       	subi	r22, 0xF4	; 244
    1492:	7f 4f       	sbci	r23, 0xFF	; 255
    1494:	0e 94 96 00 	call	0x12c	; 0x12c <vListInsert>
    1498:	61 e0       	ldi	r22, 0x01	; 1
    149a:	ce 01       	movw	r24, r28
    149c:	0e 94 19 07 	call	0xe32	; 0xe32 <prvAddCurrentTaskToDelayedList>
    14a0:	df 91       	pop	r29
    14a2:	cf 91       	pop	r28
    14a4:	08 95       	ret

000014a6 <xTaskRemoveFromEventList>:
    14a6:	cf 93       	push	r28
    14a8:	df 93       	push	r29
    14aa:	dc 01       	movw	r26, r24
    14ac:	15 96       	adiw	r26, 0x05	; 5
    14ae:	ed 91       	ld	r30, X+
    14b0:	fc 91       	ld	r31, X
    14b2:	16 97       	sbiw	r26, 0x06	; 6
    14b4:	06 80       	ldd	r0, Z+6	; 0x06
    14b6:	f7 81       	ldd	r31, Z+7	; 0x07
    14b8:	e0 2d       	mov	r30, r0
    14ba:	a4 89       	ldd	r26, Z+20	; 0x14
    14bc:	b5 89       	ldd	r27, Z+21	; 0x15
    14be:	c6 85       	ldd	r28, Z+14	; 0x0e
    14c0:	d7 85       	ldd	r29, Z+15	; 0x0f
    14c2:	80 89       	ldd	r24, Z+16	; 0x10
    14c4:	91 89       	ldd	r25, Z+17	; 0x11
    14c6:	9d 83       	std	Y+5, r25	; 0x05
    14c8:	8c 83       	std	Y+4, r24	; 0x04
    14ca:	c0 89       	ldd	r28, Z+16	; 0x10
    14cc:	d1 89       	ldd	r29, Z+17	; 0x11
    14ce:	86 85       	ldd	r24, Z+14	; 0x0e
    14d0:	97 85       	ldd	r25, Z+15	; 0x0f
    14d2:	9b 83       	std	Y+3, r25	; 0x03
    14d4:	8a 83       	std	Y+2, r24	; 0x02
    14d6:	11 96       	adiw	r26, 0x01	; 1
    14d8:	8d 91       	ld	r24, X+
    14da:	9c 91       	ld	r25, X
    14dc:	12 97       	sbiw	r26, 0x02	; 2
    14de:	9f 01       	movw	r18, r30
    14e0:	24 5f       	subi	r18, 0xF4	; 244
    14e2:	3f 4f       	sbci	r19, 0xFF	; 255
    14e4:	82 17       	cp	r24, r18
    14e6:	93 07       	cpc	r25, r19
    14e8:	31 f4       	brne	.+12     	; 0x14f6 <xTaskRemoveFromEventList+0x50>
    14ea:	80 89       	ldd	r24, Z+16	; 0x10
    14ec:	91 89       	ldd	r25, Z+17	; 0x11
    14ee:	12 96       	adiw	r26, 0x02	; 2
    14f0:	9c 93       	st	X, r25
    14f2:	8e 93       	st	-X, r24
    14f4:	11 97       	sbiw	r26, 0x01	; 1
    14f6:	15 8a       	std	Z+21, r1	; 0x15
    14f8:	14 8a       	std	Z+20, r1	; 0x14
    14fa:	8c 91       	ld	r24, X
    14fc:	81 50       	subi	r24, 0x01	; 1
    14fe:	8c 93       	st	X, r24
    1500:	80 91 76 06 	lds	r24, 0x0676	; 0x800676 <uxSchedulerSuspended>
    1504:	81 11       	cpse	r24, r1
    1506:	60 c0       	rjmp	.+192    	; 0x15c8 <xTaskRemoveFromEventList+0x122>
    1508:	a2 85       	ldd	r26, Z+10	; 0x0a
    150a:	b3 85       	ldd	r27, Z+11	; 0x0b
    150c:	c4 81       	ldd	r28, Z+4	; 0x04
    150e:	d5 81       	ldd	r29, Z+5	; 0x05
    1510:	86 81       	ldd	r24, Z+6	; 0x06
    1512:	97 81       	ldd	r25, Z+7	; 0x07
    1514:	9d 83       	std	Y+5, r25	; 0x05
    1516:	8c 83       	std	Y+4, r24	; 0x04
    1518:	c6 81       	ldd	r28, Z+6	; 0x06
    151a:	d7 81       	ldd	r29, Z+7	; 0x07
    151c:	84 81       	ldd	r24, Z+4	; 0x04
    151e:	95 81       	ldd	r25, Z+5	; 0x05
    1520:	9b 83       	std	Y+3, r25	; 0x03
    1522:	8a 83       	std	Y+2, r24	; 0x02
    1524:	11 96       	adiw	r26, 0x01	; 1
    1526:	8d 91       	ld	r24, X+
    1528:	9c 91       	ld	r25, X
    152a:	12 97       	sbiw	r26, 0x02	; 2
    152c:	9f 01       	movw	r18, r30
    152e:	2e 5f       	subi	r18, 0xFE	; 254
    1530:	3f 4f       	sbci	r19, 0xFF	; 255
    1532:	82 17       	cp	r24, r18
    1534:	93 07       	cpc	r25, r19
    1536:	31 f4       	brne	.+12     	; 0x1544 <xTaskRemoveFromEventList+0x9e>
    1538:	86 81       	ldd	r24, Z+6	; 0x06
    153a:	97 81       	ldd	r25, Z+7	; 0x07
    153c:	12 96       	adiw	r26, 0x02	; 2
    153e:	9c 93       	st	X, r25
    1540:	8e 93       	st	-X, r24
    1542:	11 97       	sbiw	r26, 0x01	; 1
    1544:	13 86       	std	Z+11, r1	; 0x0b
    1546:	12 86       	std	Z+10, r1	; 0x0a
    1548:	8c 91       	ld	r24, X
    154a:	81 50       	subi	r24, 0x01	; 1
    154c:	8c 93       	st	X, r24
    154e:	86 89       	ldd	r24, Z+22	; 0x16
    1550:	90 91 81 06 	lds	r25, 0x0681	; 0x800681 <uxTopReadyPriority>
    1554:	98 17       	cp	r25, r24
    1556:	10 f4       	brcc	.+4      	; 0x155c <xTaskRemoveFromEventList+0xb6>
    1558:	80 93 81 06 	sts	0x0681, r24	; 0x800681 <uxTopReadyPriority>
    155c:	90 e0       	ldi	r25, 0x00	; 0
    155e:	dc 01       	movw	r26, r24
    1560:	aa 0f       	add	r26, r26
    1562:	bb 1f       	adc	r27, r27
    1564:	aa 0f       	add	r26, r26
    1566:	bb 1f       	adc	r27, r27
    1568:	aa 0f       	add	r26, r26
    156a:	bb 1f       	adc	r27, r27
    156c:	8a 0f       	add	r24, r26
    156e:	9b 1f       	adc	r25, r27
    1570:	dc 01       	movw	r26, r24
    1572:	a2 55       	subi	r26, 0x52	; 82
    1574:	b9 4f       	sbci	r27, 0xF9	; 249
    1576:	11 96       	adiw	r26, 0x01	; 1
    1578:	0d 90       	ld	r0, X+
    157a:	bc 91       	ld	r27, X
    157c:	a0 2d       	mov	r26, r0
    157e:	b5 83       	std	Z+5, r27	; 0x05
    1580:	a4 83       	std	Z+4, r26	; 0x04
    1582:	14 96       	adiw	r26, 0x04	; 4
    1584:	8d 91       	ld	r24, X+
    1586:	9c 91       	ld	r25, X
    1588:	15 97       	sbiw	r26, 0x05	; 5
    158a:	97 83       	std	Z+7, r25	; 0x07
    158c:	86 83       	std	Z+6, r24	; 0x06
    158e:	14 96       	adiw	r26, 0x04	; 4
    1590:	cd 91       	ld	r28, X+
    1592:	dc 91       	ld	r29, X
    1594:	15 97       	sbiw	r26, 0x05	; 5
    1596:	3b 83       	std	Y+3, r19	; 0x03
    1598:	2a 83       	std	Y+2, r18	; 0x02
    159a:	15 96       	adiw	r26, 0x05	; 5
    159c:	3c 93       	st	X, r19
    159e:	2e 93       	st	-X, r18
    15a0:	14 97       	sbiw	r26, 0x04	; 4
    15a2:	a6 89       	ldd	r26, Z+22	; 0x16
    15a4:	b0 e0       	ldi	r27, 0x00	; 0
    15a6:	cd 01       	movw	r24, r26
    15a8:	88 0f       	add	r24, r24
    15aa:	99 1f       	adc	r25, r25
    15ac:	88 0f       	add	r24, r24
    15ae:	99 1f       	adc	r25, r25
    15b0:	88 0f       	add	r24, r24
    15b2:	99 1f       	adc	r25, r25
    15b4:	a8 0f       	add	r26, r24
    15b6:	b9 1f       	adc	r27, r25
    15b8:	a2 55       	subi	r26, 0x52	; 82
    15ba:	b9 4f       	sbci	r27, 0xF9	; 249
    15bc:	b3 87       	std	Z+11, r27	; 0x0b
    15be:	a2 87       	std	Z+10, r26	; 0x0a
    15c0:	8c 91       	ld	r24, X
    15c2:	8f 5f       	subi	r24, 0xFF	; 255
    15c4:	8c 93       	st	X, r24
    15c6:	1c c0       	rjmp	.+56     	; 0x1600 <xTaskRemoveFromEventList+0x15a>
    15c8:	4f e8       	ldi	r20, 0x8F	; 143
    15ca:	56 e0       	ldi	r21, 0x06	; 6
    15cc:	da 01       	movw	r26, r20
    15ce:	11 96       	adiw	r26, 0x01	; 1
    15d0:	cd 91       	ld	r28, X+
    15d2:	dc 91       	ld	r29, X
    15d4:	12 97       	sbiw	r26, 0x02	; 2
    15d6:	d7 87       	std	Z+15, r29	; 0x0f
    15d8:	c6 87       	std	Z+14, r28	; 0x0e
    15da:	8c 81       	ldd	r24, Y+4	; 0x04
    15dc:	9d 81       	ldd	r25, Y+5	; 0x05
    15de:	91 8b       	std	Z+17, r25	; 0x11
    15e0:	80 8b       	std	Z+16, r24	; 0x10
    15e2:	8c 81       	ldd	r24, Y+4	; 0x04
    15e4:	9d 81       	ldd	r25, Y+5	; 0x05
    15e6:	dc 01       	movw	r26, r24
    15e8:	13 96       	adiw	r26, 0x03	; 3
    15ea:	3c 93       	st	X, r19
    15ec:	2e 93       	st	-X, r18
    15ee:	12 97       	sbiw	r26, 0x02	; 2
    15f0:	3d 83       	std	Y+5, r19	; 0x05
    15f2:	2c 83       	std	Y+4, r18	; 0x04
    15f4:	55 8b       	std	Z+21, r21	; 0x15
    15f6:	44 8b       	std	Z+20, r20	; 0x14
    15f8:	da 01       	movw	r26, r20
    15fa:	8c 91       	ld	r24, X
    15fc:	8f 5f       	subi	r24, 0xFF	; 255
    15fe:	8c 93       	st	X, r24
    1600:	96 89       	ldd	r25, Z+22	; 0x16
    1602:	e0 91 d2 06 	lds	r30, 0x06D2	; 0x8006d2 <pxCurrentTCB>
    1606:	f0 91 d3 06 	lds	r31, 0x06D3	; 0x8006d3 <pxCurrentTCB+0x1>
    160a:	86 89       	ldd	r24, Z+22	; 0x16
    160c:	89 17       	cp	r24, r25
    160e:	20 f4       	brcc	.+8      	; 0x1618 <xTaskRemoveFromEventList+0x172>
    1610:	81 e0       	ldi	r24, 0x01	; 1
    1612:	80 93 7d 06 	sts	0x067D, r24	; 0x80067d <xYieldPending>
    1616:	01 c0       	rjmp	.+2      	; 0x161a <xTaskRemoveFromEventList+0x174>
    1618:	80 e0       	ldi	r24, 0x00	; 0
    161a:	df 91       	pop	r29
    161c:	cf 91       	pop	r28
    161e:	08 95       	ret

00001620 <vTaskInternalSetTimeOutState>:
    1620:	20 91 7c 06 	lds	r18, 0x067C	; 0x80067c <xNumOfOverflows>
    1624:	fc 01       	movw	r30, r24
    1626:	20 83       	st	Z, r18
    1628:	20 91 82 06 	lds	r18, 0x0682	; 0x800682 <xTickCount>
    162c:	30 91 83 06 	lds	r19, 0x0683	; 0x800683 <xTickCount+0x1>
    1630:	32 83       	std	Z+2, r19	; 0x02
    1632:	21 83       	std	Z+1, r18	; 0x01
    1634:	08 95       	ret

00001636 <xTaskCheckForTimeOut>:
    1636:	cf 93       	push	r28
    1638:	df 93       	push	r29
    163a:	0f b6       	in	r0, 0x3f	; 63
    163c:	f8 94       	cli
    163e:	0f 92       	push	r0
    1640:	40 91 82 06 	lds	r20, 0x0682	; 0x800682 <xTickCount>
    1644:	50 91 83 06 	lds	r21, 0x0683	; 0x800683 <xTickCount+0x1>
    1648:	ec 01       	movw	r28, r24
    164a:	29 81       	ldd	r18, Y+1	; 0x01
    164c:	3a 81       	ldd	r19, Y+2	; 0x02
    164e:	da 01       	movw	r26, r20
    1650:	a2 1b       	sub	r26, r18
    1652:	b3 0b       	sbc	r27, r19
    1654:	f8 81       	ld	r31, Y
    1656:	e0 91 7c 06 	lds	r30, 0x067C	; 0x80067c <xNumOfOverflows>
    165a:	fe 17       	cp	r31, r30
    165c:	41 f0       	breq	.+16     	; 0x166e <xTaskCheckForTimeOut+0x38>
    165e:	42 17       	cp	r20, r18
    1660:	53 07       	cpc	r21, r19
    1662:	28 f0       	brcs	.+10     	; 0x166e <xTaskCheckForTimeOut+0x38>
    1664:	fb 01       	movw	r30, r22
    1666:	11 82       	std	Z+1, r1	; 0x01
    1668:	10 82       	st	Z, r1
    166a:	81 e0       	ldi	r24, 0x01	; 1
    166c:	11 c0       	rjmp	.+34     	; 0x1690 <xTaskCheckForTimeOut+0x5a>
    166e:	eb 01       	movw	r28, r22
    1670:	28 81       	ld	r18, Y
    1672:	39 81       	ldd	r19, Y+1	; 0x01
    1674:	a2 17       	cp	r26, r18
    1676:	b3 07       	cpc	r27, r19
    1678:	40 f4       	brcc	.+16     	; 0x168a <xTaskCheckForTimeOut+0x54>
    167a:	2a 1b       	sub	r18, r26
    167c:	3b 0b       	sbc	r19, r27
    167e:	39 83       	std	Y+1, r19	; 0x01
    1680:	28 83       	st	Y, r18
    1682:	0e 94 10 0b 	call	0x1620	; 0x1620 <vTaskInternalSetTimeOutState>
    1686:	80 e0       	ldi	r24, 0x00	; 0
    1688:	03 c0       	rjmp	.+6      	; 0x1690 <xTaskCheckForTimeOut+0x5a>
    168a:	19 82       	std	Y+1, r1	; 0x01
    168c:	18 82       	st	Y, r1
    168e:	81 e0       	ldi	r24, 0x01	; 1
    1690:	0f 90       	pop	r0
    1692:	0f be       	out	0x3f, r0	; 63
    1694:	df 91       	pop	r29
    1696:	cf 91       	pop	r28
    1698:	08 95       	ret

0000169a <vTaskMissedYield>:
    169a:	81 e0       	ldi	r24, 0x01	; 1
    169c:	80 93 7d 06 	sts	0x067D, r24	; 0x80067d <xYieldPending>
    16a0:	08 95       	ret

000016a2 <xTaskPriorityInherit>:
    16a2:	0f 93       	push	r16
    16a4:	1f 93       	push	r17
    16a6:	cf 93       	push	r28
    16a8:	df 93       	push	r29
    16aa:	fc 01       	movw	r30, r24
    16ac:	89 2b       	or	r24, r25
    16ae:	09 f4       	brne	.+2      	; 0x16b2 <xTaskPriorityInherit+0x10>
    16b0:	84 c0       	rjmp	.+264    	; 0x17ba <xTaskPriorityInherit+0x118>
    16b2:	26 89       	ldd	r18, Z+22	; 0x16
    16b4:	a0 91 d2 06 	lds	r26, 0x06D2	; 0x8006d2 <pxCurrentTCB>
    16b8:	b0 91 d3 06 	lds	r27, 0x06D3	; 0x8006d3 <pxCurrentTCB+0x1>
    16bc:	56 96       	adiw	r26, 0x16	; 22
    16be:	8c 91       	ld	r24, X
    16c0:	28 17       	cp	r18, r24
    16c2:	08 f0       	brcs	.+2      	; 0x16c6 <xTaskPriorityInherit+0x24>
    16c4:	70 c0       	rjmp	.+224    	; 0x17a6 <xTaskPriorityInherit+0x104>
    16c6:	84 85       	ldd	r24, Z+12	; 0x0c
    16c8:	95 85       	ldd	r25, Z+13	; 0x0d
    16ca:	99 23       	and	r25, r25
    16cc:	64 f0       	brlt	.+24     	; 0x16e6 <xTaskPriorityInherit+0x44>
    16ce:	a0 91 d2 06 	lds	r26, 0x06D2	; 0x8006d2 <pxCurrentTCB>
    16d2:	b0 91 d3 06 	lds	r27, 0x06D3	; 0x8006d3 <pxCurrentTCB+0x1>
    16d6:	56 96       	adiw	r26, 0x16	; 22
    16d8:	3c 91       	ld	r19, X
    16da:	84 e0       	ldi	r24, 0x04	; 4
    16dc:	90 e0       	ldi	r25, 0x00	; 0
    16de:	83 1b       	sub	r24, r19
    16e0:	91 09       	sbc	r25, r1
    16e2:	95 87       	std	Z+13, r25	; 0x0d
    16e4:	84 87       	std	Z+12, r24	; 0x0c
    16e6:	82 85       	ldd	r24, Z+10	; 0x0a
    16e8:	93 85       	ldd	r25, Z+11	; 0x0b
    16ea:	30 e0       	ldi	r19, 0x00	; 0
    16ec:	a9 01       	movw	r20, r18
    16ee:	44 0f       	add	r20, r20
    16f0:	55 1f       	adc	r21, r21
    16f2:	44 0f       	add	r20, r20
    16f4:	55 1f       	adc	r21, r21
    16f6:	44 0f       	add	r20, r20
    16f8:	55 1f       	adc	r21, r21
    16fa:	24 0f       	add	r18, r20
    16fc:	35 1f       	adc	r19, r21
    16fe:	22 55       	subi	r18, 0x52	; 82
    1700:	39 4f       	sbci	r19, 0xF9	; 249
    1702:	82 17       	cp	r24, r18
    1704:	93 07       	cpc	r25, r19
    1706:	09 f0       	breq	.+2      	; 0x170a <xTaskPriorityInherit+0x68>
    1708:	45 c0       	rjmp	.+138    	; 0x1794 <xTaskPriorityInherit+0xf2>
    170a:	ef 01       	movw	r28, r30
    170c:	8f 01       	movw	r16, r30
    170e:	0e 5f       	subi	r16, 0xFE	; 254
    1710:	1f 4f       	sbci	r17, 0xFF	; 255
    1712:	c8 01       	movw	r24, r16
    1714:	0e 94 c7 00 	call	0x18e	; 0x18e <uxListRemove>
    1718:	e0 91 d2 06 	lds	r30, 0x06D2	; 0x8006d2 <pxCurrentTCB>
    171c:	f0 91 d3 06 	lds	r31, 0x06D3	; 0x8006d3 <pxCurrentTCB+0x1>
    1720:	86 89       	ldd	r24, Z+22	; 0x16
    1722:	8e 8b       	std	Y+22, r24	; 0x16
    1724:	90 91 81 06 	lds	r25, 0x0681	; 0x800681 <uxTopReadyPriority>
    1728:	98 17       	cp	r25, r24
    172a:	10 f4       	brcc	.+4      	; 0x1730 <xTaskPriorityInherit+0x8e>
    172c:	80 93 81 06 	sts	0x0681, r24	; 0x800681 <uxTopReadyPriority>
    1730:	90 e0       	ldi	r25, 0x00	; 0
    1732:	fc 01       	movw	r30, r24
    1734:	ee 0f       	add	r30, r30
    1736:	ff 1f       	adc	r31, r31
    1738:	ee 0f       	add	r30, r30
    173a:	ff 1f       	adc	r31, r31
    173c:	ee 0f       	add	r30, r30
    173e:	ff 1f       	adc	r31, r31
    1740:	8e 0f       	add	r24, r30
    1742:	9f 1f       	adc	r25, r31
    1744:	fc 01       	movw	r30, r24
    1746:	e2 55       	subi	r30, 0x52	; 82
    1748:	f9 4f       	sbci	r31, 0xF9	; 249
    174a:	01 80       	ldd	r0, Z+1	; 0x01
    174c:	f2 81       	ldd	r31, Z+2	; 0x02
    174e:	e0 2d       	mov	r30, r0
    1750:	fd 83       	std	Y+5, r31	; 0x05
    1752:	ec 83       	std	Y+4, r30	; 0x04
    1754:	84 81       	ldd	r24, Z+4	; 0x04
    1756:	95 81       	ldd	r25, Z+5	; 0x05
    1758:	9f 83       	std	Y+7, r25	; 0x07
    175a:	8e 83       	std	Y+6, r24	; 0x06
    175c:	a4 81       	ldd	r26, Z+4	; 0x04
    175e:	b5 81       	ldd	r27, Z+5	; 0x05
    1760:	13 96       	adiw	r26, 0x03	; 3
    1762:	1c 93       	st	X, r17
    1764:	0e 93       	st	-X, r16
    1766:	12 97       	sbiw	r26, 0x02	; 2
    1768:	15 83       	std	Z+5, r17	; 0x05
    176a:	04 83       	std	Z+4, r16	; 0x04
    176c:	8e 89       	ldd	r24, Y+22	; 0x16
    176e:	90 e0       	ldi	r25, 0x00	; 0
    1770:	fc 01       	movw	r30, r24
    1772:	ee 0f       	add	r30, r30
    1774:	ff 1f       	adc	r31, r31
    1776:	ee 0f       	add	r30, r30
    1778:	ff 1f       	adc	r31, r31
    177a:	ee 0f       	add	r30, r30
    177c:	ff 1f       	adc	r31, r31
    177e:	e8 0f       	add	r30, r24
    1780:	f9 1f       	adc	r31, r25
    1782:	e2 55       	subi	r30, 0x52	; 82
    1784:	f9 4f       	sbci	r31, 0xF9	; 249
    1786:	fb 87       	std	Y+11, r31	; 0x0b
    1788:	ea 87       	std	Y+10, r30	; 0x0a
    178a:	80 81       	ld	r24, Z
    178c:	8f 5f       	subi	r24, 0xFF	; 255
    178e:	80 83       	st	Z, r24
    1790:	81 e0       	ldi	r24, 0x01	; 1
    1792:	16 c0       	rjmp	.+44     	; 0x17c0 <xTaskPriorityInherit+0x11e>
    1794:	a0 91 d2 06 	lds	r26, 0x06D2	; 0x8006d2 <pxCurrentTCB>
    1798:	b0 91 d3 06 	lds	r27, 0x06D3	; 0x8006d3 <pxCurrentTCB+0x1>
    179c:	56 96       	adiw	r26, 0x16	; 22
    179e:	8c 91       	ld	r24, X
    17a0:	86 8b       	std	Z+22, r24	; 0x16
    17a2:	81 e0       	ldi	r24, 0x01	; 1
    17a4:	0d c0       	rjmp	.+26     	; 0x17c0 <xTaskPriorityInherit+0x11e>
    17a6:	91 a1       	ldd	r25, Z+33	; 0x21
    17a8:	e0 91 d2 06 	lds	r30, 0x06D2	; 0x8006d2 <pxCurrentTCB>
    17ac:	f0 91 d3 06 	lds	r31, 0x06D3	; 0x8006d3 <pxCurrentTCB+0x1>
    17b0:	86 89       	ldd	r24, Z+22	; 0x16
    17b2:	98 17       	cp	r25, r24
    17b4:	20 f0       	brcs	.+8      	; 0x17be <xTaskPriorityInherit+0x11c>
    17b6:	80 e0       	ldi	r24, 0x00	; 0
    17b8:	03 c0       	rjmp	.+6      	; 0x17c0 <xTaskPriorityInherit+0x11e>
    17ba:	80 e0       	ldi	r24, 0x00	; 0
    17bc:	01 c0       	rjmp	.+2      	; 0x17c0 <xTaskPriorityInherit+0x11e>
    17be:	81 e0       	ldi	r24, 0x01	; 1
    17c0:	df 91       	pop	r29
    17c2:	cf 91       	pop	r28
    17c4:	1f 91       	pop	r17
    17c6:	0f 91       	pop	r16
    17c8:	08 95       	ret

000017ca <xTaskPriorityDisinherit>:
    17ca:	0f 93       	push	r16
    17cc:	1f 93       	push	r17
    17ce:	cf 93       	push	r28
    17d0:	df 93       	push	r29
    17d2:	fc 01       	movw	r30, r24
    17d4:	89 2b       	or	r24, r25
    17d6:	09 f4       	brne	.+2      	; 0x17da <xTaskPriorityDisinherit+0x10>
    17d8:	51 c0       	rjmp	.+162    	; 0x187c <xTaskPriorityDisinherit+0xb2>
    17da:	82 a1       	ldd	r24, Z+34	; 0x22
    17dc:	81 50       	subi	r24, 0x01	; 1
    17de:	82 a3       	std	Z+34, r24	; 0x22
    17e0:	26 89       	ldd	r18, Z+22	; 0x16
    17e2:	91 a1       	ldd	r25, Z+33	; 0x21
    17e4:	29 17       	cp	r18, r25
    17e6:	09 f4       	brne	.+2      	; 0x17ea <xTaskPriorityDisinherit+0x20>
    17e8:	4b c0       	rjmp	.+150    	; 0x1880 <xTaskPriorityDisinherit+0xb6>
    17ea:	81 11       	cpse	r24, r1
    17ec:	4b c0       	rjmp	.+150    	; 0x1884 <xTaskPriorityDisinherit+0xba>
    17ee:	ef 01       	movw	r28, r30
    17f0:	8f 01       	movw	r16, r30
    17f2:	0e 5f       	subi	r16, 0xFE	; 254
    17f4:	1f 4f       	sbci	r17, 0xFF	; 255
    17f6:	c8 01       	movw	r24, r16
    17f8:	0e 94 c7 00 	call	0x18e	; 0x18e <uxListRemove>
    17fc:	89 a1       	ldd	r24, Y+33	; 0x21
    17fe:	8e 8b       	std	Y+22, r24	; 0x16
    1800:	24 e0       	ldi	r18, 0x04	; 4
    1802:	30 e0       	ldi	r19, 0x00	; 0
    1804:	28 1b       	sub	r18, r24
    1806:	31 09       	sbc	r19, r1
    1808:	3d 87       	std	Y+13, r19	; 0x0d
    180a:	2c 87       	std	Y+12, r18	; 0x0c
    180c:	90 91 81 06 	lds	r25, 0x0681	; 0x800681 <uxTopReadyPriority>
    1810:	98 17       	cp	r25, r24
    1812:	10 f4       	brcc	.+4      	; 0x1818 <xTaskPriorityDisinherit+0x4e>
    1814:	80 93 81 06 	sts	0x0681, r24	; 0x800681 <uxTopReadyPriority>
    1818:	90 e0       	ldi	r25, 0x00	; 0
    181a:	fc 01       	movw	r30, r24
    181c:	ee 0f       	add	r30, r30
    181e:	ff 1f       	adc	r31, r31
    1820:	ee 0f       	add	r30, r30
    1822:	ff 1f       	adc	r31, r31
    1824:	ee 0f       	add	r30, r30
    1826:	ff 1f       	adc	r31, r31
    1828:	8e 0f       	add	r24, r30
    182a:	9f 1f       	adc	r25, r31
    182c:	fc 01       	movw	r30, r24
    182e:	e2 55       	subi	r30, 0x52	; 82
    1830:	f9 4f       	sbci	r31, 0xF9	; 249
    1832:	01 80       	ldd	r0, Z+1	; 0x01
    1834:	f2 81       	ldd	r31, Z+2	; 0x02
    1836:	e0 2d       	mov	r30, r0
    1838:	fd 83       	std	Y+5, r31	; 0x05
    183a:	ec 83       	std	Y+4, r30	; 0x04
    183c:	84 81       	ldd	r24, Z+4	; 0x04
    183e:	95 81       	ldd	r25, Z+5	; 0x05
    1840:	9f 83       	std	Y+7, r25	; 0x07
    1842:	8e 83       	std	Y+6, r24	; 0x06
    1844:	a4 81       	ldd	r26, Z+4	; 0x04
    1846:	b5 81       	ldd	r27, Z+5	; 0x05
    1848:	13 96       	adiw	r26, 0x03	; 3
    184a:	1c 93       	st	X, r17
    184c:	0e 93       	st	-X, r16
    184e:	12 97       	sbiw	r26, 0x02	; 2
    1850:	15 83       	std	Z+5, r17	; 0x05
    1852:	04 83       	std	Z+4, r16	; 0x04
    1854:	ee 89       	ldd	r30, Y+22	; 0x16
    1856:	f0 e0       	ldi	r31, 0x00	; 0
    1858:	cf 01       	movw	r24, r30
    185a:	88 0f       	add	r24, r24
    185c:	99 1f       	adc	r25, r25
    185e:	88 0f       	add	r24, r24
    1860:	99 1f       	adc	r25, r25
    1862:	88 0f       	add	r24, r24
    1864:	99 1f       	adc	r25, r25
    1866:	e8 0f       	add	r30, r24
    1868:	f9 1f       	adc	r31, r25
    186a:	e2 55       	subi	r30, 0x52	; 82
    186c:	f9 4f       	sbci	r31, 0xF9	; 249
    186e:	fb 87       	std	Y+11, r31	; 0x0b
    1870:	ea 87       	std	Y+10, r30	; 0x0a
    1872:	80 81       	ld	r24, Z
    1874:	8f 5f       	subi	r24, 0xFF	; 255
    1876:	80 83       	st	Z, r24
    1878:	81 e0       	ldi	r24, 0x01	; 1
    187a:	05 c0       	rjmp	.+10     	; 0x1886 <xTaskPriorityDisinherit+0xbc>
    187c:	80 e0       	ldi	r24, 0x00	; 0
    187e:	03 c0       	rjmp	.+6      	; 0x1886 <xTaskPriorityDisinherit+0xbc>
    1880:	80 e0       	ldi	r24, 0x00	; 0
    1882:	01 c0       	rjmp	.+2      	; 0x1886 <xTaskPriorityDisinherit+0xbc>
    1884:	80 e0       	ldi	r24, 0x00	; 0
    1886:	df 91       	pop	r29
    1888:	cf 91       	pop	r28
    188a:	1f 91       	pop	r17
    188c:	0f 91       	pop	r16
    188e:	08 95       	ret

00001890 <vTaskPriorityDisinheritAfterTimeout>:
    1890:	0f 93       	push	r16
    1892:	1f 93       	push	r17
    1894:	cf 93       	push	r28
    1896:	df 93       	push	r29
    1898:	fc 01       	movw	r30, r24
    189a:	89 2b       	or	r24, r25
    189c:	09 f4       	brne	.+2      	; 0x18a0 <vTaskPriorityDisinheritAfterTimeout+0x10>
    189e:	66 c0       	rjmp	.+204    	; 0x196c <vTaskPriorityDisinheritAfterTimeout+0xdc>
    18a0:	91 a1       	ldd	r25, Z+33	; 0x21
    18a2:	96 17       	cp	r25, r22
    18a4:	08 f4       	brcc	.+2      	; 0x18a8 <vTaskPriorityDisinheritAfterTimeout+0x18>
    18a6:	96 2f       	mov	r25, r22
    18a8:	86 89       	ldd	r24, Z+22	; 0x16
    18aa:	98 17       	cp	r25, r24
    18ac:	09 f4       	brne	.+2      	; 0x18b0 <vTaskPriorityDisinheritAfterTimeout+0x20>
    18ae:	5e c0       	rjmp	.+188    	; 0x196c <vTaskPriorityDisinheritAfterTimeout+0xdc>
    18b0:	22 a1       	ldd	r18, Z+34	; 0x22
    18b2:	21 30       	cpi	r18, 0x01	; 1
    18b4:	09 f0       	breq	.+2      	; 0x18b8 <vTaskPriorityDisinheritAfterTimeout+0x28>
    18b6:	5a c0       	rjmp	.+180    	; 0x196c <vTaskPriorityDisinheritAfterTimeout+0xdc>
    18b8:	96 8b       	std	Z+22, r25	; 0x16
    18ba:	24 85       	ldd	r18, Z+12	; 0x0c
    18bc:	35 85       	ldd	r19, Z+13	; 0x0d
    18be:	33 23       	and	r19, r19
    18c0:	34 f0       	brlt	.+12     	; 0x18ce <vTaskPriorityDisinheritAfterTimeout+0x3e>
    18c2:	24 e0       	ldi	r18, 0x04	; 4
    18c4:	30 e0       	ldi	r19, 0x00	; 0
    18c6:	29 1b       	sub	r18, r25
    18c8:	31 09       	sbc	r19, r1
    18ca:	35 87       	std	Z+13, r19	; 0x0d
    18cc:	24 87       	std	Z+12, r18	; 0x0c
    18ce:	22 85       	ldd	r18, Z+10	; 0x0a
    18d0:	33 85       	ldd	r19, Z+11	; 0x0b
    18d2:	90 e0       	ldi	r25, 0x00	; 0
    18d4:	ac 01       	movw	r20, r24
    18d6:	44 0f       	add	r20, r20
    18d8:	55 1f       	adc	r21, r21
    18da:	44 0f       	add	r20, r20
    18dc:	55 1f       	adc	r21, r21
    18de:	44 0f       	add	r20, r20
    18e0:	55 1f       	adc	r21, r21
    18e2:	84 0f       	add	r24, r20
    18e4:	95 1f       	adc	r25, r21
    18e6:	82 55       	subi	r24, 0x52	; 82
    18e8:	99 4f       	sbci	r25, 0xF9	; 249
    18ea:	28 17       	cp	r18, r24
    18ec:	39 07       	cpc	r19, r25
    18ee:	f1 f5       	brne	.+124    	; 0x196c <vTaskPriorityDisinheritAfterTimeout+0xdc>
    18f0:	ef 01       	movw	r28, r30
    18f2:	8f 01       	movw	r16, r30
    18f4:	0e 5f       	subi	r16, 0xFE	; 254
    18f6:	1f 4f       	sbci	r17, 0xFF	; 255
    18f8:	c8 01       	movw	r24, r16
    18fa:	0e 94 c7 00 	call	0x18e	; 0x18e <uxListRemove>
    18fe:	8e 89       	ldd	r24, Y+22	; 0x16
    1900:	90 91 81 06 	lds	r25, 0x0681	; 0x800681 <uxTopReadyPriority>
    1904:	98 17       	cp	r25, r24
    1906:	10 f4       	brcc	.+4      	; 0x190c <vTaskPriorityDisinheritAfterTimeout+0x7c>
    1908:	80 93 81 06 	sts	0x0681, r24	; 0x800681 <uxTopReadyPriority>
    190c:	90 e0       	ldi	r25, 0x00	; 0
    190e:	fc 01       	movw	r30, r24
    1910:	ee 0f       	add	r30, r30
    1912:	ff 1f       	adc	r31, r31
    1914:	ee 0f       	add	r30, r30
    1916:	ff 1f       	adc	r31, r31
    1918:	ee 0f       	add	r30, r30
    191a:	ff 1f       	adc	r31, r31
    191c:	8e 0f       	add	r24, r30
    191e:	9f 1f       	adc	r25, r31
    1920:	fc 01       	movw	r30, r24
    1922:	e2 55       	subi	r30, 0x52	; 82
    1924:	f9 4f       	sbci	r31, 0xF9	; 249
    1926:	01 80       	ldd	r0, Z+1	; 0x01
    1928:	f2 81       	ldd	r31, Z+2	; 0x02
    192a:	e0 2d       	mov	r30, r0
    192c:	fd 83       	std	Y+5, r31	; 0x05
    192e:	ec 83       	std	Y+4, r30	; 0x04
    1930:	84 81       	ldd	r24, Z+4	; 0x04
    1932:	95 81       	ldd	r25, Z+5	; 0x05
    1934:	9f 83       	std	Y+7, r25	; 0x07
    1936:	8e 83       	std	Y+6, r24	; 0x06
    1938:	a4 81       	ldd	r26, Z+4	; 0x04
    193a:	b5 81       	ldd	r27, Z+5	; 0x05
    193c:	13 96       	adiw	r26, 0x03	; 3
    193e:	1c 93       	st	X, r17
    1940:	0e 93       	st	-X, r16
    1942:	12 97       	sbiw	r26, 0x02	; 2
    1944:	15 83       	std	Z+5, r17	; 0x05
    1946:	04 83       	std	Z+4, r16	; 0x04
    1948:	8e 89       	ldd	r24, Y+22	; 0x16
    194a:	90 e0       	ldi	r25, 0x00	; 0
    194c:	fc 01       	movw	r30, r24
    194e:	ee 0f       	add	r30, r30
    1950:	ff 1f       	adc	r31, r31
    1952:	ee 0f       	add	r30, r30
    1954:	ff 1f       	adc	r31, r31
    1956:	ee 0f       	add	r30, r30
    1958:	ff 1f       	adc	r31, r31
    195a:	e8 0f       	add	r30, r24
    195c:	f9 1f       	adc	r31, r25
    195e:	e2 55       	subi	r30, 0x52	; 82
    1960:	f9 4f       	sbci	r31, 0xF9	; 249
    1962:	fb 87       	std	Y+11, r31	; 0x0b
    1964:	ea 87       	std	Y+10, r30	; 0x0a
    1966:	80 81       	ld	r24, Z
    1968:	8f 5f       	subi	r24, 0xFF	; 255
    196a:	80 83       	st	Z, r24
    196c:	df 91       	pop	r29
    196e:	cf 91       	pop	r28
    1970:	1f 91       	pop	r17
    1972:	0f 91       	pop	r16
    1974:	08 95       	ret

00001976 <pvTaskIncrementMutexHeldCount>:

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
        /* If xSemaphoreCreateMutex() is called before any tasks have been created
         * then pxCurrentTCB will be NULL. */
        if( pxCurrentTCB != NULL )
    1976:	80 91 d2 06 	lds	r24, 0x06D2	; 0x8006d2 <pxCurrentTCB>
    197a:	90 91 d3 06 	lds	r25, 0x06D3	; 0x8006d3 <pxCurrentTCB+0x1>
    197e:	89 2b       	or	r24, r25
    1980:	39 f0       	breq	.+14     	; 0x1990 <pvTaskIncrementMutexHeldCount+0x1a>
        {
            ( pxCurrentTCB->uxMutexesHeld )++;
    1982:	e0 91 d2 06 	lds	r30, 0x06D2	; 0x8006d2 <pxCurrentTCB>
    1986:	f0 91 d3 06 	lds	r31, 0x06D3	; 0x8006d3 <pxCurrentTCB+0x1>
    198a:	82 a1       	ldd	r24, Z+34	; 0x22
    198c:	8f 5f       	subi	r24, 0xFF	; 255
    198e:	82 a3       	std	Z+34, r24	; 0x22
        }

        return pxCurrentTCB;
    1990:	80 91 d2 06 	lds	r24, 0x06D2	; 0x8006d2 <pxCurrentTCB>
    1994:	90 91 d3 06 	lds	r25, 0x06D3	; 0x8006d3 <pxCurrentTCB+0x1>
    }
    1998:	08 95       	ret

0000199a <UART_INT>:
 */ 
#include "UART.h"
void UART_INT(void){
	
	
	UCSRB = (1<<RXEN)|(1<<TXEN);
    199a:	88 e1       	ldi	r24, 0x18	; 24
    199c:	8a b9       	out	0x0a, r24	; 10
	UCSRC =(1<<URSEL)|(1<<UCSZ0)|(1<<UCSZ1);
    199e:	86 e8       	ldi	r24, 0x86	; 134
    19a0:	80 bd       	out	0x20, r24	; 32
	UBRRL=UBRR_VALUE;
    19a2:	87 e6       	ldi	r24, 0x67	; 103
    19a4:	89 b9       	out	0x09, r24	; 9
	UBRRH=UBRR_VALUE>>8;
    19a6:	10 bc       	out	0x20, r1	; 32
    19a8:	08 95       	ret

000019aa <UART_SENDCHAR>:
}
void UART_SENDCHAR(char data){
	
	while(!(UCSRA & (1<<UDRE)));
    19aa:	5d 9b       	sbis	0x0b, 5	; 11
    19ac:	fe cf       	rjmp	.-4      	; 0x19aa <UART_SENDCHAR>
	UDR = data;
    19ae:	8c b9       	out	0x0c, r24	; 12
    19b0:	08 95       	ret

000019b2 <UART_SENDSTRING>:
}
void UART_SENDSTRING(char * data){
    19b2:	0f 93       	push	r16
    19b4:	1f 93       	push	r17
    19b6:	cf 93       	push	r28
    19b8:	8c 01       	movw	r16, r24
	char i=0;
    19ba:	c0 e0       	ldi	r28, 0x00	; 0
	while(data[i]!='\0'){
    19bc:	03 c0       	rjmp	.+6      	; 0x19c4 <UART_SENDSTRING+0x12>
		UART_SENDCHAR(data[i]);
    19be:	0e 94 d5 0c 	call	0x19aa	; 0x19aa <UART_SENDCHAR>
		i++;
    19c2:	cf 5f       	subi	r28, 0xFF	; 255
	while(!(UCSRA & (1<<UDRE)));
	UDR = data;
}
void UART_SENDSTRING(char * data){
	char i=0;
	while(data[i]!='\0'){
    19c4:	f8 01       	movw	r30, r16
    19c6:	ec 0f       	add	r30, r28
    19c8:	f1 1d       	adc	r31, r1
    19ca:	80 81       	ld	r24, Z
    19cc:	81 11       	cpse	r24, r1
    19ce:	f7 cf       	rjmp	.-18     	; 0x19be <UART_SENDSTRING+0xc>
		UART_SENDCHAR(data[i]);
		i++;
	}
}
    19d0:	cf 91       	pop	r28
    19d2:	1f 91       	pop	r17
    19d4:	0f 91       	pop	r16
    19d6:	08 95       	ret

000019d8 <__udivmodhi4>:
    19d8:	aa 1b       	sub	r26, r26
    19da:	bb 1b       	sub	r27, r27
    19dc:	51 e1       	ldi	r21, 0x11	; 17
    19de:	07 c0       	rjmp	.+14     	; 0x19ee <__udivmodhi4_ep>

000019e0 <__udivmodhi4_loop>:
    19e0:	aa 1f       	adc	r26, r26
    19e2:	bb 1f       	adc	r27, r27
    19e4:	a6 17       	cp	r26, r22
    19e6:	b7 07       	cpc	r27, r23
    19e8:	10 f0       	brcs	.+4      	; 0x19ee <__udivmodhi4_ep>
    19ea:	a6 1b       	sub	r26, r22
    19ec:	b7 0b       	sbc	r27, r23

000019ee <__udivmodhi4_ep>:
    19ee:	88 1f       	adc	r24, r24
    19f0:	99 1f       	adc	r25, r25
    19f2:	5a 95       	dec	r21
    19f4:	a9 f7       	brne	.-22     	; 0x19e0 <__udivmodhi4_loop>
    19f6:	80 95       	com	r24
    19f8:	90 95       	com	r25
    19fa:	bc 01       	movw	r22, r24
    19fc:	cd 01       	movw	r24, r26
    19fe:	08 95       	ret

00001a00 <memcpy>:
    1a00:	fb 01       	movw	r30, r22
    1a02:	dc 01       	movw	r26, r24
    1a04:	02 c0       	rjmp	.+4      	; 0x1a0a <memcpy+0xa>
    1a06:	01 90       	ld	r0, Z+
    1a08:	0d 92       	st	X+, r0
    1a0a:	41 50       	subi	r20, 0x01	; 1
    1a0c:	50 40       	sbci	r21, 0x00	; 0
    1a0e:	d8 f7       	brcc	.-10     	; 0x1a06 <memcpy+0x6>
    1a10:	08 95       	ret

00001a12 <_exit>:
    1a12:	f8 94       	cli

00001a14 <__stop_program>:
    1a14:	ff cf       	rjmp	.-2      	; 0x1a14 <__stop_program>
