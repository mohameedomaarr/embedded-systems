
RTOS_queue_struct.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000015f8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000046  00800060  000015f8  0000168c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000640  008000a6  008000a6  000016d2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000016d2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001704  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000350  00000000  00000000  00001740  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003f4f  00000000  00000000  00001a90  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000f09  00000000  00000000  000059df  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000023e4  00000000  00000000  000068e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000a3c  00000000  00000000  00008ccc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000130a  00000000  00000000  00009708  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003c5a  00000000  00000000  0000aa12  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000368  00000000  00000000  0000e66c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 a1 02 	jmp	0x542	; 0x542 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 ef       	ldi	r30, 0xF8	; 248
      68:	f5 e1       	ldi	r31, 0x15	; 21
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a6 3a       	cpi	r26, 0xA6	; 166
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	26 e0       	ldi	r18, 0x06	; 6
      78:	a6 ea       	ldi	r26, 0xA6	; 166
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a6 3e       	cpi	r26, 0xE6	; 230
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 16 01 	call	0x22c	; 0x22c <main>
      8a:	0c 94 fa 0a 	jmp	0x15f4	; 0x15f4 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
      92:	cf 93       	push	r28
      94:	df 93       	push	r29
      96:	ec 01       	movw	r28, r24
            }
        }
    }
    #endif /* if ( portBYTE_ALIGNMENT != 1 ) */

    vTaskSuspendAll();
      98:	0e 94 65 07 	call	0xeca	; 0xeca <vTaskSuspendAll>
    {
        if( pucAlignedHeap == NULL )
      9c:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__data_end>
      a0:	90 91 a7 00 	lds	r25, 0x00A7	; 0x8000a7 <__data_end+0x1>
      a4:	89 2b       	or	r24, r25
      a6:	31 f4       	brne	.+12     	; 0xb4 <pvPortMalloc+0x22>
        {
            /* Ensure the heap starts on a correctly aligned boundary. */
            pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) & ucHeap[ portBYTE_ALIGNMENT - 1 ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
      a8:	8a ea       	ldi	r24, 0xAA	; 170
      aa:	90 e0       	ldi	r25, 0x00	; 0
      ac:	90 93 a7 00 	sts	0x00A7, r25	; 0x8000a7 <__data_end+0x1>
      b0:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__data_end>
        }

        /* Check there is enough room left for the allocation and. */
        if( ( xWantedSize > 0 ) &&                                /* valid size */
      b4:	20 97       	sbiw	r28, 0x00	; 0
      b6:	c9 f0       	breq	.+50     	; 0xea <pvPortMalloc+0x58>
            ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
      b8:	80 91 a8 00 	lds	r24, 0x00A8	; 0x8000a8 <xNextFreeByte>
      bc:	90 91 a9 00 	lds	r25, 0x00A9	; 0x8000a9 <xNextFreeByte+0x1>
      c0:	9e 01       	movw	r18, r28
      c2:	28 0f       	add	r18, r24
      c4:	39 1f       	adc	r19, r25
            /* Ensure the heap starts on a correctly aligned boundary. */
            pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) & ucHeap[ portBYTE_ALIGNMENT - 1 ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
        }

        /* Check there is enough room left for the allocation and. */
        if( ( xWantedSize > 0 ) &&                                /* valid size */
      c6:	2b 3d       	cpi	r18, 0xDB	; 219
      c8:	45 e0       	ldi	r20, 0x05	; 5
      ca:	34 07       	cpc	r19, r20
      cc:	88 f4       	brcc	.+34     	; 0xf0 <pvPortMalloc+0x5e>
            ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
      ce:	82 17       	cp	r24, r18
      d0:	93 07       	cpc	r25, r19
      d2:	88 f4       	brcc	.+34     	; 0xf6 <pvPortMalloc+0x64>
            ( ( xNextFreeByte + xWantedSize ) > xNextFreeByte ) ) /* Check for overflow. */
        {
            /* Return the next free byte then increment the index past this
             * block. */
            pvReturn = pucAlignedHeap + xNextFreeByte;
      d4:	c0 91 a6 00 	lds	r28, 0x00A6	; 0x8000a6 <__data_end>
      d8:	d0 91 a7 00 	lds	r29, 0x00A7	; 0x8000a7 <__data_end+0x1>
      dc:	c8 0f       	add	r28, r24
      de:	d9 1f       	adc	r29, r25
            xNextFreeByte += xWantedSize;
      e0:	30 93 a9 00 	sts	0x00A9, r19	; 0x8000a9 <xNextFreeByte+0x1>
      e4:	20 93 a8 00 	sts	0x00A8, r18	; 0x8000a8 <xNextFreeByte>
      e8:	08 c0       	rjmp	.+16     	; 0xfa <pvPortMalloc+0x68>

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
    void * pvReturn = NULL;
      ea:	c0 e0       	ldi	r28, 0x00	; 0
      ec:	d0 e0       	ldi	r29, 0x00	; 0
      ee:	05 c0       	rjmp	.+10     	; 0xfa <pvPortMalloc+0x68>
      f0:	c0 e0       	ldi	r28, 0x00	; 0
      f2:	d0 e0       	ldi	r29, 0x00	; 0
      f4:	02 c0       	rjmp	.+4      	; 0xfa <pvPortMalloc+0x68>
      f6:	c0 e0       	ldi	r28, 0x00	; 0
      f8:	d0 e0       	ldi	r29, 0x00	; 0
            xNextFreeByte += xWantedSize;
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
      fa:	0e 94 85 08 	call	0x110a	; 0x110a <xTaskResumeAll>
        }
    }
    #endif

    return pvReturn;
}
      fe:	ce 01       	movw	r24, r28
     100:	df 91       	pop	r29
     102:	cf 91       	pop	r28
     104:	08 95       	ret

00000106 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
     106:	08 95       	ret

00000108 <vListInitialise>:

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;

    ( pxList->uxNumberOfItems )++;
}
     108:	fc 01       	movw	r30, r24
     10a:	03 96       	adiw	r24, 0x03	; 3
     10c:	92 83       	std	Z+2, r25	; 0x02
     10e:	81 83       	std	Z+1, r24	; 0x01
     110:	2f ef       	ldi	r18, 0xFF	; 255
     112:	3f ef       	ldi	r19, 0xFF	; 255
     114:	34 83       	std	Z+4, r19	; 0x04
     116:	23 83       	std	Z+3, r18	; 0x03
     118:	96 83       	std	Z+6, r25	; 0x06
     11a:	85 83       	std	Z+5, r24	; 0x05
     11c:	90 87       	std	Z+8, r25	; 0x08
     11e:	87 83       	std	Z+7, r24	; 0x07
     120:	10 82       	st	Z, r1
     122:	08 95       	ret

00000124 <vListInitialiseItem>:
     124:	fc 01       	movw	r30, r24
     126:	11 86       	std	Z+9, r1	; 0x09
     128:	10 86       	std	Z+8, r1	; 0x08
     12a:	08 95       	ret

0000012c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
     12c:	cf 93       	push	r28
     12e:	df 93       	push	r29
     130:	eb 01       	movw	r28, r22
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     132:	48 81       	ld	r20, Y
     134:	59 81       	ldd	r21, Y+1	; 0x01
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
     136:	4f 3f       	cpi	r20, 0xFF	; 255
     138:	2f ef       	ldi	r18, 0xFF	; 255
     13a:	52 07       	cpc	r21, r18
     13c:	21 f4       	brne	.+8      	; 0x146 <vListInsert+0x1a>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
     13e:	fc 01       	movw	r30, r24
     140:	a7 81       	ldd	r26, Z+7	; 0x07
     142:	b0 85       	ldd	r27, Z+8	; 0x08
     144:	0d c0       	rjmp	.+26     	; 0x160 <vListInsert+0x34>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
     146:	dc 01       	movw	r26, r24
     148:	13 96       	adiw	r26, 0x03	; 3
     14a:	01 c0       	rjmp	.+2      	; 0x14e <vListInsert+0x22>
     14c:	df 01       	movw	r26, r30
     14e:	12 96       	adiw	r26, 0x02	; 2
     150:	ed 91       	ld	r30, X+
     152:	fc 91       	ld	r31, X
     154:	13 97       	sbiw	r26, 0x03	; 3
     156:	20 81       	ld	r18, Z
     158:	31 81       	ldd	r19, Z+1	; 0x01
     15a:	42 17       	cp	r20, r18
     15c:	53 07       	cpc	r21, r19
     15e:	b0 f7       	brcc	.-20     	; 0x14c <vListInsert+0x20>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
     160:	12 96       	adiw	r26, 0x02	; 2
     162:	ed 91       	ld	r30, X+
     164:	fc 91       	ld	r31, X
     166:	13 97       	sbiw	r26, 0x03	; 3
     168:	fb 83       	std	Y+3, r31	; 0x03
     16a:	ea 83       	std	Y+2, r30	; 0x02
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     16c:	d5 83       	std	Z+5, r29	; 0x05
     16e:	c4 83       	std	Z+4, r28	; 0x04
    pxNewListItem->pxPrevious = pxIterator;
     170:	bd 83       	std	Y+5, r27	; 0x05
     172:	ac 83       	std	Y+4, r26	; 0x04
    pxIterator->pxNext = pxNewListItem;
     174:	13 96       	adiw	r26, 0x03	; 3
     176:	dc 93       	st	X, r29
     178:	ce 93       	st	-X, r28
     17a:	12 97       	sbiw	r26, 0x02	; 2

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
     17c:	99 87       	std	Y+9, r25	; 0x09
     17e:	88 87       	std	Y+8, r24	; 0x08

    ( pxList->uxNumberOfItems )++;
     180:	fc 01       	movw	r30, r24
     182:	20 81       	ld	r18, Z
     184:	2f 5f       	subi	r18, 0xFF	; 255
     186:	20 83       	st	Z, r18
}
     188:	df 91       	pop	r29
     18a:	cf 91       	pop	r28
     18c:	08 95       	ret

0000018e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     18e:	cf 93       	push	r28
     190:	df 93       	push	r29
     192:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
     194:	a0 85       	ldd	r26, Z+8	; 0x08
     196:	b1 85       	ldd	r27, Z+9	; 0x09

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     198:	c2 81       	ldd	r28, Z+2	; 0x02
     19a:	d3 81       	ldd	r29, Z+3	; 0x03
     19c:	84 81       	ldd	r24, Z+4	; 0x04
     19e:	95 81       	ldd	r25, Z+5	; 0x05
     1a0:	9d 83       	std	Y+5, r25	; 0x05
     1a2:	8c 83       	std	Y+4, r24	; 0x04
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     1a4:	c4 81       	ldd	r28, Z+4	; 0x04
     1a6:	d5 81       	ldd	r29, Z+5	; 0x05
     1a8:	82 81       	ldd	r24, Z+2	; 0x02
     1aa:	93 81       	ldd	r25, Z+3	; 0x03
     1ac:	9b 83       	std	Y+3, r25	; 0x03
     1ae:	8a 83       	std	Y+2, r24	; 0x02

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
     1b0:	11 96       	adiw	r26, 0x01	; 1
     1b2:	8d 91       	ld	r24, X+
     1b4:	9c 91       	ld	r25, X
     1b6:	12 97       	sbiw	r26, 0x02	; 2
     1b8:	e8 17       	cp	r30, r24
     1ba:	f9 07       	cpc	r31, r25
     1bc:	31 f4       	brne	.+12     	; 0x1ca <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
     1be:	84 81       	ldd	r24, Z+4	; 0x04
     1c0:	95 81       	ldd	r25, Z+5	; 0x05
     1c2:	12 96       	adiw	r26, 0x02	; 2
     1c4:	9c 93       	st	X, r25
     1c6:	8e 93       	st	-X, r24
     1c8:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
     1ca:	11 86       	std	Z+9, r1	; 0x09
     1cc:	10 86       	std	Z+8, r1	; 0x08
    ( pxList->uxNumberOfItems )--;
     1ce:	8c 91       	ld	r24, X
     1d0:	81 50       	subi	r24, 0x01	; 1
     1d2:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
     1d4:	8c 91       	ld	r24, X
}
     1d6:	df 91       	pop	r29
     1d8:	cf 91       	pop	r28
     1da:	08 95       	ret

000001dc <Sender>:
	while (1)
	{
	}
}

void Sender(void * pv){
     1dc:	ec 01       	movw	r28, r24
	while(1){
		
		BaseType_t xStatus= xQueueSendToBack(xQueue,(unsigned char *)pv,50/portTICK_PERIOD_MS);
     1de:	20 e0       	ldi	r18, 0x00	; 0
     1e0:	42 e3       	ldi	r20, 0x32	; 50
     1e2:	50 e0       	ldi	r21, 0x00	; 0
     1e4:	be 01       	movw	r22, r28
     1e6:	80 91 e4 06 	lds	r24, 0x06E4	; 0x8006e4 <xQueue>
     1ea:	90 91 e5 06 	lds	r25, 0x06E5	; 0x8006e5 <xQueue+0x1>
     1ee:	0e 94 0a 04 	call	0x814	; 0x814 <xQueueGenericSend>
		taskYIELD();
     1f2:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <vPortYield>
     1f6:	f3 cf       	rjmp	.-26     	; 0x1de <Sender+0x2>

000001f8 <Receiver>:
	}
}

void Receiver(void * pv){
     1f8:	cf 93       	push	r28
     1fa:	df 93       	push	r29
     1fc:	00 d0       	rcall	.+0      	; 0x1fe <Receiver+0x6>
     1fe:	00 d0       	rcall	.+0      	; 0x200 <Receiver+0x8>
     200:	cd b7       	in	r28, 0x3d	; 61
     202:	de b7       	in	r29, 0x3e	; 62
	xdata  data;
	while(1){
		
		BaseType_t xStatus= xQueueReceive(xQueue,(xdata *)&data,50/portTICK_PERIOD_MS);
     204:	42 e3       	ldi	r20, 0x32	; 50
     206:	50 e0       	ldi	r21, 0x00	; 0
     208:	be 01       	movw	r22, r28
     20a:	6f 5f       	subi	r22, 0xFF	; 255
     20c:	7f 4f       	sbci	r23, 0xFF	; 255
     20e:	80 91 e4 06 	lds	r24, 0x06E4	; 0x8006e4 <xQueue>
     212:	90 91 e5 06 	lds	r25, 0x06E5	; 0x8006e5 <xQueue+0x1>
     216:	0e 94 9c 04 	call	0x938	; 0x938 <xQueueReceive>
		UART_SENDSTRING(data.xValue);
     21a:	89 81       	ldd	r24, Y+1	; 0x01
     21c:	9a 81       	ldd	r25, Y+2	; 0x02
     21e:	0e 94 ca 0a 	call	0x1594	; 0x1594 <UART_SENDSTRING>
		UART_SENDSTRING(data.senderNum);
     222:	8b 81       	ldd	r24, Y+3	; 0x03
     224:	9c 81       	ldd	r25, Y+4	; 0x04
     226:	0e 94 ca 0a 	call	0x1594	; 0x1594 <UART_SENDSTRING>
     22a:	ec cf       	rjmp	.-40     	; 0x204 <Receiver+0xc>

0000022c <main>:
	};


int main(void)
{
	UART_INT();
     22c:	0e 94 be 0a 	call	0x157c	; 0x157c <UART_INT>
	xQueue= xQueueCreate(2,sizeof( xdata));
     230:	40 e0       	ldi	r20, 0x00	; 0
     232:	64 e0       	ldi	r22, 0x04	; 4
     234:	82 e0       	ldi	r24, 0x02	; 2
     236:	0e 94 c9 03 	call	0x792	; 0x792 <xQueueGenericCreate>
     23a:	90 93 e5 06 	sts	0x06E5, r25	; 0x8006e5 <xQueue+0x1>
     23e:	80 93 e4 06 	sts	0x06E4, r24	; 0x8006e4 <xQueue>
	if (xQueue != NULL)
     242:	89 2b       	or	r24, r25
     244:	21 f1       	breq	.+72     	; 0x28e <main+0x62>
	{

		xTaskCreate(Sender,"sender1",100,(void *)&senderData[0],2,NULL);
     246:	e1 2c       	mov	r14, r1
     248:	f1 2c       	mov	r15, r1
     24a:	02 e0       	ldi	r16, 0x02	; 2
     24c:	28 e9       	ldi	r18, 0x98	; 152
     24e:	30 e0       	ldi	r19, 0x00	; 0
     250:	44 e6       	ldi	r20, 0x64	; 100
     252:	50 e0       	ldi	r21, 0x00	; 0
     254:	61 e6       	ldi	r22, 0x61	; 97
     256:	70 e0       	ldi	r23, 0x00	; 0
     258:	8e ee       	ldi	r24, 0xEE	; 238
     25a:	90 e0       	ldi	r25, 0x00	; 0
     25c:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <xTaskCreate>
		xTaskCreate(Sender,"sender2",100,(void *)&senderData[1],2,NULL);
     260:	2c e9       	ldi	r18, 0x9C	; 156
     262:	30 e0       	ldi	r19, 0x00	; 0
     264:	44 e6       	ldi	r20, 0x64	; 100
     266:	50 e0       	ldi	r21, 0x00	; 0
     268:	69 e6       	ldi	r22, 0x69	; 105
     26a:	70 e0       	ldi	r23, 0x00	; 0
     26c:	8e ee       	ldi	r24, 0xEE	; 238
     26e:	90 e0       	ldi	r25, 0x00	; 0
     270:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <xTaskCreate>
		xTaskCreate(Receiver,"receiver",100,NULL,1,NULL);
     274:	01 e0       	ldi	r16, 0x01	; 1
     276:	20 e0       	ldi	r18, 0x00	; 0
     278:	30 e0       	ldi	r19, 0x00	; 0
     27a:	44 e6       	ldi	r20, 0x64	; 100
     27c:	50 e0       	ldi	r21, 0x00	; 0
     27e:	61 e7       	ldi	r22, 0x71	; 113
     280:	70 e0       	ldi	r23, 0x00	; 0
     282:	8c ef       	ldi	r24, 0xFC	; 252
     284:	90 e0       	ldi	r25, 0x00	; 0
     286:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <xTaskCreate>
		vTaskStartScheduler();
     28a:	0e 94 39 07 	call	0xe72	; 0xe72 <vTaskStartScheduler>
     28e:	ff cf       	rjmp	.-2      	; 0x28e <main+0x62>

00000290 <prvSetupTimerInterrupt>:
	return pdTRUE;
}
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
     290:	1b bc       	out	0x2b, r1	; 43
     292:	89 ef       	ldi	r24, 0xF9	; 249
     294:	8a bd       	out	0x2a, r24	; 42
     296:	8b e0       	ldi	r24, 0x0B	; 11
     298:	8e bd       	out	0x2e, r24	; 46
     29a:	89 b7       	in	r24, 0x39	; 57
     29c:	80 61       	ori	r24, 0x10	; 16
     29e:	89 bf       	out	0x39, r24	; 57
     2a0:	08 95       	ret

000002a2 <pxPortInitialiseStack>:
     2a2:	31 e1       	ldi	r19, 0x11	; 17
     2a4:	fc 01       	movw	r30, r24
     2a6:	30 83       	st	Z, r19
     2a8:	31 97       	sbiw	r30, 0x01	; 1
     2aa:	22 e2       	ldi	r18, 0x22	; 34
     2ac:	20 83       	st	Z, r18
     2ae:	31 97       	sbiw	r30, 0x01	; 1
     2b0:	a3 e3       	ldi	r26, 0x33	; 51
     2b2:	a0 83       	st	Z, r26
     2b4:	31 97       	sbiw	r30, 0x01	; 1
     2b6:	60 83       	st	Z, r22
     2b8:	31 97       	sbiw	r30, 0x01	; 1
     2ba:	70 83       	st	Z, r23
     2bc:	31 97       	sbiw	r30, 0x01	; 1
     2be:	10 82       	st	Z, r1
     2c0:	31 97       	sbiw	r30, 0x01	; 1
     2c2:	60 e8       	ldi	r22, 0x80	; 128
     2c4:	60 83       	st	Z, r22
     2c6:	31 97       	sbiw	r30, 0x01	; 1
     2c8:	10 82       	st	Z, r1
     2ca:	31 97       	sbiw	r30, 0x01	; 1
     2cc:	62 e0       	ldi	r22, 0x02	; 2
     2ce:	60 83       	st	Z, r22
     2d0:	31 97       	sbiw	r30, 0x01	; 1
     2d2:	63 e0       	ldi	r22, 0x03	; 3
     2d4:	60 83       	st	Z, r22
     2d6:	31 97       	sbiw	r30, 0x01	; 1
     2d8:	64 e0       	ldi	r22, 0x04	; 4
     2da:	60 83       	st	Z, r22
     2dc:	31 97       	sbiw	r30, 0x01	; 1
     2de:	65 e0       	ldi	r22, 0x05	; 5
     2e0:	60 83       	st	Z, r22
     2e2:	31 97       	sbiw	r30, 0x01	; 1
     2e4:	66 e0       	ldi	r22, 0x06	; 6
     2e6:	60 83       	st	Z, r22
     2e8:	31 97       	sbiw	r30, 0x01	; 1
     2ea:	67 e0       	ldi	r22, 0x07	; 7
     2ec:	60 83       	st	Z, r22
     2ee:	31 97       	sbiw	r30, 0x01	; 1
     2f0:	68 e0       	ldi	r22, 0x08	; 8
     2f2:	60 83       	st	Z, r22
     2f4:	31 97       	sbiw	r30, 0x01	; 1
     2f6:	69 e0       	ldi	r22, 0x09	; 9
     2f8:	60 83       	st	Z, r22
     2fa:	31 97       	sbiw	r30, 0x01	; 1
     2fc:	60 e1       	ldi	r22, 0x10	; 16
     2fe:	60 83       	st	Z, r22
     300:	31 97       	sbiw	r30, 0x01	; 1
     302:	30 83       	st	Z, r19
     304:	31 97       	sbiw	r30, 0x01	; 1
     306:	32 e1       	ldi	r19, 0x12	; 18
     308:	30 83       	st	Z, r19
     30a:	31 97       	sbiw	r30, 0x01	; 1
     30c:	33 e1       	ldi	r19, 0x13	; 19
     30e:	30 83       	st	Z, r19
     310:	31 97       	sbiw	r30, 0x01	; 1
     312:	34 e1       	ldi	r19, 0x14	; 20
     314:	30 83       	st	Z, r19
     316:	31 97       	sbiw	r30, 0x01	; 1
     318:	35 e1       	ldi	r19, 0x15	; 21
     31a:	30 83       	st	Z, r19
     31c:	31 97       	sbiw	r30, 0x01	; 1
     31e:	36 e1       	ldi	r19, 0x16	; 22
     320:	30 83       	st	Z, r19
     322:	31 97       	sbiw	r30, 0x01	; 1
     324:	37 e1       	ldi	r19, 0x17	; 23
     326:	30 83       	st	Z, r19
     328:	31 97       	sbiw	r30, 0x01	; 1
     32a:	38 e1       	ldi	r19, 0x18	; 24
     32c:	30 83       	st	Z, r19
     32e:	31 97       	sbiw	r30, 0x01	; 1
     330:	39 e1       	ldi	r19, 0x19	; 25
     332:	30 83       	st	Z, r19
     334:	31 97       	sbiw	r30, 0x01	; 1
     336:	30 e2       	ldi	r19, 0x20	; 32
     338:	30 83       	st	Z, r19
     33a:	31 97       	sbiw	r30, 0x01	; 1
     33c:	31 e2       	ldi	r19, 0x21	; 33
     33e:	30 83       	st	Z, r19
     340:	31 97       	sbiw	r30, 0x01	; 1
     342:	20 83       	st	Z, r18
     344:	31 97       	sbiw	r30, 0x01	; 1
     346:	23 e2       	ldi	r18, 0x23	; 35
     348:	20 83       	st	Z, r18
     34a:	31 97       	sbiw	r30, 0x01	; 1
     34c:	40 83       	st	Z, r20
     34e:	31 97       	sbiw	r30, 0x01	; 1
     350:	50 83       	st	Z, r21
     352:	31 97       	sbiw	r30, 0x01	; 1
     354:	26 e2       	ldi	r18, 0x26	; 38
     356:	20 83       	st	Z, r18
     358:	31 97       	sbiw	r30, 0x01	; 1
     35a:	27 e2       	ldi	r18, 0x27	; 39
     35c:	20 83       	st	Z, r18
     35e:	31 97       	sbiw	r30, 0x01	; 1
     360:	28 e2       	ldi	r18, 0x28	; 40
     362:	20 83       	st	Z, r18
     364:	31 97       	sbiw	r30, 0x01	; 1
     366:	29 e2       	ldi	r18, 0x29	; 41
     368:	20 83       	st	Z, r18
     36a:	31 97       	sbiw	r30, 0x01	; 1
     36c:	20 e3       	ldi	r18, 0x30	; 48
     36e:	20 83       	st	Z, r18
     370:	31 97       	sbiw	r30, 0x01	; 1
     372:	21 e3       	ldi	r18, 0x31	; 49
     374:	20 83       	st	Z, r18
     376:	86 97       	sbiw	r24, 0x26	; 38
     378:	08 95       	ret

0000037a <xPortStartScheduler>:
     37a:	0e 94 48 01 	call	0x290	; 0x290 <prvSetupTimerInterrupt>
     37e:	a0 91 e2 06 	lds	r26, 0x06E2	; 0x8006e2 <pxCurrentTCB>
     382:	b0 91 e3 06 	lds	r27, 0x06E3	; 0x8006e3 <pxCurrentTCB+0x1>
     386:	cd 91       	ld	r28, X+
     388:	cd bf       	out	0x3d, r28	; 61
     38a:	dd 91       	ld	r29, X+
     38c:	de bf       	out	0x3e, r29	; 62
     38e:	ff 91       	pop	r31
     390:	ef 91       	pop	r30
     392:	df 91       	pop	r29
     394:	cf 91       	pop	r28
     396:	bf 91       	pop	r27
     398:	af 91       	pop	r26
     39a:	9f 91       	pop	r25
     39c:	8f 91       	pop	r24
     39e:	7f 91       	pop	r23
     3a0:	6f 91       	pop	r22
     3a2:	5f 91       	pop	r21
     3a4:	4f 91       	pop	r20
     3a6:	3f 91       	pop	r19
     3a8:	2f 91       	pop	r18
     3aa:	1f 91       	pop	r17
     3ac:	0f 91       	pop	r16
     3ae:	ff 90       	pop	r15
     3b0:	ef 90       	pop	r14
     3b2:	df 90       	pop	r13
     3b4:	cf 90       	pop	r12
     3b6:	bf 90       	pop	r11
     3b8:	af 90       	pop	r10
     3ba:	9f 90       	pop	r9
     3bc:	8f 90       	pop	r8
     3be:	7f 90       	pop	r7
     3c0:	6f 90       	pop	r6
     3c2:	5f 90       	pop	r5
     3c4:	4f 90       	pop	r4
     3c6:	3f 90       	pop	r3
     3c8:	2f 90       	pop	r2
     3ca:	1f 90       	pop	r1
     3cc:	0f 90       	pop	r0
     3ce:	0f be       	out	0x3f, r0	; 63
     3d0:	0f 90       	pop	r0
     3d2:	08 95       	ret
     3d4:	81 e0       	ldi	r24, 0x01	; 1
     3d6:	08 95       	ret

000003d8 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
     3d8:	0f 92       	push	r0
     3da:	0f b6       	in	r0, 0x3f	; 63
     3dc:	f8 94       	cli
     3de:	0f 92       	push	r0
     3e0:	1f 92       	push	r1
     3e2:	11 24       	eor	r1, r1
     3e4:	2f 92       	push	r2
     3e6:	3f 92       	push	r3
     3e8:	4f 92       	push	r4
     3ea:	5f 92       	push	r5
     3ec:	6f 92       	push	r6
     3ee:	7f 92       	push	r7
     3f0:	8f 92       	push	r8
     3f2:	9f 92       	push	r9
     3f4:	af 92       	push	r10
     3f6:	bf 92       	push	r11
     3f8:	cf 92       	push	r12
     3fa:	df 92       	push	r13
     3fc:	ef 92       	push	r14
     3fe:	ff 92       	push	r15
     400:	0f 93       	push	r16
     402:	1f 93       	push	r17
     404:	2f 93       	push	r18
     406:	3f 93       	push	r19
     408:	4f 93       	push	r20
     40a:	5f 93       	push	r21
     40c:	6f 93       	push	r22
     40e:	7f 93       	push	r23
     410:	8f 93       	push	r24
     412:	9f 93       	push	r25
     414:	af 93       	push	r26
     416:	bf 93       	push	r27
     418:	cf 93       	push	r28
     41a:	df 93       	push	r29
     41c:	ef 93       	push	r30
     41e:	ff 93       	push	r31
     420:	a0 91 e2 06 	lds	r26, 0x06E2	; 0x8006e2 <pxCurrentTCB>
     424:	b0 91 e3 06 	lds	r27, 0x06E3	; 0x8006e3 <pxCurrentTCB+0x1>
     428:	0d b6       	in	r0, 0x3d	; 61
     42a:	0d 92       	st	X+, r0
     42c:	0e b6       	in	r0, 0x3e	; 62
     42e:	0d 92       	st	X+, r0
	vTaskSwitchContext();
     430:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
     434:	a0 91 e2 06 	lds	r26, 0x06E2	; 0x8006e2 <pxCurrentTCB>
     438:	b0 91 e3 06 	lds	r27, 0x06E3	; 0x8006e3 <pxCurrentTCB+0x1>
     43c:	cd 91       	ld	r28, X+
     43e:	cd bf       	out	0x3d, r28	; 61
     440:	dd 91       	ld	r29, X+
     442:	de bf       	out	0x3e, r29	; 62
     444:	ff 91       	pop	r31
     446:	ef 91       	pop	r30
     448:	df 91       	pop	r29
     44a:	cf 91       	pop	r28
     44c:	bf 91       	pop	r27
     44e:	af 91       	pop	r26
     450:	9f 91       	pop	r25
     452:	8f 91       	pop	r24
     454:	7f 91       	pop	r23
     456:	6f 91       	pop	r22
     458:	5f 91       	pop	r21
     45a:	4f 91       	pop	r20
     45c:	3f 91       	pop	r19
     45e:	2f 91       	pop	r18
     460:	1f 91       	pop	r17
     462:	0f 91       	pop	r16
     464:	ff 90       	pop	r15
     466:	ef 90       	pop	r14
     468:	df 90       	pop	r13
     46a:	cf 90       	pop	r12
     46c:	bf 90       	pop	r11
     46e:	af 90       	pop	r10
     470:	9f 90       	pop	r9
     472:	8f 90       	pop	r8
     474:	7f 90       	pop	r7
     476:	6f 90       	pop	r6
     478:	5f 90       	pop	r5
     47a:	4f 90       	pop	r4
     47c:	3f 90       	pop	r3
     47e:	2f 90       	pop	r2
     480:	1f 90       	pop	r1
     482:	0f 90       	pop	r0
     484:	0f be       	out	0x3f, r0	; 63
     486:	0f 90       	pop	r0

	asm volatile ( "ret" );
     488:	08 95       	ret

0000048a <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
     48a:	0f 92       	push	r0
     48c:	0f b6       	in	r0, 0x3f	; 63
     48e:	f8 94       	cli
     490:	0f 92       	push	r0
     492:	1f 92       	push	r1
     494:	11 24       	eor	r1, r1
     496:	2f 92       	push	r2
     498:	3f 92       	push	r3
     49a:	4f 92       	push	r4
     49c:	5f 92       	push	r5
     49e:	6f 92       	push	r6
     4a0:	7f 92       	push	r7
     4a2:	8f 92       	push	r8
     4a4:	9f 92       	push	r9
     4a6:	af 92       	push	r10
     4a8:	bf 92       	push	r11
     4aa:	cf 92       	push	r12
     4ac:	df 92       	push	r13
     4ae:	ef 92       	push	r14
     4b0:	ff 92       	push	r15
     4b2:	0f 93       	push	r16
     4b4:	1f 93       	push	r17
     4b6:	2f 93       	push	r18
     4b8:	3f 93       	push	r19
     4ba:	4f 93       	push	r20
     4bc:	5f 93       	push	r21
     4be:	6f 93       	push	r22
     4c0:	7f 93       	push	r23
     4c2:	8f 93       	push	r24
     4c4:	9f 93       	push	r25
     4c6:	af 93       	push	r26
     4c8:	bf 93       	push	r27
     4ca:	cf 93       	push	r28
     4cc:	df 93       	push	r29
     4ce:	ef 93       	push	r30
     4d0:	ff 93       	push	r31
     4d2:	a0 91 e2 06 	lds	r26, 0x06E2	; 0x8006e2 <pxCurrentTCB>
     4d6:	b0 91 e3 06 	lds	r27, 0x06E3	; 0x8006e3 <pxCurrentTCB+0x1>
     4da:	0d b6       	in	r0, 0x3d	; 61
     4dc:	0d 92       	st	X+, r0
     4de:	0e b6       	in	r0, 0x3e	; 62
     4e0:	0d 92       	st	X+, r0
	if( xTaskIncrementTick() != pdFALSE )
     4e2:	0e 94 6b 07 	call	0xed6	; 0xed6 <xTaskIncrementTick>
     4e6:	81 11       	cpse	r24, r1
	{
		vTaskSwitchContext();
     4e8:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <vTaskSwitchContext>
	}
	portRESTORE_CONTEXT();
     4ec:	a0 91 e2 06 	lds	r26, 0x06E2	; 0x8006e2 <pxCurrentTCB>
     4f0:	b0 91 e3 06 	lds	r27, 0x06E3	; 0x8006e3 <pxCurrentTCB+0x1>
     4f4:	cd 91       	ld	r28, X+
     4f6:	cd bf       	out	0x3d, r28	; 61
     4f8:	dd 91       	ld	r29, X+
     4fa:	de bf       	out	0x3e, r29	; 62
     4fc:	ff 91       	pop	r31
     4fe:	ef 91       	pop	r30
     500:	df 91       	pop	r29
     502:	cf 91       	pop	r28
     504:	bf 91       	pop	r27
     506:	af 91       	pop	r26
     508:	9f 91       	pop	r25
     50a:	8f 91       	pop	r24
     50c:	7f 91       	pop	r23
     50e:	6f 91       	pop	r22
     510:	5f 91       	pop	r21
     512:	4f 91       	pop	r20
     514:	3f 91       	pop	r19
     516:	2f 91       	pop	r18
     518:	1f 91       	pop	r17
     51a:	0f 91       	pop	r16
     51c:	ff 90       	pop	r15
     51e:	ef 90       	pop	r14
     520:	df 90       	pop	r13
     522:	cf 90       	pop	r12
     524:	bf 90       	pop	r11
     526:	af 90       	pop	r10
     528:	9f 90       	pop	r9
     52a:	8f 90       	pop	r8
     52c:	7f 90       	pop	r7
     52e:	6f 90       	pop	r6
     530:	5f 90       	pop	r5
     532:	4f 90       	pop	r4
     534:	3f 90       	pop	r3
     536:	2f 90       	pop	r2
     538:	1f 90       	pop	r1
     53a:	0f 90       	pop	r0
     53c:	0f be       	out	0x3f, r0	; 63
     53e:	0f 90       	pop	r0

	asm volatile ( "ret" );
     540:	08 95       	ret

00000542 <__vector_7>:
	 * count is incremented after the context is saved.
	 */
	void TIMER1_COMPA_vect( void ) __attribute__ ( ( signal, naked ) );
	void TIMER1_COMPA_vect( void )
	{
		vPortYieldFromTick();
     542:	0e 94 45 02 	call	0x48a	; 0x48a <vPortYieldFromTick>
		asm volatile ( "reti" );
     546:	18 95       	reti

00000548 <prvIsQueueEmpty>:
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
}
     548:	0f b6       	in	r0, 0x3f	; 63
     54a:	f8 94       	cli
     54c:	0f 92       	push	r0
     54e:	fc 01       	movw	r30, r24
     550:	82 8d       	ldd	r24, Z+26	; 0x1a
     552:	81 11       	cpse	r24, r1
     554:	02 c0       	rjmp	.+4      	; 0x55a <prvIsQueueEmpty+0x12>
     556:	81 e0       	ldi	r24, 0x01	; 1
     558:	01 c0       	rjmp	.+2      	; 0x55c <prvIsQueueEmpty+0x14>
     55a:	80 e0       	ldi	r24, 0x00	; 0
     55c:	0f 90       	pop	r0
     55e:	0f be       	out	0x3f, r0	; 63
     560:	08 95       	ret

00000562 <prvIsQueueFull>:
     562:	0f b6       	in	r0, 0x3f	; 63
     564:	f8 94       	cli
     566:	0f 92       	push	r0
     568:	fc 01       	movw	r30, r24
     56a:	22 8d       	ldd	r18, Z+26	; 0x1a
     56c:	83 8d       	ldd	r24, Z+27	; 0x1b
     56e:	28 13       	cpse	r18, r24
     570:	02 c0       	rjmp	.+4      	; 0x576 <prvIsQueueFull+0x14>
     572:	81 e0       	ldi	r24, 0x01	; 1
     574:	01 c0       	rjmp	.+2      	; 0x578 <prvIsQueueFull+0x16>
     576:	80 e0       	ldi	r24, 0x00	; 0
     578:	0f 90       	pop	r0
     57a:	0f be       	out	0x3f, r0	; 63
     57c:	08 95       	ret

0000057e <prvCopyDataToQueue>:
     57e:	0f 93       	push	r16
     580:	1f 93       	push	r17
     582:	cf 93       	push	r28
     584:	df 93       	push	r29
     586:	ec 01       	movw	r28, r24
     588:	04 2f       	mov	r16, r20
     58a:	1a 8d       	ldd	r17, Y+26	; 0x1a
     58c:	4c 8d       	ldd	r20, Y+28	; 0x1c
     58e:	44 23       	and	r20, r20
     590:	b9 f1       	breq	.+110    	; 0x600 <prvCopyDataToQueue+0x82>
     592:	01 11       	cpse	r16, r1
     594:	16 c0       	rjmp	.+44     	; 0x5c2 <prvCopyDataToQueue+0x44>
     596:	50 e0       	ldi	r21, 0x00	; 0
     598:	8a 81       	ldd	r24, Y+2	; 0x02
     59a:	9b 81       	ldd	r25, Y+3	; 0x03
     59c:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <memcpy>
     5a0:	2c 8d       	ldd	r18, Y+28	; 0x1c
     5a2:	8a 81       	ldd	r24, Y+2	; 0x02
     5a4:	9b 81       	ldd	r25, Y+3	; 0x03
     5a6:	82 0f       	add	r24, r18
     5a8:	91 1d       	adc	r25, r1
     5aa:	9b 83       	std	Y+3, r25	; 0x03
     5ac:	8a 83       	std	Y+2, r24	; 0x02
     5ae:	2c 81       	ldd	r18, Y+4	; 0x04
     5b0:	3d 81       	ldd	r19, Y+5	; 0x05
     5b2:	82 17       	cp	r24, r18
     5b4:	93 07       	cpc	r25, r19
     5b6:	20 f1       	brcs	.+72     	; 0x600 <prvCopyDataToQueue+0x82>
     5b8:	88 81       	ld	r24, Y
     5ba:	99 81       	ldd	r25, Y+1	; 0x01
     5bc:	9b 83       	std	Y+3, r25	; 0x03
     5be:	8a 83       	std	Y+2, r24	; 0x02
     5c0:	1f c0       	rjmp	.+62     	; 0x600 <prvCopyDataToQueue+0x82>
     5c2:	50 e0       	ldi	r21, 0x00	; 0
     5c4:	8e 81       	ldd	r24, Y+6	; 0x06
     5c6:	9f 81       	ldd	r25, Y+7	; 0x07
     5c8:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <memcpy>
     5cc:	8c 8d       	ldd	r24, Y+28	; 0x1c
     5ce:	90 e0       	ldi	r25, 0x00	; 0
     5d0:	91 95       	neg	r25
     5d2:	81 95       	neg	r24
     5d4:	91 09       	sbc	r25, r1
     5d6:	2e 81       	ldd	r18, Y+6	; 0x06
     5d8:	3f 81       	ldd	r19, Y+7	; 0x07
     5da:	28 0f       	add	r18, r24
     5dc:	39 1f       	adc	r19, r25
     5de:	3f 83       	std	Y+7, r19	; 0x07
     5e0:	2e 83       	std	Y+6, r18	; 0x06
     5e2:	48 81       	ld	r20, Y
     5e4:	59 81       	ldd	r21, Y+1	; 0x01
     5e6:	24 17       	cp	r18, r20
     5e8:	35 07       	cpc	r19, r21
     5ea:	30 f4       	brcc	.+12     	; 0x5f8 <prvCopyDataToQueue+0x7a>
     5ec:	2c 81       	ldd	r18, Y+4	; 0x04
     5ee:	3d 81       	ldd	r19, Y+5	; 0x05
     5f0:	82 0f       	add	r24, r18
     5f2:	93 1f       	adc	r25, r19
     5f4:	9f 83       	std	Y+7, r25	; 0x07
     5f6:	8e 83       	std	Y+6, r24	; 0x06
     5f8:	02 30       	cpi	r16, 0x02	; 2
     5fa:	11 f4       	brne	.+4      	; 0x600 <prvCopyDataToQueue+0x82>
     5fc:	11 11       	cpse	r17, r1
     5fe:	11 50       	subi	r17, 0x01	; 1
     600:	1f 5f       	subi	r17, 0xFF	; 255
     602:	1a 8f       	std	Y+26, r17	; 0x1a
     604:	80 e0       	ldi	r24, 0x00	; 0
     606:	df 91       	pop	r29
     608:	cf 91       	pop	r28
     60a:	1f 91       	pop	r17
     60c:	0f 91       	pop	r16
     60e:	08 95       	ret

00000610 <prvCopyDataFromQueue>:
     610:	fc 01       	movw	r30, r24
     612:	44 8d       	ldd	r20, Z+28	; 0x1c
     614:	44 23       	and	r20, r20
     616:	a9 f0       	breq	.+42     	; 0x642 <prvCopyDataFromQueue+0x32>
     618:	50 e0       	ldi	r21, 0x00	; 0
     61a:	26 81       	ldd	r18, Z+6	; 0x06
     61c:	37 81       	ldd	r19, Z+7	; 0x07
     61e:	24 0f       	add	r18, r20
     620:	35 1f       	adc	r19, r21
     622:	37 83       	std	Z+7, r19	; 0x07
     624:	26 83       	std	Z+6, r18	; 0x06
     626:	84 81       	ldd	r24, Z+4	; 0x04
     628:	95 81       	ldd	r25, Z+5	; 0x05
     62a:	28 17       	cp	r18, r24
     62c:	39 07       	cpc	r19, r25
     62e:	20 f0       	brcs	.+8      	; 0x638 <prvCopyDataFromQueue+0x28>
     630:	80 81       	ld	r24, Z
     632:	91 81       	ldd	r25, Z+1	; 0x01
     634:	97 83       	std	Z+7, r25	; 0x07
     636:	86 83       	std	Z+6, r24	; 0x06
     638:	cb 01       	movw	r24, r22
     63a:	66 81       	ldd	r22, Z+6	; 0x06
     63c:	77 81       	ldd	r23, Z+7	; 0x07
     63e:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <memcpy>
     642:	08 95       	ret

00000644 <prvUnlockQueue>:
     644:	1f 93       	push	r17
     646:	cf 93       	push	r28
     648:	df 93       	push	r29
     64a:	ec 01       	movw	r28, r24
     64c:	0f b6       	in	r0, 0x3f	; 63
     64e:	f8 94       	cli
     650:	0f 92       	push	r0
     652:	1e 8d       	ldd	r17, Y+30	; 0x1e
     654:	0b c0       	rjmp	.+22     	; 0x66c <prvUnlockQueue+0x28>
     656:	89 89       	ldd	r24, Y+17	; 0x11
     658:	88 23       	and	r24, r24
     65a:	51 f0       	breq	.+20     	; 0x670 <prvUnlockQueue+0x2c>
     65c:	ce 01       	movw	r24, r28
     65e:	41 96       	adiw	r24, 0x11	; 17
     660:	0e 94 c0 09 	call	0x1380	; 0x1380 <xTaskRemoveFromEventList>
     664:	81 11       	cpse	r24, r1
     666:	0e 94 ba 0a 	call	0x1574	; 0x1574 <vTaskMissedYield>
     66a:	11 50       	subi	r17, 0x01	; 1
     66c:	11 16       	cp	r1, r17
     66e:	9c f3       	brlt	.-26     	; 0x656 <prvUnlockQueue+0x12>
     670:	8f ef       	ldi	r24, 0xFF	; 255
     672:	8e 8f       	std	Y+30, r24	; 0x1e
     674:	0f 90       	pop	r0
     676:	0f be       	out	0x3f, r0	; 63
     678:	0f b6       	in	r0, 0x3f	; 63
     67a:	f8 94       	cli
     67c:	0f 92       	push	r0
     67e:	1d 8d       	ldd	r17, Y+29	; 0x1d
     680:	0b c0       	rjmp	.+22     	; 0x698 <prvUnlockQueue+0x54>
     682:	88 85       	ldd	r24, Y+8	; 0x08
     684:	88 23       	and	r24, r24
     686:	51 f0       	breq	.+20     	; 0x69c <prvUnlockQueue+0x58>
     688:	ce 01       	movw	r24, r28
     68a:	08 96       	adiw	r24, 0x08	; 8
     68c:	0e 94 c0 09 	call	0x1380	; 0x1380 <xTaskRemoveFromEventList>
     690:	81 11       	cpse	r24, r1
     692:	0e 94 ba 0a 	call	0x1574	; 0x1574 <vTaskMissedYield>
     696:	11 50       	subi	r17, 0x01	; 1
     698:	11 16       	cp	r1, r17
     69a:	9c f3       	brlt	.-26     	; 0x682 <prvUnlockQueue+0x3e>
     69c:	8f ef       	ldi	r24, 0xFF	; 255
     69e:	8d 8f       	std	Y+29, r24	; 0x1d
     6a0:	0f 90       	pop	r0
     6a2:	0f be       	out	0x3f, r0	; 63
     6a4:	df 91       	pop	r29
     6a6:	cf 91       	pop	r28
     6a8:	1f 91       	pop	r17
     6aa:	08 95       	ret

000006ac <xQueueGenericReset>:
     6ac:	0f 93       	push	r16
     6ae:	1f 93       	push	r17
     6b0:	cf 93       	push	r28
     6b2:	df 93       	push	r29
     6b4:	fc 01       	movw	r30, r24
     6b6:	36 2f       	mov	r19, r22
     6b8:	89 2b       	or	r24, r25
     6ba:	09 f4       	brne	.+2      	; 0x6be <xQueueGenericReset+0x12>
     6bc:	4d c0       	rjmp	.+154    	; 0x758 <xQueueGenericReset+0xac>
     6be:	23 8d       	ldd	r18, Z+27	; 0x1b
     6c0:	22 23       	and	r18, r18
     6c2:	09 f4       	brne	.+2      	; 0x6c6 <xQueueGenericReset+0x1a>
     6c4:	4b c0       	rjmp	.+150    	; 0x75c <xQueueGenericReset+0xb0>
     6c6:	02 2f       	mov	r16, r18
     6c8:	10 e0       	ldi	r17, 0x00	; 0
     6ca:	8f ef       	ldi	r24, 0xFF	; 255
     6cc:	9f ef       	ldi	r25, 0xFF	; 255
     6ce:	b8 01       	movw	r22, r16
     6d0:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <__udivmodhi4>
     6d4:	44 8d       	ldd	r20, Z+28	; 0x1c
     6d6:	84 2f       	mov	r24, r20
     6d8:	90 e0       	ldi	r25, 0x00	; 0
     6da:	68 17       	cp	r22, r24
     6dc:	79 07       	cpc	r23, r25
     6de:	08 f4       	brcc	.+2      	; 0x6e2 <xQueueGenericReset+0x36>
     6e0:	3f c0       	rjmp	.+126    	; 0x760 <xQueueGenericReset+0xb4>
     6e2:	ef 01       	movw	r28, r30
     6e4:	0f b6       	in	r0, 0x3f	; 63
     6e6:	f8 94       	cli
     6e8:	0f 92       	push	r0
     6ea:	60 81       	ld	r22, Z
     6ec:	71 81       	ldd	r23, Z+1	; 0x01
     6ee:	fb 01       	movw	r30, r22
     6f0:	24 9f       	mul	r18, r20
     6f2:	e0 0d       	add	r30, r0
     6f4:	f1 1d       	adc	r31, r1
     6f6:	11 24       	eor	r1, r1
     6f8:	fd 83       	std	Y+5, r31	; 0x05
     6fa:	ec 83       	std	Y+4, r30	; 0x04
     6fc:	1a 8e       	std	Y+26, r1	; 0x1a
     6fe:	7b 83       	std	Y+3, r23	; 0x03
     700:	6a 83       	std	Y+2, r22	; 0x02
     702:	01 50       	subi	r16, 0x01	; 1
     704:	11 09       	sbc	r17, r1
     706:	80 9f       	mul	r24, r16
     708:	a0 01       	movw	r20, r0
     70a:	81 9f       	mul	r24, r17
     70c:	50 0d       	add	r21, r0
     70e:	90 9f       	mul	r25, r16
     710:	50 0d       	add	r21, r0
     712:	11 24       	eor	r1, r1
     714:	cb 01       	movw	r24, r22
     716:	84 0f       	add	r24, r20
     718:	95 1f       	adc	r25, r21
     71a:	9f 83       	std	Y+7, r25	; 0x07
     71c:	8e 83       	std	Y+6, r24	; 0x06
     71e:	8f ef       	ldi	r24, 0xFF	; 255
     720:	8d 8f       	std	Y+29, r24	; 0x1d
     722:	8e 8f       	std	Y+30, r24	; 0x1e
     724:	31 11       	cpse	r19, r1
     726:	0c c0       	rjmp	.+24     	; 0x740 <xQueueGenericReset+0x94>
     728:	88 85       	ldd	r24, Y+8	; 0x08
     72a:	88 23       	and	r24, r24
     72c:	89 f0       	breq	.+34     	; 0x750 <xQueueGenericReset+0xa4>
     72e:	ce 01       	movw	r24, r28
     730:	08 96       	adiw	r24, 0x08	; 8
     732:	0e 94 c0 09 	call	0x1380	; 0x1380 <xTaskRemoveFromEventList>
     736:	88 23       	and	r24, r24
     738:	59 f0       	breq	.+22     	; 0x750 <xQueueGenericReset+0xa4>
     73a:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <vPortYield>
     73e:	08 c0       	rjmp	.+16     	; 0x750 <xQueueGenericReset+0xa4>
     740:	ce 01       	movw	r24, r28
     742:	08 96       	adiw	r24, 0x08	; 8
     744:	0e 94 84 00 	call	0x108	; 0x108 <vListInitialise>
     748:	ce 01       	movw	r24, r28
     74a:	41 96       	adiw	r24, 0x11	; 17
     74c:	0e 94 84 00 	call	0x108	; 0x108 <vListInitialise>
     750:	0f 90       	pop	r0
     752:	0f be       	out	0x3f, r0	; 63
     754:	81 e0       	ldi	r24, 0x01	; 1
     756:	05 c0       	rjmp	.+10     	; 0x762 <xQueueGenericReset+0xb6>
     758:	80 e0       	ldi	r24, 0x00	; 0
     75a:	03 c0       	rjmp	.+6      	; 0x762 <xQueueGenericReset+0xb6>
     75c:	80 e0       	ldi	r24, 0x00	; 0
     75e:	01 c0       	rjmp	.+2      	; 0x762 <xQueueGenericReset+0xb6>
     760:	80 e0       	ldi	r24, 0x00	; 0
     762:	df 91       	pop	r29
     764:	cf 91       	pop	r28
     766:	1f 91       	pop	r17
     768:	0f 91       	pop	r16
     76a:	08 95       	ret

0000076c <prvInitialiseNewQueue>:
     76c:	0f 93       	push	r16
     76e:	1f 93       	push	r17
     770:	f8 01       	movw	r30, r16
     772:	61 11       	cpse	r22, r1
     774:	03 c0       	rjmp	.+6      	; 0x77c <prvInitialiseNewQueue+0x10>
     776:	11 83       	std	Z+1, r17	; 0x01
     778:	00 83       	st	Z, r16
     77a:	02 c0       	rjmp	.+4      	; 0x780 <prvInitialiseNewQueue+0x14>
     77c:	51 83       	std	Z+1, r21	; 0x01
     77e:	40 83       	st	Z, r20
     780:	83 8f       	std	Z+27, r24	; 0x1b
     782:	64 8f       	std	Z+28, r22	; 0x1c
     784:	61 e0       	ldi	r22, 0x01	; 1
     786:	cf 01       	movw	r24, r30
     788:	0e 94 56 03 	call	0x6ac	; 0x6ac <xQueueGenericReset>
     78c:	1f 91       	pop	r17
     78e:	0f 91       	pop	r16
     790:	08 95       	ret

00000792 <xQueueGenericCreate>:
     792:	df 92       	push	r13
     794:	ef 92       	push	r14
     796:	ff 92       	push	r15
     798:	0f 93       	push	r16
     79a:	1f 93       	push	r17
     79c:	cf 93       	push	r28
     79e:	df 93       	push	r29
     7a0:	38 2f       	mov	r19, r24
     7a2:	e6 2f       	mov	r30, r22
     7a4:	88 23       	and	r24, r24
     7a6:	29 f1       	breq	.+74     	; 0x7f2 <xQueueGenericCreate+0x60>
     7a8:	68 2f       	mov	r22, r24
     7aa:	70 e0       	ldi	r23, 0x00	; 0
     7ac:	8f ef       	ldi	r24, 0xFF	; 255
     7ae:	9f ef       	ldi	r25, 0xFF	; 255
     7b0:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <__udivmodhi4>
     7b4:	8e 2f       	mov	r24, r30
     7b6:	90 e0       	ldi	r25, 0x00	; 0
     7b8:	68 17       	cp	r22, r24
     7ba:	79 07       	cpc	r23, r25
     7bc:	e8 f0       	brcs	.+58     	; 0x7f8 <xQueueGenericCreate+0x66>
     7be:	3e 9f       	mul	r19, r30
     7c0:	c0 01       	movw	r24, r0
     7c2:	11 24       	eor	r1, r1
     7c4:	81 3e       	cpi	r24, 0xE1	; 225
     7c6:	2f ef       	ldi	r18, 0xFF	; 255
     7c8:	92 07       	cpc	r25, r18
     7ca:	c8 f4       	brcc	.+50     	; 0x7fe <xQueueGenericCreate+0x6c>
     7cc:	d4 2e       	mov	r13, r20
     7ce:	de 2f       	mov	r29, r30
     7d0:	c3 2f       	mov	r28, r19
     7d2:	4f 96       	adiw	r24, 0x1f	; 31
     7d4:	0e 94 49 00 	call	0x92	; 0x92 <pvPortMalloc>
     7d8:	7c 01       	movw	r14, r24
     7da:	00 97       	sbiw	r24, 0x00	; 0
     7dc:	91 f0       	breq	.+36     	; 0x802 <__DATA_REGION_LENGTH__+0x2>
     7de:	8c 01       	movw	r16, r24
     7e0:	2d 2d       	mov	r18, r13
     7e2:	ac 01       	movw	r20, r24
     7e4:	41 5e       	subi	r20, 0xE1	; 225
     7e6:	5f 4f       	sbci	r21, 0xFF	; 255
     7e8:	6d 2f       	mov	r22, r29
     7ea:	8c 2f       	mov	r24, r28
     7ec:	0e 94 b6 03 	call	0x76c	; 0x76c <prvInitialiseNewQueue>
     7f0:	08 c0       	rjmp	.+16     	; 0x802 <__DATA_REGION_LENGTH__+0x2>
     7f2:	e1 2c       	mov	r14, r1
     7f4:	f1 2c       	mov	r15, r1
     7f6:	05 c0       	rjmp	.+10     	; 0x802 <__DATA_REGION_LENGTH__+0x2>
     7f8:	e1 2c       	mov	r14, r1
     7fa:	f1 2c       	mov	r15, r1
     7fc:	02 c0       	rjmp	.+4      	; 0x802 <__DATA_REGION_LENGTH__+0x2>
     7fe:	e1 2c       	mov	r14, r1
     800:	f1 2c       	mov	r15, r1
     802:	c7 01       	movw	r24, r14
     804:	df 91       	pop	r29
     806:	cf 91       	pop	r28
     808:	1f 91       	pop	r17
     80a:	0f 91       	pop	r16
     80c:	ff 90       	pop	r15
     80e:	ef 90       	pop	r14
     810:	df 90       	pop	r13
     812:	08 95       	ret

00000814 <xQueueGenericSend>:
     814:	cf 92       	push	r12
     816:	df 92       	push	r13
     818:	ef 92       	push	r14
     81a:	ff 92       	push	r15
     81c:	0f 93       	push	r16
     81e:	1f 93       	push	r17
     820:	cf 93       	push	r28
     822:	df 93       	push	r29
     824:	00 d0       	rcall	.+0      	; 0x826 <xQueueGenericSend+0x12>
     826:	00 d0       	rcall	.+0      	; 0x828 <xQueueGenericSend+0x14>
     828:	1f 92       	push	r1
     82a:	cd b7       	in	r28, 0x3d	; 61
     82c:	de b7       	in	r29, 0x3e	; 62
     82e:	8c 01       	movw	r16, r24
     830:	7b 01       	movw	r14, r22
     832:	5d 83       	std	Y+5, r21	; 0x05
     834:	4c 83       	std	Y+4, r20	; 0x04
     836:	c2 2e       	mov	r12, r18
     838:	d1 2c       	mov	r13, r1
     83a:	0f b6       	in	r0, 0x3f	; 63
     83c:	f8 94       	cli
     83e:	0f 92       	push	r0
     840:	f8 01       	movw	r30, r16
     842:	92 8d       	ldd	r25, Z+26	; 0x1a
     844:	83 8d       	ldd	r24, Z+27	; 0x1b
     846:	98 17       	cp	r25, r24
     848:	18 f0       	brcs	.+6      	; 0x850 <xQueueGenericSend+0x3c>
     84a:	f2 e0       	ldi	r31, 0x02	; 2
     84c:	cf 12       	cpse	r12, r31
     84e:	19 c0       	rjmp	.+50     	; 0x882 <__stack+0x23>
     850:	4c 2d       	mov	r20, r12
     852:	b7 01       	movw	r22, r14
     854:	c8 01       	movw	r24, r16
     856:	0e 94 bf 02 	call	0x57e	; 0x57e <prvCopyDataToQueue>
     85a:	f8 01       	movw	r30, r16
     85c:	91 89       	ldd	r25, Z+17	; 0x11
     85e:	99 23       	and	r25, r25
     860:	49 f0       	breq	.+18     	; 0x874 <__stack+0x15>
     862:	c8 01       	movw	r24, r16
     864:	41 96       	adiw	r24, 0x11	; 17
     866:	0e 94 c0 09 	call	0x1380	; 0x1380 <xTaskRemoveFromEventList>
     86a:	88 23       	and	r24, r24
     86c:	31 f0       	breq	.+12     	; 0x87a <__stack+0x1b>
     86e:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <vPortYield>
     872:	03 c0       	rjmp	.+6      	; 0x87a <__stack+0x1b>
     874:	81 11       	cpse	r24, r1
     876:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <vPortYield>
     87a:	0f 90       	pop	r0
     87c:	0f be       	out	0x3f, r0	; 63
     87e:	81 e0       	ldi	r24, 0x01	; 1
     880:	4d c0       	rjmp	.+154    	; 0x91c <__stack+0xbd>
     882:	8c 81       	ldd	r24, Y+4	; 0x04
     884:	9d 81       	ldd	r25, Y+5	; 0x05
     886:	89 2b       	or	r24, r25
     888:	21 f4       	brne	.+8      	; 0x892 <__stack+0x33>
     88a:	0f 90       	pop	r0
     88c:	0f be       	out	0x3f, r0	; 63
     88e:	80 e0       	ldi	r24, 0x00	; 0
     890:	45 c0       	rjmp	.+138    	; 0x91c <__stack+0xbd>
     892:	d1 10       	cpse	r13, r1
     894:	06 c0       	rjmp	.+12     	; 0x8a2 <__stack+0x43>
     896:	ce 01       	movw	r24, r28
     898:	01 96       	adiw	r24, 0x01	; 1
     89a:	0e 94 7d 0a 	call	0x14fa	; 0x14fa <vTaskInternalSetTimeOutState>
     89e:	dd 24       	eor	r13, r13
     8a0:	d3 94       	inc	r13
     8a2:	0f 90       	pop	r0
     8a4:	0f be       	out	0x3f, r0	; 63
     8a6:	0e 94 65 07 	call	0xeca	; 0xeca <vTaskSuspendAll>
     8aa:	0f b6       	in	r0, 0x3f	; 63
     8ac:	f8 94       	cli
     8ae:	0f 92       	push	r0
     8b0:	f8 01       	movw	r30, r16
     8b2:	85 8d       	ldd	r24, Z+29	; 0x1d
     8b4:	8f 3f       	cpi	r24, 0xFF	; 255
     8b6:	09 f4       	brne	.+2      	; 0x8ba <__stack+0x5b>
     8b8:	15 8e       	std	Z+29, r1	; 0x1d
     8ba:	f8 01       	movw	r30, r16
     8bc:	86 8d       	ldd	r24, Z+30	; 0x1e
     8be:	8f 3f       	cpi	r24, 0xFF	; 255
     8c0:	09 f4       	brne	.+2      	; 0x8c4 <__stack+0x65>
     8c2:	16 8e       	std	Z+30, r1	; 0x1e
     8c4:	0f 90       	pop	r0
     8c6:	0f be       	out	0x3f, r0	; 63
     8c8:	be 01       	movw	r22, r28
     8ca:	6c 5f       	subi	r22, 0xFC	; 252
     8cc:	7f 4f       	sbci	r23, 0xFF	; 255
     8ce:	ce 01       	movw	r24, r28
     8d0:	01 96       	adiw	r24, 0x01	; 1
     8d2:	0e 94 88 0a 	call	0x1510	; 0x1510 <xTaskCheckForTimeOut>
     8d6:	81 11       	cpse	r24, r1
     8d8:	1b c0       	rjmp	.+54     	; 0x910 <__stack+0xb1>
     8da:	c8 01       	movw	r24, r16
     8dc:	0e 94 b1 02 	call	0x562	; 0x562 <prvIsQueueFull>
     8e0:	88 23       	and	r24, r24
     8e2:	81 f0       	breq	.+32     	; 0x904 <__stack+0xa5>
     8e4:	6c 81       	ldd	r22, Y+4	; 0x04
     8e6:	7d 81       	ldd	r23, Y+5	; 0x05
     8e8:	c8 01       	movw	r24, r16
     8ea:	08 96       	adiw	r24, 0x08	; 8
     8ec:	0e 94 ae 09 	call	0x135c	; 0x135c <vTaskPlaceOnEventList>
     8f0:	c8 01       	movw	r24, r16
     8f2:	0e 94 22 03 	call	0x644	; 0x644 <prvUnlockQueue>
     8f6:	0e 94 85 08 	call	0x110a	; 0x110a <xTaskResumeAll>
     8fa:	81 11       	cpse	r24, r1
     8fc:	9e cf       	rjmp	.-196    	; 0x83a <xQueueGenericSend+0x26>
     8fe:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <vPortYield>
     902:	9b cf       	rjmp	.-202    	; 0x83a <xQueueGenericSend+0x26>
     904:	c8 01       	movw	r24, r16
     906:	0e 94 22 03 	call	0x644	; 0x644 <prvUnlockQueue>
     90a:	0e 94 85 08 	call	0x110a	; 0x110a <xTaskResumeAll>
     90e:	95 cf       	rjmp	.-214    	; 0x83a <xQueueGenericSend+0x26>
     910:	c8 01       	movw	r24, r16
     912:	0e 94 22 03 	call	0x644	; 0x644 <prvUnlockQueue>
     916:	0e 94 85 08 	call	0x110a	; 0x110a <xTaskResumeAll>
     91a:	80 e0       	ldi	r24, 0x00	; 0
     91c:	0f 90       	pop	r0
     91e:	0f 90       	pop	r0
     920:	0f 90       	pop	r0
     922:	0f 90       	pop	r0
     924:	0f 90       	pop	r0
     926:	df 91       	pop	r29
     928:	cf 91       	pop	r28
     92a:	1f 91       	pop	r17
     92c:	0f 91       	pop	r16
     92e:	ff 90       	pop	r15
     930:	ef 90       	pop	r14
     932:	df 90       	pop	r13
     934:	cf 90       	pop	r12
     936:	08 95       	ret

00000938 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
     938:	cf 92       	push	r12
     93a:	df 92       	push	r13
     93c:	ef 92       	push	r14
     93e:	ff 92       	push	r15
     940:	0f 93       	push	r16
     942:	1f 93       	push	r17
     944:	cf 93       	push	r28
     946:	df 93       	push	r29
     948:	00 d0       	rcall	.+0      	; 0x94a <xQueueReceive+0x12>
     94a:	00 d0       	rcall	.+0      	; 0x94c <xQueueReceive+0x14>
     94c:	1f 92       	push	r1
     94e:	cd b7       	in	r28, 0x3d	; 61
     950:	de b7       	in	r29, 0x3e	; 62
     952:	8c 01       	movw	r16, r24
     954:	6b 01       	movw	r12, r22
     956:	5d 83       	std	Y+5, r21	; 0x05
     958:	4c 83       	std	Y+4, r20	; 0x04
    BaseType_t xEntryTimeSet = pdFALSE;
     95a:	e1 2c       	mov	r14, r1
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
     95c:	0f b6       	in	r0, 0x3f	; 63
     95e:	f8 94       	cli
     960:	0f 92       	push	r0
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
     962:	f8 01       	movw	r30, r16
     964:	f2 8c       	ldd	r15, Z+26	; 0x1a

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
     966:	ff 20       	and	r15, r15
     968:	a9 f0       	breq	.+42     	; 0x994 <xQueueReceive+0x5c>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
     96a:	b6 01       	movw	r22, r12
     96c:	c8 01       	movw	r24, r16
     96e:	0e 94 08 03 	call	0x610	; 0x610 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
     972:	fa 94       	dec	r15
     974:	f8 01       	movw	r30, r16
     976:	f2 8e       	std	Z+26, r15	; 0x1a

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
     978:	80 85       	ldd	r24, Z+8	; 0x08
     97a:	88 23       	and	r24, r24
     97c:	39 f0       	breq	.+14     	; 0x98c <xQueueReceive+0x54>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
     97e:	c8 01       	movw	r24, r16
     980:	08 96       	adiw	r24, 0x08	; 8
     982:	0e 94 c0 09 	call	0x1380	; 0x1380 <xTaskRemoveFromEventList>
     986:	81 11       	cpse	r24, r1
                    {
                        queueYIELD_IF_USING_PREEMPTION();
     988:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <vPortYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
     98c:	0f 90       	pop	r0
     98e:	0f be       	out	0x3f, r0	; 63
                return pdPASS;
     990:	81 e0       	ldi	r24, 0x01	; 1
     992:	53 c0       	rjmp	.+166    	; 0xa3a <xQueueReceive+0x102>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
     994:	8c 81       	ldd	r24, Y+4	; 0x04
     996:	9d 81       	ldd	r25, Y+5	; 0x05
     998:	89 2b       	or	r24, r25
     99a:	21 f4       	brne	.+8      	; 0x9a4 <xQueueReceive+0x6c>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
     99c:	0f 90       	pop	r0
     99e:	0f be       	out	0x3f, r0	; 63
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
     9a0:	80 e0       	ldi	r24, 0x00	; 0
     9a2:	4b c0       	rjmp	.+150    	; 0xa3a <xQueueReceive+0x102>
                }
                else if( xEntryTimeSet == pdFALSE )
     9a4:	e1 10       	cpse	r14, r1
     9a6:	06 c0       	rjmp	.+12     	; 0x9b4 <xQueueReceive+0x7c>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
     9a8:	ce 01       	movw	r24, r28
     9aa:	01 96       	adiw	r24, 0x01	; 1
     9ac:	0e 94 7d 0a 	call	0x14fa	; 0x14fa <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
     9b0:	ee 24       	eor	r14, r14
     9b2:	e3 94       	inc	r14
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
     9b4:	0f 90       	pop	r0
     9b6:	0f be       	out	0x3f, r0	; 63

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
     9b8:	0e 94 65 07 	call	0xeca	; 0xeca <vTaskSuspendAll>
        prvLockQueue( pxQueue );
     9bc:	0f b6       	in	r0, 0x3f	; 63
     9be:	f8 94       	cli
     9c0:	0f 92       	push	r0
     9c2:	f8 01       	movw	r30, r16
     9c4:	85 8d       	ldd	r24, Z+29	; 0x1d
     9c6:	8f 3f       	cpi	r24, 0xFF	; 255
     9c8:	09 f4       	brne	.+2      	; 0x9cc <xQueueReceive+0x94>
     9ca:	15 8e       	std	Z+29, r1	; 0x1d
     9cc:	f8 01       	movw	r30, r16
     9ce:	86 8d       	ldd	r24, Z+30	; 0x1e
     9d0:	8f 3f       	cpi	r24, 0xFF	; 255
     9d2:	09 f4       	brne	.+2      	; 0x9d6 <xQueueReceive+0x9e>
     9d4:	16 8e       	std	Z+30, r1	; 0x1e
     9d6:	0f 90       	pop	r0
     9d8:	0f be       	out	0x3f, r0	; 63

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
     9da:	be 01       	movw	r22, r28
     9dc:	6c 5f       	subi	r22, 0xFC	; 252
     9de:	7f 4f       	sbci	r23, 0xFF	; 255
     9e0:	ce 01       	movw	r24, r28
     9e2:	01 96       	adiw	r24, 0x01	; 1
     9e4:	0e 94 88 0a 	call	0x1510	; 0x1510 <xTaskCheckForTimeOut>
     9e8:	81 11       	cpse	r24, r1
     9ea:	1b c0       	rjmp	.+54     	; 0xa22 <xQueueReceive+0xea>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
     9ec:	c8 01       	movw	r24, r16
     9ee:	0e 94 a4 02 	call	0x548	; 0x548 <prvIsQueueEmpty>
     9f2:	88 23       	and	r24, r24
     9f4:	81 f0       	breq	.+32     	; 0xa16 <xQueueReceive+0xde>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
     9f6:	6c 81       	ldd	r22, Y+4	; 0x04
     9f8:	7d 81       	ldd	r23, Y+5	; 0x05
     9fa:	c8 01       	movw	r24, r16
     9fc:	41 96       	adiw	r24, 0x11	; 17
     9fe:	0e 94 ae 09 	call	0x135c	; 0x135c <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
     a02:	c8 01       	movw	r24, r16
     a04:	0e 94 22 03 	call	0x644	; 0x644 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
     a08:	0e 94 85 08 	call	0x110a	; 0x110a <xTaskResumeAll>
     a0c:	81 11       	cpse	r24, r1
     a0e:	a6 cf       	rjmp	.-180    	; 0x95c <xQueueReceive+0x24>
                {
                    portYIELD_WITHIN_API();
     a10:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <vPortYield>
     a14:	a3 cf       	rjmp	.-186    	; 0x95c <xQueueReceive+0x24>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
     a16:	c8 01       	movw	r24, r16
     a18:	0e 94 22 03 	call	0x644	; 0x644 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
     a1c:	0e 94 85 08 	call	0x110a	; 0x110a <xTaskResumeAll>
     a20:	9d cf       	rjmp	.-198    	; 0x95c <xQueueReceive+0x24>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
     a22:	c8 01       	movw	r24, r16
     a24:	0e 94 22 03 	call	0x644	; 0x644 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
     a28:	0e 94 85 08 	call	0x110a	; 0x110a <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
     a2c:	c8 01       	movw	r24, r16
     a2e:	0e 94 a4 02 	call	0x548	; 0x548 <prvIsQueueEmpty>
     a32:	88 23       	and	r24, r24
     a34:	09 f4       	brne	.+2      	; 0xa38 <xQueueReceive+0x100>
     a36:	92 cf       	rjmp	.-220    	; 0x95c <xQueueReceive+0x24>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
     a38:	80 e0       	ldi	r24, 0x00	; 0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
     a3a:	0f 90       	pop	r0
     a3c:	0f 90       	pop	r0
     a3e:	0f 90       	pop	r0
     a40:	0f 90       	pop	r0
     a42:	0f 90       	pop	r0
     a44:	df 91       	pop	r29
     a46:	cf 91       	pop	r28
     a48:	1f 91       	pop	r17
     a4a:	0f 91       	pop	r16
     a4c:	ff 90       	pop	r15
     a4e:	ef 90       	pop	r14
     a50:	df 90       	pop	r13
     a52:	cf 90       	pop	r12
     a54:	08 95       	ret

00000a56 <prvResetNextTaskUnblockTime>:
    taskENTER_CRITICAL();
    {
        pxTimeOut->xOverflowCount = xNumOfOverflows;
        pxTimeOut->xTimeOnEntering = xTickCount;
    }
    taskEXIT_CRITICAL();
     a56:	e0 91 aa 06 	lds	r30, 0x06AA	; 0x8006aa <pxDelayedTaskList>
     a5a:	f0 91 ab 06 	lds	r31, 0x06AB	; 0x8006ab <pxDelayedTaskList+0x1>
     a5e:	80 81       	ld	r24, Z
     a60:	81 11       	cpse	r24, r1
     a62:	07 c0       	rjmp	.+14     	; 0xa72 <prvResetNextTaskUnblockTime+0x1c>
     a64:	8f ef       	ldi	r24, 0xFF	; 255
     a66:	9f ef       	ldi	r25, 0xFF	; 255
     a68:	90 93 8a 06 	sts	0x068A, r25	; 0x80068a <xNextTaskUnblockTime+0x1>
     a6c:	80 93 89 06 	sts	0x0689, r24	; 0x800689 <xNextTaskUnblockTime>
     a70:	08 95       	ret
     a72:	e0 91 aa 06 	lds	r30, 0x06AA	; 0x8006aa <pxDelayedTaskList>
     a76:	f0 91 ab 06 	lds	r31, 0x06AB	; 0x8006ab <pxDelayedTaskList+0x1>
     a7a:	05 80       	ldd	r0, Z+5	; 0x05
     a7c:	f6 81       	ldd	r31, Z+6	; 0x06
     a7e:	e0 2d       	mov	r30, r0
     a80:	80 81       	ld	r24, Z
     a82:	91 81       	ldd	r25, Z+1	; 0x01
     a84:	90 93 8a 06 	sts	0x068A, r25	; 0x80068a <xNextTaskUnblockTime+0x1>
     a88:	80 93 89 06 	sts	0x0689, r24	; 0x800689 <xNextTaskUnblockTime>
     a8c:	08 95       	ret

00000a8e <prvDeleteTCB>:
     a8e:	cf 93       	push	r28
     a90:	df 93       	push	r29
     a92:	ec 01       	movw	r28, r24
     a94:	8f 89       	ldd	r24, Y+23	; 0x17
     a96:	98 8d       	ldd	r25, Y+24	; 0x18
     a98:	0e 94 83 00 	call	0x106	; 0x106 <vPortFree>
     a9c:	ce 01       	movw	r24, r28
     a9e:	0e 94 83 00 	call	0x106	; 0x106 <vPortFree>
     aa2:	df 91       	pop	r29
     aa4:	cf 91       	pop	r28
     aa6:	08 95       	ret

00000aa8 <prvInitialiseNewTask>:
     aa8:	6f 92       	push	r6
     aaa:	7f 92       	push	r7
     aac:	8f 92       	push	r8
     aae:	9f 92       	push	r9
     ab0:	af 92       	push	r10
     ab2:	bf 92       	push	r11
     ab4:	cf 92       	push	r12
     ab6:	df 92       	push	r13
     ab8:	ef 92       	push	r14
     aba:	0f 93       	push	r16
     abc:	1f 93       	push	r17
     abe:	cf 93       	push	r28
     ac0:	df 93       	push	r29
     ac2:	cd b7       	in	r28, 0x3d	; 61
     ac4:	de b7       	in	r29, 0x3e	; 62
     ac6:	4c 01       	movw	r8, r24
     ac8:	f5 01       	movw	r30, r10
     aca:	87 89       	ldd	r24, Z+23	; 0x17
     acc:	90 8d       	ldd	r25, Z+24	; 0x18
     ace:	21 50       	subi	r18, 0x01	; 1
     ad0:	31 09       	sbc	r19, r1
     ad2:	3c 01       	movw	r6, r24
     ad4:	62 0e       	add	r6, r18
     ad6:	73 1e       	adc	r7, r19
     ad8:	61 15       	cp	r22, r1
     ada:	71 05       	cpc	r23, r1
     adc:	89 f4       	brne	.+34     	; 0xb00 <prvInitialiseNewTask+0x58>
     ade:	15 c0       	rjmp	.+42     	; 0xb0a <prvInitialiseNewTask+0x62>
     ae0:	82 2f       	mov	r24, r18
     ae2:	90 e0       	ldi	r25, 0x00	; 0
     ae4:	fb 01       	movw	r30, r22
     ae6:	e8 0f       	add	r30, r24
     ae8:	f9 1f       	adc	r31, r25
     aea:	30 81       	ld	r19, Z
     aec:	d5 01       	movw	r26, r10
     aee:	a8 0f       	add	r26, r24
     af0:	b9 1f       	adc	r27, r25
     af2:	59 96       	adiw	r26, 0x19	; 25
     af4:	3c 93       	st	X, r19
     af6:	80 81       	ld	r24, Z
     af8:	88 23       	and	r24, r24
     afa:	29 f0       	breq	.+10     	; 0xb06 <prvInitialiseNewTask+0x5e>
     afc:	2f 5f       	subi	r18, 0xFF	; 255
     afe:	01 c0       	rjmp	.+2      	; 0xb02 <prvInitialiseNewTask+0x5a>
     b00:	20 e0       	ldi	r18, 0x00	; 0
     b02:	28 30       	cpi	r18, 0x08	; 8
     b04:	68 f3       	brcs	.-38     	; 0xae0 <prvInitialiseNewTask+0x38>
     b06:	f5 01       	movw	r30, r10
     b08:	10 a2       	std	Z+32, r1	; 0x20
     b0a:	f3 e0       	ldi	r31, 0x03	; 3
     b0c:	fe 15       	cp	r31, r14
     b0e:	20 f4       	brcc	.+8      	; 0xb18 <prvInitialiseNewTask+0x70>
     b10:	0f 2e       	mov	r0, r31
     b12:	f3 e0       	ldi	r31, 0x03	; 3
     b14:	ef 2e       	mov	r14, r31
     b16:	f0 2d       	mov	r31, r0
     b18:	f5 01       	movw	r30, r10
     b1a:	e6 8a       	std	Z+22, r14	; 0x16
     b1c:	c5 01       	movw	r24, r10
     b1e:	02 96       	adiw	r24, 0x02	; 2
     b20:	0e 94 92 00 	call	0x124	; 0x124 <vListInitialiseItem>
     b24:	c5 01       	movw	r24, r10
     b26:	0c 96       	adiw	r24, 0x0c	; 12
     b28:	0e 94 92 00 	call	0x124	; 0x124 <vListInitialiseItem>
     b2c:	f5 01       	movw	r30, r10
     b2e:	b1 86       	std	Z+9, r11	; 0x09
     b30:	a0 86       	std	Z+8, r10	; 0x08
     b32:	84 e0       	ldi	r24, 0x04	; 4
     b34:	90 e0       	ldi	r25, 0x00	; 0
     b36:	8e 19       	sub	r24, r14
     b38:	91 09       	sbc	r25, r1
     b3a:	95 87       	std	Z+13, r25	; 0x0d
     b3c:	84 87       	std	Z+12, r24	; 0x0c
     b3e:	b3 8a       	std	Z+19, r11	; 0x13
     b40:	a2 8a       	std	Z+18, r10	; 0x12
     b42:	a8 01       	movw	r20, r16
     b44:	b4 01       	movw	r22, r8
     b46:	c3 01       	movw	r24, r6
     b48:	0e 94 51 01 	call	0x2a2	; 0x2a2 <pxPortInitialiseStack>
     b4c:	f5 01       	movw	r30, r10
     b4e:	91 83       	std	Z+1, r25	; 0x01
     b50:	80 83       	st	Z, r24
     b52:	c1 14       	cp	r12, r1
     b54:	d1 04       	cpc	r13, r1
     b56:	19 f0       	breq	.+6      	; 0xb5e <prvInitialiseNewTask+0xb6>
     b58:	f6 01       	movw	r30, r12
     b5a:	b1 82       	std	Z+1, r11	; 0x01
     b5c:	a0 82       	st	Z, r10
     b5e:	df 91       	pop	r29
     b60:	cf 91       	pop	r28
     b62:	1f 91       	pop	r17
     b64:	0f 91       	pop	r16
     b66:	ef 90       	pop	r14
     b68:	df 90       	pop	r13
     b6a:	cf 90       	pop	r12
     b6c:	bf 90       	pop	r11
     b6e:	af 90       	pop	r10
     b70:	9f 90       	pop	r9
     b72:	8f 90       	pop	r8
     b74:	7f 90       	pop	r7
     b76:	6f 90       	pop	r6
     b78:	08 95       	ret

00000b7a <prvInitialiseTaskLists>:
     b7a:	cf 93       	push	r28
     b7c:	c0 e0       	ldi	r28, 0x00	; 0
     b7e:	10 c0       	rjmp	.+32     	; 0xba0 <prvInitialiseTaskLists+0x26>
     b80:	8c 2f       	mov	r24, r28
     b82:	90 e0       	ldi	r25, 0x00	; 0
     b84:	9c 01       	movw	r18, r24
     b86:	22 0f       	add	r18, r18
     b88:	33 1f       	adc	r19, r19
     b8a:	22 0f       	add	r18, r18
     b8c:	33 1f       	adc	r19, r19
     b8e:	22 0f       	add	r18, r18
     b90:	33 1f       	adc	r19, r19
     b92:	82 0f       	add	r24, r18
     b94:	93 1f       	adc	r25, r19
     b96:	82 54       	subi	r24, 0x42	; 66
     b98:	99 4f       	sbci	r25, 0xF9	; 249
     b9a:	0e 94 84 00 	call	0x108	; 0x108 <vListInitialise>
     b9e:	cf 5f       	subi	r28, 0xFF	; 255
     ba0:	c4 30       	cpi	r28, 0x04	; 4
     ba2:	70 f3       	brcs	.-36     	; 0xb80 <prvInitialiseTaskLists+0x6>
     ba4:	85 eb       	ldi	r24, 0xB5	; 181
     ba6:	96 e0       	ldi	r25, 0x06	; 6
     ba8:	0e 94 84 00 	call	0x108	; 0x108 <vListInitialise>
     bac:	8c ea       	ldi	r24, 0xAC	; 172
     bae:	96 e0       	ldi	r25, 0x06	; 6
     bb0:	0e 94 84 00 	call	0x108	; 0x108 <vListInitialise>
     bb4:	8f e9       	ldi	r24, 0x9F	; 159
     bb6:	96 e0       	ldi	r25, 0x06	; 6
     bb8:	0e 94 84 00 	call	0x108	; 0x108 <vListInitialise>
     bbc:	86 e9       	ldi	r24, 0x96	; 150
     bbe:	96 e0       	ldi	r25, 0x06	; 6
     bc0:	0e 94 84 00 	call	0x108	; 0x108 <vListInitialise>
     bc4:	85 eb       	ldi	r24, 0xB5	; 181
     bc6:	96 e0       	ldi	r25, 0x06	; 6
     bc8:	90 93 ab 06 	sts	0x06AB, r25	; 0x8006ab <pxDelayedTaskList+0x1>
     bcc:	80 93 aa 06 	sts	0x06AA, r24	; 0x8006aa <pxDelayedTaskList>
     bd0:	8c ea       	ldi	r24, 0xAC	; 172
     bd2:	96 e0       	ldi	r25, 0x06	; 6
     bd4:	90 93 a9 06 	sts	0x06A9, r25	; 0x8006a9 <pxOverflowDelayedTaskList+0x1>
     bd8:	80 93 a8 06 	sts	0x06A8, r24	; 0x8006a8 <pxOverflowDelayedTaskList>
     bdc:	cf 91       	pop	r28
     bde:	08 95       	ret

00000be0 <prvAddNewTaskToReadyList>:
     be0:	cf 93       	push	r28
     be2:	df 93       	push	r29
     be4:	ec 01       	movw	r28, r24
     be6:	0f b6       	in	r0, 0x3f	; 63
     be8:	f8 94       	cli
     bea:	0f 92       	push	r0
     bec:	80 91 94 06 	lds	r24, 0x0694	; 0x800694 <uxCurrentNumberOfTasks>
     bf0:	8f 5f       	subi	r24, 0xFF	; 255
     bf2:	80 93 94 06 	sts	0x0694, r24	; 0x800694 <uxCurrentNumberOfTasks>
     bf6:	80 91 e2 06 	lds	r24, 0x06E2	; 0x8006e2 <pxCurrentTCB>
     bfa:	90 91 e3 06 	lds	r25, 0x06E3	; 0x8006e3 <pxCurrentTCB+0x1>
     bfe:	89 2b       	or	r24, r25
     c00:	59 f4       	brne	.+22     	; 0xc18 <prvAddNewTaskToReadyList+0x38>
     c02:	d0 93 e3 06 	sts	0x06E3, r29	; 0x8006e3 <pxCurrentTCB+0x1>
     c06:	c0 93 e2 06 	sts	0x06E2, r28	; 0x8006e2 <pxCurrentTCB>
     c0a:	80 91 94 06 	lds	r24, 0x0694	; 0x800694 <uxCurrentNumberOfTasks>
     c0e:	81 30       	cpi	r24, 0x01	; 1
     c10:	99 f4       	brne	.+38     	; 0xc38 <prvAddNewTaskToReadyList+0x58>
     c12:	0e 94 bd 05 	call	0xb7a	; 0xb7a <prvInitialiseTaskLists>
     c16:	10 c0       	rjmp	.+32     	; 0xc38 <prvAddNewTaskToReadyList+0x58>
     c18:	80 91 90 06 	lds	r24, 0x0690	; 0x800690 <xSchedulerRunning>
     c1c:	81 11       	cpse	r24, r1
     c1e:	0c c0       	rjmp	.+24     	; 0xc38 <prvAddNewTaskToReadyList+0x58>
     c20:	e0 91 e2 06 	lds	r30, 0x06E2	; 0x8006e2 <pxCurrentTCB>
     c24:	f0 91 e3 06 	lds	r31, 0x06E3	; 0x8006e3 <pxCurrentTCB+0x1>
     c28:	96 89       	ldd	r25, Z+22	; 0x16
     c2a:	8e 89       	ldd	r24, Y+22	; 0x16
     c2c:	89 17       	cp	r24, r25
     c2e:	20 f0       	brcs	.+8      	; 0xc38 <prvAddNewTaskToReadyList+0x58>
     c30:	d0 93 e3 06 	sts	0x06E3, r29	; 0x8006e3 <pxCurrentTCB+0x1>
     c34:	c0 93 e2 06 	sts	0x06E2, r28	; 0x8006e2 <pxCurrentTCB>
     c38:	80 91 8b 06 	lds	r24, 0x068B	; 0x80068b <uxTaskNumber>
     c3c:	8f 5f       	subi	r24, 0xFF	; 255
     c3e:	80 93 8b 06 	sts	0x068B, r24	; 0x80068b <uxTaskNumber>
     c42:	8e 89       	ldd	r24, Y+22	; 0x16
     c44:	90 91 91 06 	lds	r25, 0x0691	; 0x800691 <uxTopReadyPriority>
     c48:	98 17       	cp	r25, r24
     c4a:	10 f4       	brcc	.+4      	; 0xc50 <prvAddNewTaskToReadyList+0x70>
     c4c:	80 93 91 06 	sts	0x0691, r24	; 0x800691 <uxTopReadyPriority>
     c50:	90 e0       	ldi	r25, 0x00	; 0
     c52:	fc 01       	movw	r30, r24
     c54:	ee 0f       	add	r30, r30
     c56:	ff 1f       	adc	r31, r31
     c58:	ee 0f       	add	r30, r30
     c5a:	ff 1f       	adc	r31, r31
     c5c:	ee 0f       	add	r30, r30
     c5e:	ff 1f       	adc	r31, r31
     c60:	8e 0f       	add	r24, r30
     c62:	9f 1f       	adc	r25, r31
     c64:	fc 01       	movw	r30, r24
     c66:	e2 54       	subi	r30, 0x42	; 66
     c68:	f9 4f       	sbci	r31, 0xF9	; 249
     c6a:	01 80       	ldd	r0, Z+1	; 0x01
     c6c:	f2 81       	ldd	r31, Z+2	; 0x02
     c6e:	e0 2d       	mov	r30, r0
     c70:	fd 83       	std	Y+5, r31	; 0x05
     c72:	ec 83       	std	Y+4, r30	; 0x04
     c74:	84 81       	ldd	r24, Z+4	; 0x04
     c76:	95 81       	ldd	r25, Z+5	; 0x05
     c78:	9f 83       	std	Y+7, r25	; 0x07
     c7a:	8e 83       	std	Y+6, r24	; 0x06
     c7c:	a4 81       	ldd	r26, Z+4	; 0x04
     c7e:	b5 81       	ldd	r27, Z+5	; 0x05
     c80:	ce 01       	movw	r24, r28
     c82:	02 96       	adiw	r24, 0x02	; 2
     c84:	13 96       	adiw	r26, 0x03	; 3
     c86:	9c 93       	st	X, r25
     c88:	8e 93       	st	-X, r24
     c8a:	12 97       	sbiw	r26, 0x02	; 2
     c8c:	95 83       	std	Z+5, r25	; 0x05
     c8e:	84 83       	std	Z+4, r24	; 0x04
     c90:	ee 89       	ldd	r30, Y+22	; 0x16
     c92:	f0 e0       	ldi	r31, 0x00	; 0
     c94:	cf 01       	movw	r24, r30
     c96:	88 0f       	add	r24, r24
     c98:	99 1f       	adc	r25, r25
     c9a:	88 0f       	add	r24, r24
     c9c:	99 1f       	adc	r25, r25
     c9e:	88 0f       	add	r24, r24
     ca0:	99 1f       	adc	r25, r25
     ca2:	e8 0f       	add	r30, r24
     ca4:	f9 1f       	adc	r31, r25
     ca6:	e2 54       	subi	r30, 0x42	; 66
     ca8:	f9 4f       	sbci	r31, 0xF9	; 249
     caa:	fb 87       	std	Y+11, r31	; 0x0b
     cac:	ea 87       	std	Y+10, r30	; 0x0a
     cae:	80 81       	ld	r24, Z
     cb0:	8f 5f       	subi	r24, 0xFF	; 255
     cb2:	80 83       	st	Z, r24
     cb4:	0f 90       	pop	r0
     cb6:	0f be       	out	0x3f, r0	; 63
     cb8:	80 91 90 06 	lds	r24, 0x0690	; 0x800690 <xSchedulerRunning>
     cbc:	88 23       	and	r24, r24
     cbe:	51 f0       	breq	.+20     	; 0xcd4 <prvAddNewTaskToReadyList+0xf4>
     cc0:	e0 91 e2 06 	lds	r30, 0x06E2	; 0x8006e2 <pxCurrentTCB>
     cc4:	f0 91 e3 06 	lds	r31, 0x06E3	; 0x8006e3 <pxCurrentTCB+0x1>
     cc8:	96 89       	ldd	r25, Z+22	; 0x16
     cca:	8e 89       	ldd	r24, Y+22	; 0x16
     ccc:	98 17       	cp	r25, r24
     cce:	10 f4       	brcc	.+4      	; 0xcd4 <prvAddNewTaskToReadyList+0xf4>
     cd0:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <vPortYield>
     cd4:	df 91       	pop	r29
     cd6:	cf 91       	pop	r28
     cd8:	08 95       	ret

00000cda <prvCheckTasksWaitingTermination>:
     cda:	cf 93       	push	r28
     cdc:	df 93       	push	r29
     cde:	1c c0       	rjmp	.+56     	; 0xd18 <prvCheckTasksWaitingTermination+0x3e>
     ce0:	0f b6       	in	r0, 0x3f	; 63
     ce2:	f8 94       	cli
     ce4:	0f 92       	push	r0
     ce6:	e0 91 9b 06 	lds	r30, 0x069B	; 0x80069b <xTasksWaitingTermination+0x5>
     cea:	f0 91 9c 06 	lds	r31, 0x069C	; 0x80069c <xTasksWaitingTermination+0x6>
     cee:	c6 81       	ldd	r28, Z+6	; 0x06
     cf0:	d7 81       	ldd	r29, Z+7	; 0x07
     cf2:	ce 01       	movw	r24, r28
     cf4:	02 96       	adiw	r24, 0x02	; 2
     cf6:	0e 94 c7 00 	call	0x18e	; 0x18e <uxListRemove>
     cfa:	80 91 94 06 	lds	r24, 0x0694	; 0x800694 <uxCurrentNumberOfTasks>
     cfe:	81 50       	subi	r24, 0x01	; 1
     d00:	80 93 94 06 	sts	0x0694, r24	; 0x800694 <uxCurrentNumberOfTasks>
     d04:	80 91 95 06 	lds	r24, 0x0695	; 0x800695 <uxDeletedTasksWaitingCleanUp>
     d08:	81 50       	subi	r24, 0x01	; 1
     d0a:	80 93 95 06 	sts	0x0695, r24	; 0x800695 <uxDeletedTasksWaitingCleanUp>
     d0e:	0f 90       	pop	r0
     d10:	0f be       	out	0x3f, r0	; 63
     d12:	ce 01       	movw	r24, r28
     d14:	0e 94 47 05 	call	0xa8e	; 0xa8e <prvDeleteTCB>
     d18:	80 91 95 06 	lds	r24, 0x0695	; 0x800695 <uxDeletedTasksWaitingCleanUp>
     d1c:	81 11       	cpse	r24, r1
     d1e:	e0 cf       	rjmp	.-64     	; 0xce0 <prvCheckTasksWaitingTermination+0x6>
     d20:	df 91       	pop	r29
     d22:	cf 91       	pop	r28
     d24:	08 95       	ret

00000d26 <prvIdleTask>:
     d26:	0e 94 6d 06 	call	0xcda	; 0xcda <prvCheckTasksWaitingTermination>
     d2a:	80 91 be 06 	lds	r24, 0x06BE	; 0x8006be <pxReadyTasksLists>
     d2e:	82 30       	cpi	r24, 0x02	; 2
     d30:	d0 f3       	brcs	.-12     	; 0xd26 <prvIdleTask>
     d32:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <vPortYield>
     d36:	f7 cf       	rjmp	.-18     	; 0xd26 <prvIdleTask>

00000d38 <prvAddCurrentTaskToDelayedList>:
     d38:	0f 93       	push	r16
     d3a:	1f 93       	push	r17
     d3c:	cf 93       	push	r28
     d3e:	df 93       	push	r29
     d40:	ec 01       	movw	r28, r24
     d42:	00 91 92 06 	lds	r16, 0x0692	; 0x800692 <xTickCount>
     d46:	10 91 93 06 	lds	r17, 0x0693	; 0x800693 <xTickCount+0x1>
     d4a:	80 91 e2 06 	lds	r24, 0x06E2	; 0x8006e2 <pxCurrentTCB>
     d4e:	90 91 e3 06 	lds	r25, 0x06E3	; 0x8006e3 <pxCurrentTCB+0x1>
     d52:	02 96       	adiw	r24, 0x02	; 2
     d54:	0e 94 c7 00 	call	0x18e	; 0x18e <uxListRemove>
     d58:	c0 0f       	add	r28, r16
     d5a:	d1 1f       	adc	r29, r17
     d5c:	e0 91 e2 06 	lds	r30, 0x06E2	; 0x8006e2 <pxCurrentTCB>
     d60:	f0 91 e3 06 	lds	r31, 0x06E3	; 0x8006e3 <pxCurrentTCB+0x1>
     d64:	d3 83       	std	Z+3, r29	; 0x03
     d66:	c2 83       	std	Z+2, r28	; 0x02
     d68:	c0 17       	cp	r28, r16
     d6a:	d1 07       	cpc	r29, r17
     d6c:	68 f4       	brcc	.+26     	; 0xd88 <prvAddCurrentTaskToDelayedList+0x50>
     d6e:	60 91 e2 06 	lds	r22, 0x06E2	; 0x8006e2 <pxCurrentTCB>
     d72:	70 91 e3 06 	lds	r23, 0x06E3	; 0x8006e3 <pxCurrentTCB+0x1>
     d76:	80 91 a8 06 	lds	r24, 0x06A8	; 0x8006a8 <pxOverflowDelayedTaskList>
     d7a:	90 91 a9 06 	lds	r25, 0x06A9	; 0x8006a9 <pxOverflowDelayedTaskList+0x1>
     d7e:	6e 5f       	subi	r22, 0xFE	; 254
     d80:	7f 4f       	sbci	r23, 0xFF	; 255
     d82:	0e 94 96 00 	call	0x12c	; 0x12c <vListInsert>
     d86:	17 c0       	rjmp	.+46     	; 0xdb6 <prvAddCurrentTaskToDelayedList+0x7e>
     d88:	60 91 e2 06 	lds	r22, 0x06E2	; 0x8006e2 <pxCurrentTCB>
     d8c:	70 91 e3 06 	lds	r23, 0x06E3	; 0x8006e3 <pxCurrentTCB+0x1>
     d90:	80 91 aa 06 	lds	r24, 0x06AA	; 0x8006aa <pxDelayedTaskList>
     d94:	90 91 ab 06 	lds	r25, 0x06AB	; 0x8006ab <pxDelayedTaskList+0x1>
     d98:	6e 5f       	subi	r22, 0xFE	; 254
     d9a:	7f 4f       	sbci	r23, 0xFF	; 255
     d9c:	0e 94 96 00 	call	0x12c	; 0x12c <vListInsert>
     da0:	80 91 89 06 	lds	r24, 0x0689	; 0x800689 <xNextTaskUnblockTime>
     da4:	90 91 8a 06 	lds	r25, 0x068A	; 0x80068a <xNextTaskUnblockTime+0x1>
     da8:	c8 17       	cp	r28, r24
     daa:	d9 07       	cpc	r29, r25
     dac:	20 f4       	brcc	.+8      	; 0xdb6 <prvAddCurrentTaskToDelayedList+0x7e>
     dae:	d0 93 8a 06 	sts	0x068A, r29	; 0x80068a <xNextTaskUnblockTime+0x1>
     db2:	c0 93 89 06 	sts	0x0689, r28	; 0x800689 <xNextTaskUnblockTime>
     db6:	df 91       	pop	r29
     db8:	cf 91       	pop	r28
     dba:	1f 91       	pop	r17
     dbc:	0f 91       	pop	r16
     dbe:	08 95       	ret

00000dc0 <xTaskCreate>:
     dc0:	2f 92       	push	r2
     dc2:	3f 92       	push	r3
     dc4:	4f 92       	push	r4
     dc6:	5f 92       	push	r5
     dc8:	6f 92       	push	r6
     dca:	7f 92       	push	r7
     dcc:	8f 92       	push	r8
     dce:	9f 92       	push	r9
     dd0:	af 92       	push	r10
     dd2:	bf 92       	push	r11
     dd4:	cf 92       	push	r12
     dd6:	df 92       	push	r13
     dd8:	ef 92       	push	r14
     dda:	ff 92       	push	r15
     ddc:	0f 93       	push	r16
     dde:	1f 93       	push	r17
     de0:	cf 93       	push	r28
     de2:	df 93       	push	r29
     de4:	3c 01       	movw	r6, r24
     de6:	1b 01       	movw	r2, r22
     de8:	5a 01       	movw	r10, r20
     dea:	29 01       	movw	r4, r18
     dec:	ca 01       	movw	r24, r20
     dee:	0e 94 49 00 	call	0x92	; 0x92 <pvPortMalloc>
     df2:	6c 01       	movw	r12, r24
     df4:	89 2b       	or	r24, r25
     df6:	99 f0       	breq	.+38     	; 0xe1e <xTaskCreate+0x5e>
     df8:	86 e2       	ldi	r24, 0x26	; 38
     dfa:	90 e0       	ldi	r25, 0x00	; 0
     dfc:	0e 94 49 00 	call	0x92	; 0x92 <pvPortMalloc>
     e00:	ec 01       	movw	r28, r24
     e02:	89 2b       	or	r24, r25
     e04:	41 f0       	breq	.+16     	; 0xe16 <xTaskCreate+0x56>
     e06:	86 e2       	ldi	r24, 0x26	; 38
     e08:	fe 01       	movw	r30, r28
     e0a:	11 92       	st	Z+, r1
     e0c:	8a 95       	dec	r24
     e0e:	e9 f7       	brne	.-6      	; 0xe0a <xTaskCreate+0x4a>
     e10:	d8 8e       	std	Y+24, r13	; 0x18
     e12:	cf 8a       	std	Y+23, r12	; 0x17
     e14:	06 c0       	rjmp	.+12     	; 0xe22 <xTaskCreate+0x62>
     e16:	c6 01       	movw	r24, r12
     e18:	0e 94 83 00 	call	0x106	; 0x106 <vPortFree>
     e1c:	02 c0       	rjmp	.+4      	; 0xe22 <xTaskCreate+0x62>
     e1e:	c0 e0       	ldi	r28, 0x00	; 0
     e20:	d0 e0       	ldi	r29, 0x00	; 0
     e22:	20 97       	sbiw	r28, 0x00	; 0
     e24:	91 f0       	breq	.+36     	; 0xe4a <xTaskCreate+0x8a>
     e26:	95 01       	movw	r18, r10
     e28:	40 e0       	ldi	r20, 0x00	; 0
     e2a:	50 e0       	ldi	r21, 0x00	; 0
     e2c:	81 2c       	mov	r8, r1
     e2e:	91 2c       	mov	r9, r1
     e30:	5e 01       	movw	r10, r28
     e32:	67 01       	movw	r12, r14
     e34:	e0 2e       	mov	r14, r16
     e36:	82 01       	movw	r16, r4
     e38:	b1 01       	movw	r22, r2
     e3a:	c3 01       	movw	r24, r6
     e3c:	0e 94 54 05 	call	0xaa8	; 0xaa8 <prvInitialiseNewTask>
     e40:	ce 01       	movw	r24, r28
     e42:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <prvAddNewTaskToReadyList>
     e46:	81 e0       	ldi	r24, 0x01	; 1
     e48:	01 c0       	rjmp	.+2      	; 0xe4c <xTaskCreate+0x8c>
     e4a:	8f ef       	ldi	r24, 0xFF	; 255
     e4c:	df 91       	pop	r29
     e4e:	cf 91       	pop	r28
     e50:	1f 91       	pop	r17
     e52:	0f 91       	pop	r16
     e54:	ff 90       	pop	r15
     e56:	ef 90       	pop	r14
     e58:	df 90       	pop	r13
     e5a:	cf 90       	pop	r12
     e5c:	bf 90       	pop	r11
     e5e:	af 90       	pop	r10
     e60:	9f 90       	pop	r9
     e62:	8f 90       	pop	r8
     e64:	7f 90       	pop	r7
     e66:	6f 90       	pop	r6
     e68:	5f 90       	pop	r5
     e6a:	4f 90       	pop	r4
     e6c:	3f 90       	pop	r3
     e6e:	2f 90       	pop	r2
     e70:	08 95       	ret

00000e72 <vTaskStartScheduler>:
     e72:	ef 92       	push	r14
     e74:	ff 92       	push	r15
     e76:	0f 93       	push	r16
     e78:	0f 2e       	mov	r0, r31
     e7a:	f7 e8       	ldi	r31, 0x87	; 135
     e7c:	ef 2e       	mov	r14, r31
     e7e:	f6 e0       	ldi	r31, 0x06	; 6
     e80:	ff 2e       	mov	r15, r31
     e82:	f0 2d       	mov	r31, r0
     e84:	00 e0       	ldi	r16, 0x00	; 0
     e86:	20 e0       	ldi	r18, 0x00	; 0
     e88:	30 e0       	ldi	r19, 0x00	; 0
     e8a:	45 e5       	ldi	r20, 0x55	; 85
     e8c:	50 e0       	ldi	r21, 0x00	; 0
     e8e:	60 ea       	ldi	r22, 0xA0	; 160
     e90:	70 e0       	ldi	r23, 0x00	; 0
     e92:	83 e9       	ldi	r24, 0x93	; 147
     e94:	96 e0       	ldi	r25, 0x06	; 6
     e96:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <xTaskCreate>
     e9a:	81 30       	cpi	r24, 0x01	; 1
     e9c:	81 f4       	brne	.+32     	; 0xebe <vTaskStartScheduler+0x4c>
     e9e:	f8 94       	cli
     ea0:	8f ef       	ldi	r24, 0xFF	; 255
     ea2:	9f ef       	ldi	r25, 0xFF	; 255
     ea4:	90 93 8a 06 	sts	0x068A, r25	; 0x80068a <xNextTaskUnblockTime+0x1>
     ea8:	80 93 89 06 	sts	0x0689, r24	; 0x800689 <xNextTaskUnblockTime>
     eac:	81 e0       	ldi	r24, 0x01	; 1
     eae:	80 93 90 06 	sts	0x0690, r24	; 0x800690 <xSchedulerRunning>
     eb2:	10 92 93 06 	sts	0x0693, r1	; 0x800693 <xTickCount+0x1>
     eb6:	10 92 92 06 	sts	0x0692, r1	; 0x800692 <xTickCount>
     eba:	0e 94 bd 01 	call	0x37a	; 0x37a <xPortStartScheduler>
     ebe:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     ec2:	0f 91       	pop	r16
     ec4:	ff 90       	pop	r15
     ec6:	ef 90       	pop	r14
     ec8:	08 95       	ret

00000eca <vTaskSuspendAll>:
     eca:	80 91 86 06 	lds	r24, 0x0686	; 0x800686 <uxSchedulerSuspended>
     ece:	8f 5f       	subi	r24, 0xFF	; 255
     ed0:	80 93 86 06 	sts	0x0686, r24	; 0x800686 <uxSchedulerSuspended>
     ed4:	08 95       	ret

00000ed6 <xTaskIncrementTick>:
     ed6:	0f 93       	push	r16
     ed8:	1f 93       	push	r17
     eda:	cf 93       	push	r28
     edc:	df 93       	push	r29
     ede:	80 91 86 06 	lds	r24, 0x0686	; 0x800686 <uxSchedulerSuspended>
     ee2:	81 11       	cpse	r24, r1
     ee4:	01 c1       	rjmp	.+514    	; 0x10e8 <xTaskIncrementTick+0x212>
     ee6:	c0 91 92 06 	lds	r28, 0x0692	; 0x800692 <xTickCount>
     eea:	d0 91 93 06 	lds	r29, 0x0693	; 0x800693 <xTickCount+0x1>
     eee:	8e 01       	movw	r16, r28
     ef0:	0f 5f       	subi	r16, 0xFF	; 255
     ef2:	1f 4f       	sbci	r17, 0xFF	; 255
     ef4:	10 93 93 06 	sts	0x0693, r17	; 0x800693 <xTickCount+0x1>
     ef8:	00 93 92 06 	sts	0x0692, r16	; 0x800692 <xTickCount>
     efc:	01 15       	cp	r16, r1
     efe:	11 05       	cpc	r17, r1
     f00:	b9 f4       	brne	.+46     	; 0xf30 <xTaskIncrementTick+0x5a>
     f02:	80 91 aa 06 	lds	r24, 0x06AA	; 0x8006aa <pxDelayedTaskList>
     f06:	90 91 ab 06 	lds	r25, 0x06AB	; 0x8006ab <pxDelayedTaskList+0x1>
     f0a:	20 91 a8 06 	lds	r18, 0x06A8	; 0x8006a8 <pxOverflowDelayedTaskList>
     f0e:	30 91 a9 06 	lds	r19, 0x06A9	; 0x8006a9 <pxOverflowDelayedTaskList+0x1>
     f12:	30 93 ab 06 	sts	0x06AB, r19	; 0x8006ab <pxDelayedTaskList+0x1>
     f16:	20 93 aa 06 	sts	0x06AA, r18	; 0x8006aa <pxDelayedTaskList>
     f1a:	90 93 a9 06 	sts	0x06A9, r25	; 0x8006a9 <pxOverflowDelayedTaskList+0x1>
     f1e:	80 93 a8 06 	sts	0x06A8, r24	; 0x8006a8 <pxOverflowDelayedTaskList>
     f22:	80 91 8c 06 	lds	r24, 0x068C	; 0x80068c <xNumOfOverflows>
     f26:	8f 5f       	subi	r24, 0xFF	; 255
     f28:	80 93 8c 06 	sts	0x068C, r24	; 0x80068c <xNumOfOverflows>
     f2c:	0e 94 2b 05 	call	0xa56	; 0xa56 <prvResetNextTaskUnblockTime>
     f30:	80 91 89 06 	lds	r24, 0x0689	; 0x800689 <xNextTaskUnblockTime>
     f34:	90 91 8a 06 	lds	r25, 0x068A	; 0x80068a <xNextTaskUnblockTime+0x1>
     f38:	08 17       	cp	r16, r24
     f3a:	19 07       	cpc	r17, r25
     f3c:	20 f4       	brcc	.+8      	; 0xf46 <xTaskIncrementTick+0x70>
     f3e:	80 e0       	ldi	r24, 0x00	; 0
     f40:	b8 c0       	rjmp	.+368    	; 0x10b2 <xTaskIncrementTick+0x1dc>
     f42:	81 e0       	ldi	r24, 0x01	; 1
     f44:	01 c0       	rjmp	.+2      	; 0xf48 <xTaskIncrementTick+0x72>
     f46:	80 e0       	ldi	r24, 0x00	; 0
     f48:	e0 91 aa 06 	lds	r30, 0x06AA	; 0x8006aa <pxDelayedTaskList>
     f4c:	f0 91 ab 06 	lds	r31, 0x06AB	; 0x8006ab <pxDelayedTaskList+0x1>
     f50:	90 81       	ld	r25, Z
     f52:	91 11       	cpse	r25, r1
     f54:	07 c0       	rjmp	.+14     	; 0xf64 <xTaskIncrementTick+0x8e>
     f56:	2f ef       	ldi	r18, 0xFF	; 255
     f58:	3f ef       	ldi	r19, 0xFF	; 255
     f5a:	30 93 8a 06 	sts	0x068A, r19	; 0x80068a <xNextTaskUnblockTime+0x1>
     f5e:	20 93 89 06 	sts	0x0689, r18	; 0x800689 <xNextTaskUnblockTime>
     f62:	a7 c0       	rjmp	.+334    	; 0x10b2 <xTaskIncrementTick+0x1dc>
     f64:	e0 91 aa 06 	lds	r30, 0x06AA	; 0x8006aa <pxDelayedTaskList>
     f68:	f0 91 ab 06 	lds	r31, 0x06AB	; 0x8006ab <pxDelayedTaskList+0x1>
     f6c:	05 80       	ldd	r0, Z+5	; 0x05
     f6e:	f6 81       	ldd	r31, Z+6	; 0x06
     f70:	e0 2d       	mov	r30, r0
     f72:	06 80       	ldd	r0, Z+6	; 0x06
     f74:	f7 81       	ldd	r31, Z+7	; 0x07
     f76:	e0 2d       	mov	r30, r0
     f78:	22 81       	ldd	r18, Z+2	; 0x02
     f7a:	33 81       	ldd	r19, Z+3	; 0x03
     f7c:	02 17       	cp	r16, r18
     f7e:	13 07       	cpc	r17, r19
     f80:	28 f4       	brcc	.+10     	; 0xf8c <xTaskIncrementTick+0xb6>
     f82:	30 93 8a 06 	sts	0x068A, r19	; 0x80068a <xNextTaskUnblockTime+0x1>
     f86:	20 93 89 06 	sts	0x0689, r18	; 0x800689 <xNextTaskUnblockTime>
     f8a:	93 c0       	rjmp	.+294    	; 0x10b2 <xTaskIncrementTick+0x1dc>
     f8c:	a2 85       	ldd	r26, Z+10	; 0x0a
     f8e:	b3 85       	ldd	r27, Z+11	; 0x0b
     f90:	24 81       	ldd	r18, Z+4	; 0x04
     f92:	35 81       	ldd	r19, Z+5	; 0x05
     f94:	46 81       	ldd	r20, Z+6	; 0x06
     f96:	57 81       	ldd	r21, Z+7	; 0x07
     f98:	e9 01       	movw	r28, r18
     f9a:	5d 83       	std	Y+5, r21	; 0x05
     f9c:	4c 83       	std	Y+4, r20	; 0x04
     f9e:	26 81       	ldd	r18, Z+6	; 0x06
     fa0:	37 81       	ldd	r19, Z+7	; 0x07
     fa2:	44 81       	ldd	r20, Z+4	; 0x04
     fa4:	55 81       	ldd	r21, Z+5	; 0x05
     fa6:	e9 01       	movw	r28, r18
     fa8:	5b 83       	std	Y+3, r21	; 0x03
     faa:	4a 83       	std	Y+2, r20	; 0x02
     fac:	11 96       	adiw	r26, 0x01	; 1
     fae:	2d 91       	ld	r18, X+
     fb0:	3c 91       	ld	r19, X
     fb2:	12 97       	sbiw	r26, 0x02	; 2
     fb4:	af 01       	movw	r20, r30
     fb6:	4e 5f       	subi	r20, 0xFE	; 254
     fb8:	5f 4f       	sbci	r21, 0xFF	; 255
     fba:	24 17       	cp	r18, r20
     fbc:	35 07       	cpc	r19, r21
     fbe:	31 f4       	brne	.+12     	; 0xfcc <xTaskIncrementTick+0xf6>
     fc0:	26 81       	ldd	r18, Z+6	; 0x06
     fc2:	37 81       	ldd	r19, Z+7	; 0x07
     fc4:	12 96       	adiw	r26, 0x02	; 2
     fc6:	3c 93       	st	X, r19
     fc8:	2e 93       	st	-X, r18
     fca:	11 97       	sbiw	r26, 0x01	; 1
     fcc:	13 86       	std	Z+11, r1	; 0x0b
     fce:	12 86       	std	Z+10, r1	; 0x0a
     fd0:	9c 91       	ld	r25, X
     fd2:	91 50       	subi	r25, 0x01	; 1
     fd4:	9c 93       	st	X, r25
     fd6:	a4 89       	ldd	r26, Z+20	; 0x14
     fd8:	b5 89       	ldd	r27, Z+21	; 0x15
     fda:	10 97       	sbiw	r26, 0x00	; 0
     fdc:	19 f1       	breq	.+70     	; 0x1024 <xTaskIncrementTick+0x14e>
     fde:	26 85       	ldd	r18, Z+14	; 0x0e
     fe0:	37 85       	ldd	r19, Z+15	; 0x0f
     fe2:	60 89       	ldd	r22, Z+16	; 0x10
     fe4:	71 89       	ldd	r23, Z+17	; 0x11
     fe6:	e9 01       	movw	r28, r18
     fe8:	7d 83       	std	Y+5, r23	; 0x05
     fea:	6c 83       	std	Y+4, r22	; 0x04
     fec:	20 89       	ldd	r18, Z+16	; 0x10
     fee:	31 89       	ldd	r19, Z+17	; 0x11
     ff0:	66 85       	ldd	r22, Z+14	; 0x0e
     ff2:	77 85       	ldd	r23, Z+15	; 0x0f
     ff4:	e9 01       	movw	r28, r18
     ff6:	7b 83       	std	Y+3, r23	; 0x03
     ff8:	6a 83       	std	Y+2, r22	; 0x02
     ffa:	11 96       	adiw	r26, 0x01	; 1
     ffc:	6d 91       	ld	r22, X+
     ffe:	7c 91       	ld	r23, X
    1000:	12 97       	sbiw	r26, 0x02	; 2
    1002:	9f 01       	movw	r18, r30
    1004:	24 5f       	subi	r18, 0xF4	; 244
    1006:	3f 4f       	sbci	r19, 0xFF	; 255
    1008:	62 17       	cp	r22, r18
    100a:	73 07       	cpc	r23, r19
    100c:	31 f4       	brne	.+12     	; 0x101a <xTaskIncrementTick+0x144>
    100e:	20 89       	ldd	r18, Z+16	; 0x10
    1010:	31 89       	ldd	r19, Z+17	; 0x11
    1012:	12 96       	adiw	r26, 0x02	; 2
    1014:	3c 93       	st	X, r19
    1016:	2e 93       	st	-X, r18
    1018:	11 97       	sbiw	r26, 0x01	; 1
    101a:	15 8a       	std	Z+21, r1	; 0x15
    101c:	14 8a       	std	Z+20, r1	; 0x14
    101e:	9c 91       	ld	r25, X
    1020:	91 50       	subi	r25, 0x01	; 1
    1022:	9c 93       	st	X, r25
    1024:	26 89       	ldd	r18, Z+22	; 0x16
    1026:	90 91 91 06 	lds	r25, 0x0691	; 0x800691 <uxTopReadyPriority>
    102a:	92 17       	cp	r25, r18
    102c:	10 f4       	brcc	.+4      	; 0x1032 <xTaskIncrementTick+0x15c>
    102e:	20 93 91 06 	sts	0x0691, r18	; 0x800691 <uxTopReadyPriority>
    1032:	30 e0       	ldi	r19, 0x00	; 0
    1034:	d9 01       	movw	r26, r18
    1036:	aa 0f       	add	r26, r26
    1038:	bb 1f       	adc	r27, r27
    103a:	aa 0f       	add	r26, r26
    103c:	bb 1f       	adc	r27, r27
    103e:	aa 0f       	add	r26, r26
    1040:	bb 1f       	adc	r27, r27
    1042:	2a 0f       	add	r18, r26
    1044:	3b 1f       	adc	r19, r27
    1046:	d9 01       	movw	r26, r18
    1048:	a2 54       	subi	r26, 0x42	; 66
    104a:	b9 4f       	sbci	r27, 0xF9	; 249
    104c:	11 96       	adiw	r26, 0x01	; 1
    104e:	0d 90       	ld	r0, X+
    1050:	bc 91       	ld	r27, X
    1052:	a0 2d       	mov	r26, r0
    1054:	b5 83       	std	Z+5, r27	; 0x05
    1056:	a4 83       	std	Z+4, r26	; 0x04
    1058:	14 96       	adiw	r26, 0x04	; 4
    105a:	2d 91       	ld	r18, X+
    105c:	3c 91       	ld	r19, X
    105e:	15 97       	sbiw	r26, 0x05	; 5
    1060:	37 83       	std	Z+7, r19	; 0x07
    1062:	26 83       	std	Z+6, r18	; 0x06
    1064:	14 96       	adiw	r26, 0x04	; 4
    1066:	2d 91       	ld	r18, X+
    1068:	3c 91       	ld	r19, X
    106a:	15 97       	sbiw	r26, 0x05	; 5
    106c:	e9 01       	movw	r28, r18
    106e:	5b 83       	std	Y+3, r21	; 0x03
    1070:	4a 83       	std	Y+2, r20	; 0x02
    1072:	15 96       	adiw	r26, 0x05	; 5
    1074:	5c 93       	st	X, r21
    1076:	4e 93       	st	-X, r20
    1078:	14 97       	sbiw	r26, 0x04	; 4
    107a:	a6 89       	ldd	r26, Z+22	; 0x16
    107c:	b0 e0       	ldi	r27, 0x00	; 0
    107e:	9d 01       	movw	r18, r26
    1080:	22 0f       	add	r18, r18
    1082:	33 1f       	adc	r19, r19
    1084:	22 0f       	add	r18, r18
    1086:	33 1f       	adc	r19, r19
    1088:	22 0f       	add	r18, r18
    108a:	33 1f       	adc	r19, r19
    108c:	a2 0f       	add	r26, r18
    108e:	b3 1f       	adc	r27, r19
    1090:	a2 54       	subi	r26, 0x42	; 66
    1092:	b9 4f       	sbci	r27, 0xF9	; 249
    1094:	b3 87       	std	Z+11, r27	; 0x0b
    1096:	a2 87       	std	Z+10, r26	; 0x0a
    1098:	9c 91       	ld	r25, X
    109a:	9f 5f       	subi	r25, 0xFF	; 255
    109c:	9c 93       	st	X, r25
    109e:	26 89       	ldd	r18, Z+22	; 0x16
    10a0:	e0 91 e2 06 	lds	r30, 0x06E2	; 0x8006e2 <pxCurrentTCB>
    10a4:	f0 91 e3 06 	lds	r31, 0x06E3	; 0x8006e3 <pxCurrentTCB+0x1>
    10a8:	96 89       	ldd	r25, Z+22	; 0x16
    10aa:	92 17       	cp	r25, r18
    10ac:	08 f4       	brcc	.+2      	; 0x10b0 <xTaskIncrementTick+0x1da>
    10ae:	49 cf       	rjmp	.-366    	; 0xf42 <xTaskIncrementTick+0x6c>
    10b0:	4b cf       	rjmp	.-362    	; 0xf48 <xTaskIncrementTick+0x72>
    10b2:	e0 91 e2 06 	lds	r30, 0x06E2	; 0x8006e2 <pxCurrentTCB>
    10b6:	f0 91 e3 06 	lds	r31, 0x06E3	; 0x8006e3 <pxCurrentTCB+0x1>
    10ba:	26 89       	ldd	r18, Z+22	; 0x16
    10bc:	30 e0       	ldi	r19, 0x00	; 0
    10be:	f9 01       	movw	r30, r18
    10c0:	ee 0f       	add	r30, r30
    10c2:	ff 1f       	adc	r31, r31
    10c4:	ee 0f       	add	r30, r30
    10c6:	ff 1f       	adc	r31, r31
    10c8:	ee 0f       	add	r30, r30
    10ca:	ff 1f       	adc	r31, r31
    10cc:	2e 0f       	add	r18, r30
    10ce:	3f 1f       	adc	r19, r31
    10d0:	f9 01       	movw	r30, r18
    10d2:	e2 54       	subi	r30, 0x42	; 66
    10d4:	f9 4f       	sbci	r31, 0xF9	; 249
    10d6:	90 81       	ld	r25, Z
    10d8:	92 30       	cpi	r25, 0x02	; 2
    10da:	08 f0       	brcs	.+2      	; 0x10de <xTaskIncrementTick+0x208>
    10dc:	81 e0       	ldi	r24, 0x01	; 1
    10de:	90 91 8d 06 	lds	r25, 0x068D	; 0x80068d <xYieldPending>
    10e2:	91 11       	cpse	r25, r1
    10e4:	0c c0       	rjmp	.+24     	; 0x10fe <xTaskIncrementTick+0x228>
    10e6:	0c c0       	rjmp	.+24     	; 0x1100 <xTaskIncrementTick+0x22a>
    10e8:	80 91 8e 06 	lds	r24, 0x068E	; 0x80068e <xPendedTicks>
    10ec:	90 91 8f 06 	lds	r25, 0x068F	; 0x80068f <xPendedTicks+0x1>
    10f0:	01 96       	adiw	r24, 0x01	; 1
    10f2:	90 93 8f 06 	sts	0x068F, r25	; 0x80068f <xPendedTicks+0x1>
    10f6:	80 93 8e 06 	sts	0x068E, r24	; 0x80068e <xPendedTicks>
    10fa:	80 e0       	ldi	r24, 0x00	; 0
    10fc:	01 c0       	rjmp	.+2      	; 0x1100 <xTaskIncrementTick+0x22a>
    10fe:	81 e0       	ldi	r24, 0x01	; 1
    1100:	df 91       	pop	r29
    1102:	cf 91       	pop	r28
    1104:	1f 91       	pop	r17
    1106:	0f 91       	pop	r16
    1108:	08 95       	ret

0000110a <xTaskResumeAll>:
    110a:	cf 93       	push	r28
    110c:	df 93       	push	r29
    110e:	0f b6       	in	r0, 0x3f	; 63
    1110:	f8 94       	cli
    1112:	0f 92       	push	r0
    1114:	80 91 86 06 	lds	r24, 0x0686	; 0x800686 <uxSchedulerSuspended>
    1118:	81 50       	subi	r24, 0x01	; 1
    111a:	80 93 86 06 	sts	0x0686, r24	; 0x800686 <uxSchedulerSuspended>
    111e:	80 91 86 06 	lds	r24, 0x0686	; 0x800686 <uxSchedulerSuspended>
    1122:	81 11       	cpse	r24, r1
    1124:	bf c0       	rjmp	.+382    	; 0x12a4 <xTaskResumeAll+0x19a>
    1126:	80 91 94 06 	lds	r24, 0x0694	; 0x800694 <uxCurrentNumberOfTasks>
    112a:	81 11       	cpse	r24, r1
    112c:	96 c0       	rjmp	.+300    	; 0x125a <xTaskResumeAll+0x150>
    112e:	bd c0       	rjmp	.+378    	; 0x12aa <xTaskResumeAll+0x1a0>
    1130:	e0 91 a4 06 	lds	r30, 0x06A4	; 0x8006a4 <xPendingReadyList+0x5>
    1134:	f0 91 a5 06 	lds	r31, 0x06A5	; 0x8006a5 <xPendingReadyList+0x6>
    1138:	06 80       	ldd	r0, Z+6	; 0x06
    113a:	f7 81       	ldd	r31, Z+7	; 0x07
    113c:	e0 2d       	mov	r30, r0
    113e:	a4 89       	ldd	r26, Z+20	; 0x14
    1140:	b5 89       	ldd	r27, Z+21	; 0x15
    1142:	c6 85       	ldd	r28, Z+14	; 0x0e
    1144:	d7 85       	ldd	r29, Z+15	; 0x0f
    1146:	80 89       	ldd	r24, Z+16	; 0x10
    1148:	91 89       	ldd	r25, Z+17	; 0x11
    114a:	9d 83       	std	Y+5, r25	; 0x05
    114c:	8c 83       	std	Y+4, r24	; 0x04
    114e:	c0 89       	ldd	r28, Z+16	; 0x10
    1150:	d1 89       	ldd	r29, Z+17	; 0x11
    1152:	86 85       	ldd	r24, Z+14	; 0x0e
    1154:	97 85       	ldd	r25, Z+15	; 0x0f
    1156:	9b 83       	std	Y+3, r25	; 0x03
    1158:	8a 83       	std	Y+2, r24	; 0x02
    115a:	11 96       	adiw	r26, 0x01	; 1
    115c:	2d 91       	ld	r18, X+
    115e:	3c 91       	ld	r19, X
    1160:	12 97       	sbiw	r26, 0x02	; 2
    1162:	cf 01       	movw	r24, r30
    1164:	0c 96       	adiw	r24, 0x0c	; 12
    1166:	28 17       	cp	r18, r24
    1168:	39 07       	cpc	r19, r25
    116a:	31 f4       	brne	.+12     	; 0x1178 <xTaskResumeAll+0x6e>
    116c:	80 89       	ldd	r24, Z+16	; 0x10
    116e:	91 89       	ldd	r25, Z+17	; 0x11
    1170:	12 96       	adiw	r26, 0x02	; 2
    1172:	9c 93       	st	X, r25
    1174:	8e 93       	st	-X, r24
    1176:	11 97       	sbiw	r26, 0x01	; 1
    1178:	15 8a       	std	Z+21, r1	; 0x15
    117a:	14 8a       	std	Z+20, r1	; 0x14
    117c:	8c 91       	ld	r24, X
    117e:	81 50       	subi	r24, 0x01	; 1
    1180:	8c 93       	st	X, r24
    1182:	a2 85       	ldd	r26, Z+10	; 0x0a
    1184:	b3 85       	ldd	r27, Z+11	; 0x0b
    1186:	c4 81       	ldd	r28, Z+4	; 0x04
    1188:	d5 81       	ldd	r29, Z+5	; 0x05
    118a:	86 81       	ldd	r24, Z+6	; 0x06
    118c:	97 81       	ldd	r25, Z+7	; 0x07
    118e:	9d 83       	std	Y+5, r25	; 0x05
    1190:	8c 83       	std	Y+4, r24	; 0x04
    1192:	c6 81       	ldd	r28, Z+6	; 0x06
    1194:	d7 81       	ldd	r29, Z+7	; 0x07
    1196:	84 81       	ldd	r24, Z+4	; 0x04
    1198:	95 81       	ldd	r25, Z+5	; 0x05
    119a:	9b 83       	std	Y+3, r25	; 0x03
    119c:	8a 83       	std	Y+2, r24	; 0x02
    119e:	11 96       	adiw	r26, 0x01	; 1
    11a0:	8d 91       	ld	r24, X+
    11a2:	9c 91       	ld	r25, X
    11a4:	12 97       	sbiw	r26, 0x02	; 2
    11a6:	9f 01       	movw	r18, r30
    11a8:	2e 5f       	subi	r18, 0xFE	; 254
    11aa:	3f 4f       	sbci	r19, 0xFF	; 255
    11ac:	82 17       	cp	r24, r18
    11ae:	93 07       	cpc	r25, r19
    11b0:	31 f4       	brne	.+12     	; 0x11be <xTaskResumeAll+0xb4>
    11b2:	86 81       	ldd	r24, Z+6	; 0x06
    11b4:	97 81       	ldd	r25, Z+7	; 0x07
    11b6:	12 96       	adiw	r26, 0x02	; 2
    11b8:	9c 93       	st	X, r25
    11ba:	8e 93       	st	-X, r24
    11bc:	11 97       	sbiw	r26, 0x01	; 1
    11be:	13 86       	std	Z+11, r1	; 0x0b
    11c0:	12 86       	std	Z+10, r1	; 0x0a
    11c2:	8c 91       	ld	r24, X
    11c4:	81 50       	subi	r24, 0x01	; 1
    11c6:	8c 93       	st	X, r24
    11c8:	86 89       	ldd	r24, Z+22	; 0x16
    11ca:	90 91 91 06 	lds	r25, 0x0691	; 0x800691 <uxTopReadyPriority>
    11ce:	98 17       	cp	r25, r24
    11d0:	10 f4       	brcc	.+4      	; 0x11d6 <xTaskResumeAll+0xcc>
    11d2:	80 93 91 06 	sts	0x0691, r24	; 0x800691 <uxTopReadyPriority>
    11d6:	90 e0       	ldi	r25, 0x00	; 0
    11d8:	dc 01       	movw	r26, r24
    11da:	aa 0f       	add	r26, r26
    11dc:	bb 1f       	adc	r27, r27
    11de:	aa 0f       	add	r26, r26
    11e0:	bb 1f       	adc	r27, r27
    11e2:	aa 0f       	add	r26, r26
    11e4:	bb 1f       	adc	r27, r27
    11e6:	8a 0f       	add	r24, r26
    11e8:	9b 1f       	adc	r25, r27
    11ea:	dc 01       	movw	r26, r24
    11ec:	a2 54       	subi	r26, 0x42	; 66
    11ee:	b9 4f       	sbci	r27, 0xF9	; 249
    11f0:	11 96       	adiw	r26, 0x01	; 1
    11f2:	0d 90       	ld	r0, X+
    11f4:	bc 91       	ld	r27, X
    11f6:	a0 2d       	mov	r26, r0
    11f8:	b5 83       	std	Z+5, r27	; 0x05
    11fa:	a4 83       	std	Z+4, r26	; 0x04
    11fc:	14 96       	adiw	r26, 0x04	; 4
    11fe:	8d 91       	ld	r24, X+
    1200:	9c 91       	ld	r25, X
    1202:	15 97       	sbiw	r26, 0x05	; 5
    1204:	97 83       	std	Z+7, r25	; 0x07
    1206:	86 83       	std	Z+6, r24	; 0x06
    1208:	14 96       	adiw	r26, 0x04	; 4
    120a:	cd 91       	ld	r28, X+
    120c:	dc 91       	ld	r29, X
    120e:	15 97       	sbiw	r26, 0x05	; 5
    1210:	3b 83       	std	Y+3, r19	; 0x03
    1212:	2a 83       	std	Y+2, r18	; 0x02
    1214:	15 96       	adiw	r26, 0x05	; 5
    1216:	3c 93       	st	X, r19
    1218:	2e 93       	st	-X, r18
    121a:	14 97       	sbiw	r26, 0x04	; 4
    121c:	a6 89       	ldd	r26, Z+22	; 0x16
    121e:	b0 e0       	ldi	r27, 0x00	; 0
    1220:	cd 01       	movw	r24, r26
    1222:	88 0f       	add	r24, r24
    1224:	99 1f       	adc	r25, r25
    1226:	88 0f       	add	r24, r24
    1228:	99 1f       	adc	r25, r25
    122a:	88 0f       	add	r24, r24
    122c:	99 1f       	adc	r25, r25
    122e:	a8 0f       	add	r26, r24
    1230:	b9 1f       	adc	r27, r25
    1232:	a2 54       	subi	r26, 0x42	; 66
    1234:	b9 4f       	sbci	r27, 0xF9	; 249
    1236:	b3 87       	std	Z+11, r27	; 0x0b
    1238:	a2 87       	std	Z+10, r26	; 0x0a
    123a:	8c 91       	ld	r24, X
    123c:	8f 5f       	subi	r24, 0xFF	; 255
    123e:	8c 93       	st	X, r24
    1240:	96 89       	ldd	r25, Z+22	; 0x16
    1242:	a0 91 e2 06 	lds	r26, 0x06E2	; 0x8006e2 <pxCurrentTCB>
    1246:	b0 91 e3 06 	lds	r27, 0x06E3	; 0x8006e3 <pxCurrentTCB+0x1>
    124a:	56 96       	adiw	r26, 0x16	; 22
    124c:	8c 91       	ld	r24, X
    124e:	98 17       	cp	r25, r24
    1250:	30 f0       	brcs	.+12     	; 0x125e <xTaskResumeAll+0x154>
    1252:	81 e0       	ldi	r24, 0x01	; 1
    1254:	80 93 8d 06 	sts	0x068D, r24	; 0x80068d <xYieldPending>
    1258:	02 c0       	rjmp	.+4      	; 0x125e <xTaskResumeAll+0x154>
    125a:	e0 e0       	ldi	r30, 0x00	; 0
    125c:	f0 e0       	ldi	r31, 0x00	; 0
    125e:	80 91 9f 06 	lds	r24, 0x069F	; 0x80069f <xPendingReadyList>
    1262:	81 11       	cpse	r24, r1
    1264:	65 cf       	rjmp	.-310    	; 0x1130 <xTaskResumeAll+0x26>
    1266:	ef 2b       	or	r30, r31
    1268:	11 f0       	breq	.+4      	; 0x126e <xTaskResumeAll+0x164>
    126a:	0e 94 2b 05 	call	0xa56	; 0xa56 <prvResetNextTaskUnblockTime>
    126e:	c0 91 8e 06 	lds	r28, 0x068E	; 0x80068e <xPendedTicks>
    1272:	d0 91 8f 06 	lds	r29, 0x068F	; 0x80068f <xPendedTicks+0x1>
    1276:	20 97       	sbiw	r28, 0x00	; 0
    1278:	69 f0       	breq	.+26     	; 0x1294 <xTaskResumeAll+0x18a>
    127a:	0e 94 6b 07 	call	0xed6	; 0xed6 <xTaskIncrementTick>
    127e:	88 23       	and	r24, r24
    1280:	19 f0       	breq	.+6      	; 0x1288 <xTaskResumeAll+0x17e>
    1282:	81 e0       	ldi	r24, 0x01	; 1
    1284:	80 93 8d 06 	sts	0x068D, r24	; 0x80068d <xYieldPending>
    1288:	21 97       	sbiw	r28, 0x01	; 1
    128a:	b9 f7       	brne	.-18     	; 0x127a <xTaskResumeAll+0x170>
    128c:	10 92 8f 06 	sts	0x068F, r1	; 0x80068f <xPendedTicks+0x1>
    1290:	10 92 8e 06 	sts	0x068E, r1	; 0x80068e <xPendedTicks>
    1294:	80 91 8d 06 	lds	r24, 0x068D	; 0x80068d <xYieldPending>
    1298:	88 23       	and	r24, r24
    129a:	31 f0       	breq	.+12     	; 0x12a8 <xTaskResumeAll+0x19e>
    129c:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <vPortYield>
    12a0:	81 e0       	ldi	r24, 0x01	; 1
    12a2:	03 c0       	rjmp	.+6      	; 0x12aa <xTaskResumeAll+0x1a0>
    12a4:	80 e0       	ldi	r24, 0x00	; 0
    12a6:	01 c0       	rjmp	.+2      	; 0x12aa <xTaskResumeAll+0x1a0>
    12a8:	80 e0       	ldi	r24, 0x00	; 0
    12aa:	0f 90       	pop	r0
    12ac:	0f be       	out	0x3f, r0	; 63
    12ae:	df 91       	pop	r29
    12b0:	cf 91       	pop	r28
    12b2:	08 95       	ret

000012b4 <vTaskSwitchContext>:
    12b4:	80 91 86 06 	lds	r24, 0x0686	; 0x800686 <uxSchedulerSuspended>
    12b8:	88 23       	and	r24, r24
    12ba:	21 f0       	breq	.+8      	; 0x12c4 <vTaskSwitchContext+0x10>
    12bc:	81 e0       	ldi	r24, 0x01	; 1
    12be:	80 93 8d 06 	sts	0x068D, r24	; 0x80068d <xYieldPending>
    12c2:	08 95       	ret
    12c4:	10 92 8d 06 	sts	0x068D, r1	; 0x80068d <xYieldPending>
    12c8:	20 91 91 06 	lds	r18, 0x0691	; 0x800691 <uxTopReadyPriority>
    12cc:	01 c0       	rjmp	.+2      	; 0x12d0 <vTaskSwitchContext+0x1c>
    12ce:	21 50       	subi	r18, 0x01	; 1
    12d0:	82 2f       	mov	r24, r18
    12d2:	90 e0       	ldi	r25, 0x00	; 0
    12d4:	fc 01       	movw	r30, r24
    12d6:	ee 0f       	add	r30, r30
    12d8:	ff 1f       	adc	r31, r31
    12da:	ee 0f       	add	r30, r30
    12dc:	ff 1f       	adc	r31, r31
    12de:	ee 0f       	add	r30, r30
    12e0:	ff 1f       	adc	r31, r31
    12e2:	e8 0f       	add	r30, r24
    12e4:	f9 1f       	adc	r31, r25
    12e6:	e2 54       	subi	r30, 0x42	; 66
    12e8:	f9 4f       	sbci	r31, 0xF9	; 249
    12ea:	30 81       	ld	r19, Z
    12ec:	33 23       	and	r19, r19
    12ee:	79 f3       	breq	.-34     	; 0x12ce <vTaskSwitchContext+0x1a>
    12f0:	ac 01       	movw	r20, r24
    12f2:	44 0f       	add	r20, r20
    12f4:	55 1f       	adc	r21, r21
    12f6:	44 0f       	add	r20, r20
    12f8:	55 1f       	adc	r21, r21
    12fa:	44 0f       	add	r20, r20
    12fc:	55 1f       	adc	r21, r21
    12fe:	48 0f       	add	r20, r24
    1300:	59 1f       	adc	r21, r25
    1302:	df 01       	movw	r26, r30
    1304:	01 80       	ldd	r0, Z+1	; 0x01
    1306:	f2 81       	ldd	r31, Z+2	; 0x02
    1308:	e0 2d       	mov	r30, r0
    130a:	02 80       	ldd	r0, Z+2	; 0x02
    130c:	f3 81       	ldd	r31, Z+3	; 0x03
    130e:	e0 2d       	mov	r30, r0
    1310:	12 96       	adiw	r26, 0x02	; 2
    1312:	fc 93       	st	X, r31
    1314:	ee 93       	st	-X, r30
    1316:	11 97       	sbiw	r26, 0x01	; 1
    1318:	4f 53       	subi	r20, 0x3F	; 63
    131a:	59 4f       	sbci	r21, 0xF9	; 249
    131c:	e4 17       	cp	r30, r20
    131e:	f5 07       	cpc	r31, r21
    1320:	29 f4       	brne	.+10     	; 0x132c <vTaskSwitchContext+0x78>
    1322:	42 81       	ldd	r20, Z+2	; 0x02
    1324:	53 81       	ldd	r21, Z+3	; 0x03
    1326:	fd 01       	movw	r30, r26
    1328:	52 83       	std	Z+2, r21	; 0x02
    132a:	41 83       	std	Z+1, r20	; 0x01
    132c:	fc 01       	movw	r30, r24
    132e:	ee 0f       	add	r30, r30
    1330:	ff 1f       	adc	r31, r31
    1332:	ee 0f       	add	r30, r30
    1334:	ff 1f       	adc	r31, r31
    1336:	ee 0f       	add	r30, r30
    1338:	ff 1f       	adc	r31, r31
    133a:	8e 0f       	add	r24, r30
    133c:	9f 1f       	adc	r25, r31
    133e:	fc 01       	movw	r30, r24
    1340:	e2 54       	subi	r30, 0x42	; 66
    1342:	f9 4f       	sbci	r31, 0xF9	; 249
    1344:	01 80       	ldd	r0, Z+1	; 0x01
    1346:	f2 81       	ldd	r31, Z+2	; 0x02
    1348:	e0 2d       	mov	r30, r0
    134a:	86 81       	ldd	r24, Z+6	; 0x06
    134c:	97 81       	ldd	r25, Z+7	; 0x07
    134e:	90 93 e3 06 	sts	0x06E3, r25	; 0x8006e3 <pxCurrentTCB+0x1>
    1352:	80 93 e2 06 	sts	0x06E2, r24	; 0x8006e2 <pxCurrentTCB>
    1356:	20 93 91 06 	sts	0x0691, r18	; 0x800691 <uxTopReadyPriority>
    135a:	08 95       	ret

0000135c <vTaskPlaceOnEventList>:
    135c:	cf 93       	push	r28
    135e:	df 93       	push	r29
    1360:	eb 01       	movw	r28, r22
    1362:	60 91 e2 06 	lds	r22, 0x06E2	; 0x8006e2 <pxCurrentTCB>
    1366:	70 91 e3 06 	lds	r23, 0x06E3	; 0x8006e3 <pxCurrentTCB+0x1>
    136a:	64 5f       	subi	r22, 0xF4	; 244
    136c:	7f 4f       	sbci	r23, 0xFF	; 255
    136e:	0e 94 96 00 	call	0x12c	; 0x12c <vListInsert>
    1372:	61 e0       	ldi	r22, 0x01	; 1
    1374:	ce 01       	movw	r24, r28
    1376:	0e 94 9c 06 	call	0xd38	; 0xd38 <prvAddCurrentTaskToDelayedList>
    137a:	df 91       	pop	r29
    137c:	cf 91       	pop	r28
    137e:	08 95       	ret

00001380 <xTaskRemoveFromEventList>:
    1380:	cf 93       	push	r28
    1382:	df 93       	push	r29
    1384:	dc 01       	movw	r26, r24
    1386:	15 96       	adiw	r26, 0x05	; 5
    1388:	ed 91       	ld	r30, X+
    138a:	fc 91       	ld	r31, X
    138c:	16 97       	sbiw	r26, 0x06	; 6
    138e:	06 80       	ldd	r0, Z+6	; 0x06
    1390:	f7 81       	ldd	r31, Z+7	; 0x07
    1392:	e0 2d       	mov	r30, r0
    1394:	a4 89       	ldd	r26, Z+20	; 0x14
    1396:	b5 89       	ldd	r27, Z+21	; 0x15
    1398:	c6 85       	ldd	r28, Z+14	; 0x0e
    139a:	d7 85       	ldd	r29, Z+15	; 0x0f
    139c:	80 89       	ldd	r24, Z+16	; 0x10
    139e:	91 89       	ldd	r25, Z+17	; 0x11
    13a0:	9d 83       	std	Y+5, r25	; 0x05
    13a2:	8c 83       	std	Y+4, r24	; 0x04
    13a4:	c0 89       	ldd	r28, Z+16	; 0x10
    13a6:	d1 89       	ldd	r29, Z+17	; 0x11
    13a8:	86 85       	ldd	r24, Z+14	; 0x0e
    13aa:	97 85       	ldd	r25, Z+15	; 0x0f
    13ac:	9b 83       	std	Y+3, r25	; 0x03
    13ae:	8a 83       	std	Y+2, r24	; 0x02
    13b0:	11 96       	adiw	r26, 0x01	; 1
    13b2:	8d 91       	ld	r24, X+
    13b4:	9c 91       	ld	r25, X
    13b6:	12 97       	sbiw	r26, 0x02	; 2
    13b8:	9f 01       	movw	r18, r30
    13ba:	24 5f       	subi	r18, 0xF4	; 244
    13bc:	3f 4f       	sbci	r19, 0xFF	; 255
    13be:	82 17       	cp	r24, r18
    13c0:	93 07       	cpc	r25, r19
    13c2:	31 f4       	brne	.+12     	; 0x13d0 <xTaskRemoveFromEventList+0x50>
    13c4:	80 89       	ldd	r24, Z+16	; 0x10
    13c6:	91 89       	ldd	r25, Z+17	; 0x11
    13c8:	12 96       	adiw	r26, 0x02	; 2
    13ca:	9c 93       	st	X, r25
    13cc:	8e 93       	st	-X, r24
    13ce:	11 97       	sbiw	r26, 0x01	; 1
    13d0:	15 8a       	std	Z+21, r1	; 0x15
    13d2:	14 8a       	std	Z+20, r1	; 0x14
    13d4:	8c 91       	ld	r24, X
    13d6:	81 50       	subi	r24, 0x01	; 1
    13d8:	8c 93       	st	X, r24
    13da:	80 91 86 06 	lds	r24, 0x0686	; 0x800686 <uxSchedulerSuspended>
    13de:	81 11       	cpse	r24, r1
    13e0:	60 c0       	rjmp	.+192    	; 0x14a2 <xTaskRemoveFromEventList+0x122>
    13e2:	a2 85       	ldd	r26, Z+10	; 0x0a
    13e4:	b3 85       	ldd	r27, Z+11	; 0x0b
    13e6:	c4 81       	ldd	r28, Z+4	; 0x04
    13e8:	d5 81       	ldd	r29, Z+5	; 0x05
    13ea:	86 81       	ldd	r24, Z+6	; 0x06
    13ec:	97 81       	ldd	r25, Z+7	; 0x07
    13ee:	9d 83       	std	Y+5, r25	; 0x05
    13f0:	8c 83       	std	Y+4, r24	; 0x04
    13f2:	c6 81       	ldd	r28, Z+6	; 0x06
    13f4:	d7 81       	ldd	r29, Z+7	; 0x07
    13f6:	84 81       	ldd	r24, Z+4	; 0x04
    13f8:	95 81       	ldd	r25, Z+5	; 0x05
    13fa:	9b 83       	std	Y+3, r25	; 0x03
    13fc:	8a 83       	std	Y+2, r24	; 0x02
    13fe:	11 96       	adiw	r26, 0x01	; 1
    1400:	8d 91       	ld	r24, X+
    1402:	9c 91       	ld	r25, X
    1404:	12 97       	sbiw	r26, 0x02	; 2
    1406:	9f 01       	movw	r18, r30
    1408:	2e 5f       	subi	r18, 0xFE	; 254
    140a:	3f 4f       	sbci	r19, 0xFF	; 255
    140c:	82 17       	cp	r24, r18
    140e:	93 07       	cpc	r25, r19
    1410:	31 f4       	brne	.+12     	; 0x141e <xTaskRemoveFromEventList+0x9e>
    1412:	86 81       	ldd	r24, Z+6	; 0x06
    1414:	97 81       	ldd	r25, Z+7	; 0x07
    1416:	12 96       	adiw	r26, 0x02	; 2
    1418:	9c 93       	st	X, r25
    141a:	8e 93       	st	-X, r24
    141c:	11 97       	sbiw	r26, 0x01	; 1
    141e:	13 86       	std	Z+11, r1	; 0x0b
    1420:	12 86       	std	Z+10, r1	; 0x0a
    1422:	8c 91       	ld	r24, X
    1424:	81 50       	subi	r24, 0x01	; 1
    1426:	8c 93       	st	X, r24
    1428:	86 89       	ldd	r24, Z+22	; 0x16
    142a:	90 91 91 06 	lds	r25, 0x0691	; 0x800691 <uxTopReadyPriority>
    142e:	98 17       	cp	r25, r24
    1430:	10 f4       	brcc	.+4      	; 0x1436 <xTaskRemoveFromEventList+0xb6>
    1432:	80 93 91 06 	sts	0x0691, r24	; 0x800691 <uxTopReadyPriority>
    1436:	90 e0       	ldi	r25, 0x00	; 0
    1438:	dc 01       	movw	r26, r24
    143a:	aa 0f       	add	r26, r26
    143c:	bb 1f       	adc	r27, r27
    143e:	aa 0f       	add	r26, r26
    1440:	bb 1f       	adc	r27, r27
    1442:	aa 0f       	add	r26, r26
    1444:	bb 1f       	adc	r27, r27
    1446:	8a 0f       	add	r24, r26
    1448:	9b 1f       	adc	r25, r27
    144a:	dc 01       	movw	r26, r24
    144c:	a2 54       	subi	r26, 0x42	; 66
    144e:	b9 4f       	sbci	r27, 0xF9	; 249
    1450:	11 96       	adiw	r26, 0x01	; 1
    1452:	0d 90       	ld	r0, X+
    1454:	bc 91       	ld	r27, X
    1456:	a0 2d       	mov	r26, r0
    1458:	b5 83       	std	Z+5, r27	; 0x05
    145a:	a4 83       	std	Z+4, r26	; 0x04
    145c:	14 96       	adiw	r26, 0x04	; 4
    145e:	8d 91       	ld	r24, X+
    1460:	9c 91       	ld	r25, X
    1462:	15 97       	sbiw	r26, 0x05	; 5
    1464:	97 83       	std	Z+7, r25	; 0x07
    1466:	86 83       	std	Z+6, r24	; 0x06
    1468:	14 96       	adiw	r26, 0x04	; 4
    146a:	cd 91       	ld	r28, X+
    146c:	dc 91       	ld	r29, X
    146e:	15 97       	sbiw	r26, 0x05	; 5
    1470:	3b 83       	std	Y+3, r19	; 0x03
    1472:	2a 83       	std	Y+2, r18	; 0x02
    1474:	15 96       	adiw	r26, 0x05	; 5
    1476:	3c 93       	st	X, r19
    1478:	2e 93       	st	-X, r18
    147a:	14 97       	sbiw	r26, 0x04	; 4
    147c:	a6 89       	ldd	r26, Z+22	; 0x16
    147e:	b0 e0       	ldi	r27, 0x00	; 0
    1480:	cd 01       	movw	r24, r26
    1482:	88 0f       	add	r24, r24
    1484:	99 1f       	adc	r25, r25
    1486:	88 0f       	add	r24, r24
    1488:	99 1f       	adc	r25, r25
    148a:	88 0f       	add	r24, r24
    148c:	99 1f       	adc	r25, r25
    148e:	a8 0f       	add	r26, r24
    1490:	b9 1f       	adc	r27, r25
    1492:	a2 54       	subi	r26, 0x42	; 66
    1494:	b9 4f       	sbci	r27, 0xF9	; 249
    1496:	b3 87       	std	Z+11, r27	; 0x0b
    1498:	a2 87       	std	Z+10, r26	; 0x0a
    149a:	8c 91       	ld	r24, X
    149c:	8f 5f       	subi	r24, 0xFF	; 255
    149e:	8c 93       	st	X, r24
    14a0:	1c c0       	rjmp	.+56     	; 0x14da <xTaskRemoveFromEventList+0x15a>
    14a2:	4f e9       	ldi	r20, 0x9F	; 159
    14a4:	56 e0       	ldi	r21, 0x06	; 6
    14a6:	da 01       	movw	r26, r20
    14a8:	11 96       	adiw	r26, 0x01	; 1
    14aa:	cd 91       	ld	r28, X+
    14ac:	dc 91       	ld	r29, X
    14ae:	12 97       	sbiw	r26, 0x02	; 2
    14b0:	d7 87       	std	Z+15, r29	; 0x0f
    14b2:	c6 87       	std	Z+14, r28	; 0x0e
    14b4:	8c 81       	ldd	r24, Y+4	; 0x04
    14b6:	9d 81       	ldd	r25, Y+5	; 0x05
    14b8:	91 8b       	std	Z+17, r25	; 0x11
    14ba:	80 8b       	std	Z+16, r24	; 0x10
    14bc:	8c 81       	ldd	r24, Y+4	; 0x04
    14be:	9d 81       	ldd	r25, Y+5	; 0x05
    14c0:	dc 01       	movw	r26, r24
    14c2:	13 96       	adiw	r26, 0x03	; 3
    14c4:	3c 93       	st	X, r19
    14c6:	2e 93       	st	-X, r18
    14c8:	12 97       	sbiw	r26, 0x02	; 2
    14ca:	3d 83       	std	Y+5, r19	; 0x05
    14cc:	2c 83       	std	Y+4, r18	; 0x04
    14ce:	55 8b       	std	Z+21, r21	; 0x15
    14d0:	44 8b       	std	Z+20, r20	; 0x14
    14d2:	da 01       	movw	r26, r20
    14d4:	8c 91       	ld	r24, X
    14d6:	8f 5f       	subi	r24, 0xFF	; 255
    14d8:	8c 93       	st	X, r24
    14da:	96 89       	ldd	r25, Z+22	; 0x16
    14dc:	e0 91 e2 06 	lds	r30, 0x06E2	; 0x8006e2 <pxCurrentTCB>
    14e0:	f0 91 e3 06 	lds	r31, 0x06E3	; 0x8006e3 <pxCurrentTCB+0x1>
    14e4:	86 89       	ldd	r24, Z+22	; 0x16
    14e6:	89 17       	cp	r24, r25
    14e8:	20 f4       	brcc	.+8      	; 0x14f2 <xTaskRemoveFromEventList+0x172>
    14ea:	81 e0       	ldi	r24, 0x01	; 1
    14ec:	80 93 8d 06 	sts	0x068D, r24	; 0x80068d <xYieldPending>
    14f0:	01 c0       	rjmp	.+2      	; 0x14f4 <xTaskRemoveFromEventList+0x174>
    14f2:	80 e0       	ldi	r24, 0x00	; 0
    14f4:	df 91       	pop	r29
    14f6:	cf 91       	pop	r28
    14f8:	08 95       	ret

000014fa <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
    14fa:	20 91 8c 06 	lds	r18, 0x068C	; 0x80068c <xNumOfOverflows>
    14fe:	fc 01       	movw	r30, r24
    1500:	20 83       	st	Z, r18
    pxTimeOut->xTimeOnEntering = xTickCount;
    1502:	20 91 92 06 	lds	r18, 0x0692	; 0x800692 <xTickCount>
    1506:	30 91 93 06 	lds	r19, 0x0693	; 0x800693 <xTickCount+0x1>
    150a:	32 83       	std	Z+2, r19	; 0x02
    150c:	21 83       	std	Z+1, r18	; 0x01
    150e:	08 95       	ret

00001510 <xTaskCheckForTimeOut>:
}
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
    1510:	cf 93       	push	r28
    1512:	df 93       	push	r29
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
    configASSERT( pxTicksToWait );

    taskENTER_CRITICAL();
    1514:	0f b6       	in	r0, 0x3f	; 63
    1516:	f8 94       	cli
    1518:	0f 92       	push	r0
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
    151a:	40 91 92 06 	lds	r20, 0x0692	; 0x800692 <xTickCount>
    151e:	50 91 93 06 	lds	r21, 0x0693	; 0x800693 <xTickCount+0x1>
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
    1522:	ec 01       	movw	r28, r24
    1524:	29 81       	ldd	r18, Y+1	; 0x01
    1526:	3a 81       	ldd	r19, Y+2	; 0x02
    1528:	da 01       	movw	r26, r20
    152a:	a2 1b       	sub	r26, r18
    152c:	b3 0b       	sbc	r27, r19
                xReturn = pdFALSE;
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
    152e:	f8 81       	ld	r31, Y
    1530:	e0 91 8c 06 	lds	r30, 0x068C	; 0x80068c <xNumOfOverflows>
    1534:	fe 17       	cp	r31, r30
    1536:	41 f0       	breq	.+16     	; 0x1548 <xTaskCheckForTimeOut+0x38>
    1538:	42 17       	cp	r20, r18
    153a:	53 07       	cpc	r21, r19
    153c:	28 f0       	brcs	.+10     	; 0x1548 <xTaskCheckForTimeOut+0x38>
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
            *pxTicksToWait = ( TickType_t ) 0;
    153e:	fb 01       	movw	r30, r22
    1540:	11 82       	std	Z+1, r1	; 0x01
    1542:	10 82       	st	Z, r1
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
    1544:	81 e0       	ldi	r24, 0x01	; 1
            *pxTicksToWait = ( TickType_t ) 0;
    1546:	11 c0       	rjmp	.+34     	; 0x156a <xTaskCheckForTimeOut+0x5a>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
    1548:	eb 01       	movw	r28, r22
    154a:	28 81       	ld	r18, Y
    154c:	39 81       	ldd	r19, Y+1	; 0x01
    154e:	a2 17       	cp	r26, r18
    1550:	b3 07       	cpc	r27, r19
    1552:	40 f4       	brcc	.+16     	; 0x1564 <xTaskCheckForTimeOut+0x54>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
    1554:	2a 1b       	sub	r18, r26
    1556:	3b 0b       	sbc	r19, r27
    1558:	39 83       	std	Y+1, r19	; 0x01
    155a:	28 83       	st	Y, r18
            vTaskInternalSetTimeOutState( pxTimeOut );
    155c:	0e 94 7d 0a 	call	0x14fa	; 0x14fa <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
    1560:	80 e0       	ldi	r24, 0x00	; 0
    1562:	03 c0       	rjmp	.+6      	; 0x156a <xTaskCheckForTimeOut+0x5a>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
    1564:	19 82       	std	Y+1, r1	; 0x01
    1566:	18 82       	st	Y, r1
            xReturn = pdTRUE;
    1568:	81 e0       	ldi	r24, 0x01	; 1
        }
    }
    taskEXIT_CRITICAL();
    156a:	0f 90       	pop	r0
    156c:	0f be       	out	0x3f, r0	; 63

    return xReturn;
}
    156e:	df 91       	pop	r29
    1570:	cf 91       	pop	r28
    1572:	08 95       	ret

00001574 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
    xYieldPending = pdTRUE;
    1574:	81 e0       	ldi	r24, 0x01	; 1
    1576:	80 93 8d 06 	sts	0x068D, r24	; 0x80068d <xYieldPending>
    157a:	08 95       	ret

0000157c <UART_INT>:
 */ 
#include "UART.h"
void UART_INT(void){
	
	
	UCSRB = (1<<RXEN)|(1<<TXEN);
    157c:	88 e1       	ldi	r24, 0x18	; 24
    157e:	8a b9       	out	0x0a, r24	; 10
	UCSRC =(1<<URSEL)|(1<<UCSZ0)|(1<<UCSZ1);
    1580:	86 e8       	ldi	r24, 0x86	; 134
    1582:	80 bd       	out	0x20, r24	; 32
	UBRRL=UBRR_VALUE;
    1584:	87 e6       	ldi	r24, 0x67	; 103
    1586:	89 b9       	out	0x09, r24	; 9
	UBRRH=UBRR_VALUE>>8;
    1588:	10 bc       	out	0x20, r1	; 32
    158a:	08 95       	ret

0000158c <UART_SENDCHAR>:
}
void UART_SENDCHAR(char data){
	
	while(!(UCSRA & (1<<UDRE)));
    158c:	5d 9b       	sbis	0x0b, 5	; 11
    158e:	fe cf       	rjmp	.-4      	; 0x158c <UART_SENDCHAR>
	UDR = data;
    1590:	8c b9       	out	0x0c, r24	; 12
    1592:	08 95       	ret

00001594 <UART_SENDSTRING>:
}
void UART_SENDSTRING(char * data){
    1594:	0f 93       	push	r16
    1596:	1f 93       	push	r17
    1598:	cf 93       	push	r28
    159a:	8c 01       	movw	r16, r24
	char i=0;
    159c:	c0 e0       	ldi	r28, 0x00	; 0
	while(data[i]!='\0'){
    159e:	03 c0       	rjmp	.+6      	; 0x15a6 <UART_SENDSTRING+0x12>
		UART_SENDCHAR(data[i]);
    15a0:	0e 94 c6 0a 	call	0x158c	; 0x158c <UART_SENDCHAR>
		i++;
    15a4:	cf 5f       	subi	r28, 0xFF	; 255
	while(!(UCSRA & (1<<UDRE)));
	UDR = data;
}
void UART_SENDSTRING(char * data){
	char i=0;
	while(data[i]!='\0'){
    15a6:	f8 01       	movw	r30, r16
    15a8:	ec 0f       	add	r30, r28
    15aa:	f1 1d       	adc	r31, r1
    15ac:	80 81       	ld	r24, Z
    15ae:	81 11       	cpse	r24, r1
    15b0:	f7 cf       	rjmp	.-18     	; 0x15a0 <UART_SENDSTRING+0xc>
		UART_SENDCHAR(data[i]);
		i++;
	}
}
    15b2:	cf 91       	pop	r28
    15b4:	1f 91       	pop	r17
    15b6:	0f 91       	pop	r16
    15b8:	08 95       	ret

000015ba <__udivmodhi4>:
    15ba:	aa 1b       	sub	r26, r26
    15bc:	bb 1b       	sub	r27, r27
    15be:	51 e1       	ldi	r21, 0x11	; 17
    15c0:	07 c0       	rjmp	.+14     	; 0x15d0 <__udivmodhi4_ep>

000015c2 <__udivmodhi4_loop>:
    15c2:	aa 1f       	adc	r26, r26
    15c4:	bb 1f       	adc	r27, r27
    15c6:	a6 17       	cp	r26, r22
    15c8:	b7 07       	cpc	r27, r23
    15ca:	10 f0       	brcs	.+4      	; 0x15d0 <__udivmodhi4_ep>
    15cc:	a6 1b       	sub	r26, r22
    15ce:	b7 0b       	sbc	r27, r23

000015d0 <__udivmodhi4_ep>:
    15d0:	88 1f       	adc	r24, r24
    15d2:	99 1f       	adc	r25, r25
    15d4:	5a 95       	dec	r21
    15d6:	a9 f7       	brne	.-22     	; 0x15c2 <__udivmodhi4_loop>
    15d8:	80 95       	com	r24
    15da:	90 95       	com	r25
    15dc:	bc 01       	movw	r22, r24
    15de:	cd 01       	movw	r24, r26
    15e0:	08 95       	ret

000015e2 <memcpy>:
    15e2:	fb 01       	movw	r30, r22
    15e4:	dc 01       	movw	r26, r24
    15e6:	02 c0       	rjmp	.+4      	; 0x15ec <memcpy+0xa>
    15e8:	01 90       	ld	r0, Z+
    15ea:	0d 92       	st	X+, r0
    15ec:	41 50       	subi	r20, 0x01	; 1
    15ee:	50 40       	sbci	r21, 0x00	; 0
    15f0:	d8 f7       	brcc	.-10     	; 0x15e8 <memcpy+0x6>
    15f2:	08 95       	ret

000015f4 <_exit>:
    15f4:	f8 94       	cli

000015f6 <__stop_program>:
    15f6:	ff cf       	rjmp	.-2      	; 0x15f6 <__stop_program>
