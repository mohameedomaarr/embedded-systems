
EEPROM_test2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000059c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000040  00800060  0000059c  00000610  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000650  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000680  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000128  00000000  00000000  000006bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001812  00000000  00000000  000007e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000a18  00000000  00000000  00001ff6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000009cc  00000000  00000000  00002a0e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000208  00000000  00000000  000033dc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000007a0  00000000  00000000  000035e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000c0d  00000000  00000000  00003d84  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000d8  00000000  00000000  00004991  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e9       	ldi	r30, 0x9C	; 156
  68:	f5 e0       	ldi	r31, 0x05	; 5
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 3a       	cpi	r26, 0xA0	; 160
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 23 02 	call	0x446	; 0x446 <main>
  7a:	0c 94 cc 02 	jmp	0x598	; 0x598 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <DIO_Write>:
		break;
		
	}
	
	return -1;
}
  82:	98 2f       	mov	r25, r24
  84:	96 95       	lsr	r25
  86:	96 95       	lsr	r25
  88:	96 95       	lsr	r25
  8a:	87 70       	andi	r24, 0x07	; 7
  8c:	91 30       	cpi	r25, 0x01	; 1
  8e:	21 f1       	breq	.+72     	; 0xd8 <DIO_Write+0x56>
  90:	30 f0       	brcs	.+12     	; 0x9e <DIO_Write+0x1c>
  92:	92 30       	cpi	r25, 0x02	; 2
  94:	f1 f1       	breq	.+124    	; 0x112 <DIO_Write+0x90>
  96:	93 30       	cpi	r25, 0x03	; 3
  98:	09 f4       	brne	.+2      	; 0x9c <DIO_Write+0x1a>
  9a:	58 c0       	rjmp	.+176    	; 0x14c <DIO_Write+0xca>
  9c:	08 95       	ret
  9e:	61 30       	cpi	r22, 0x01	; 1
  a0:	69 f4       	brne	.+26     	; 0xbc <DIO_Write+0x3a>
  a2:	4b b3       	in	r20, 0x1b	; 27
  a4:	21 e0       	ldi	r18, 0x01	; 1
  a6:	30 e0       	ldi	r19, 0x00	; 0
  a8:	b9 01       	movw	r22, r18
  aa:	02 c0       	rjmp	.+4      	; 0xb0 <DIO_Write+0x2e>
  ac:	66 0f       	add	r22, r22
  ae:	77 1f       	adc	r23, r23
  b0:	8a 95       	dec	r24
  b2:	e2 f7       	brpl	.-8      	; 0xac <DIO_Write+0x2a>
  b4:	cb 01       	movw	r24, r22
  b6:	84 2b       	or	r24, r20
  b8:	8b bb       	out	0x1b, r24	; 27
  ba:	08 95       	ret
  bc:	4b b3       	in	r20, 0x1b	; 27
  be:	21 e0       	ldi	r18, 0x01	; 1
  c0:	30 e0       	ldi	r19, 0x00	; 0
  c2:	b9 01       	movw	r22, r18
  c4:	02 c0       	rjmp	.+4      	; 0xca <DIO_Write+0x48>
  c6:	66 0f       	add	r22, r22
  c8:	77 1f       	adc	r23, r23
  ca:	8a 95       	dec	r24
  cc:	e2 f7       	brpl	.-8      	; 0xc6 <DIO_Write+0x44>
  ce:	cb 01       	movw	r24, r22
  d0:	80 95       	com	r24
  d2:	84 23       	and	r24, r20
  d4:	8b bb       	out	0x1b, r24	; 27
  d6:	08 95       	ret
  d8:	61 30       	cpi	r22, 0x01	; 1
  da:	69 f4       	brne	.+26     	; 0xf6 <DIO_Write+0x74>
  dc:	48 b3       	in	r20, 0x18	; 24
  de:	21 e0       	ldi	r18, 0x01	; 1
  e0:	30 e0       	ldi	r19, 0x00	; 0
  e2:	b9 01       	movw	r22, r18
  e4:	02 c0       	rjmp	.+4      	; 0xea <DIO_Write+0x68>
  e6:	66 0f       	add	r22, r22
  e8:	77 1f       	adc	r23, r23
  ea:	8a 95       	dec	r24
  ec:	e2 f7       	brpl	.-8      	; 0xe6 <DIO_Write+0x64>
  ee:	cb 01       	movw	r24, r22
  f0:	84 2b       	or	r24, r20
  f2:	88 bb       	out	0x18, r24	; 24
  f4:	08 95       	ret
  f6:	48 b3       	in	r20, 0x18	; 24
  f8:	21 e0       	ldi	r18, 0x01	; 1
  fa:	30 e0       	ldi	r19, 0x00	; 0
  fc:	b9 01       	movw	r22, r18
  fe:	02 c0       	rjmp	.+4      	; 0x104 <DIO_Write+0x82>
 100:	66 0f       	add	r22, r22
 102:	77 1f       	adc	r23, r23
 104:	8a 95       	dec	r24
 106:	e2 f7       	brpl	.-8      	; 0x100 <DIO_Write+0x7e>
 108:	cb 01       	movw	r24, r22
 10a:	80 95       	com	r24
 10c:	84 23       	and	r24, r20
 10e:	88 bb       	out	0x18, r24	; 24
 110:	08 95       	ret
 112:	61 30       	cpi	r22, 0x01	; 1
 114:	69 f4       	brne	.+26     	; 0x130 <DIO_Write+0xae>
 116:	45 b3       	in	r20, 0x15	; 21
 118:	21 e0       	ldi	r18, 0x01	; 1
 11a:	30 e0       	ldi	r19, 0x00	; 0
 11c:	b9 01       	movw	r22, r18
 11e:	02 c0       	rjmp	.+4      	; 0x124 <DIO_Write+0xa2>
 120:	66 0f       	add	r22, r22
 122:	77 1f       	adc	r23, r23
 124:	8a 95       	dec	r24
 126:	e2 f7       	brpl	.-8      	; 0x120 <DIO_Write+0x9e>
 128:	cb 01       	movw	r24, r22
 12a:	84 2b       	or	r24, r20
 12c:	85 bb       	out	0x15, r24	; 21
 12e:	08 95       	ret
 130:	45 b3       	in	r20, 0x15	; 21
 132:	21 e0       	ldi	r18, 0x01	; 1
 134:	30 e0       	ldi	r19, 0x00	; 0
 136:	b9 01       	movw	r22, r18
 138:	02 c0       	rjmp	.+4      	; 0x13e <DIO_Write+0xbc>
 13a:	66 0f       	add	r22, r22
 13c:	77 1f       	adc	r23, r23
 13e:	8a 95       	dec	r24
 140:	e2 f7       	brpl	.-8      	; 0x13a <DIO_Write+0xb8>
 142:	cb 01       	movw	r24, r22
 144:	80 95       	com	r24
 146:	84 23       	and	r24, r20
 148:	85 bb       	out	0x15, r24	; 21
 14a:	08 95       	ret
 14c:	61 30       	cpi	r22, 0x01	; 1
 14e:	69 f4       	brne	.+26     	; 0x16a <DIO_Write+0xe8>
 150:	42 b3       	in	r20, 0x12	; 18
 152:	21 e0       	ldi	r18, 0x01	; 1
 154:	30 e0       	ldi	r19, 0x00	; 0
 156:	b9 01       	movw	r22, r18
 158:	02 c0       	rjmp	.+4      	; 0x15e <DIO_Write+0xdc>
 15a:	66 0f       	add	r22, r22
 15c:	77 1f       	adc	r23, r23
 15e:	8a 95       	dec	r24
 160:	e2 f7       	brpl	.-8      	; 0x15a <DIO_Write+0xd8>
 162:	cb 01       	movw	r24, r22
 164:	84 2b       	or	r24, r20
 166:	82 bb       	out	0x12, r24	; 18
 168:	08 95       	ret
 16a:	42 b3       	in	r20, 0x12	; 18
 16c:	21 e0       	ldi	r18, 0x01	; 1
 16e:	30 e0       	ldi	r19, 0x00	; 0
 170:	b9 01       	movw	r22, r18
 172:	02 c0       	rjmp	.+4      	; 0x178 <DIO_Write+0xf6>
 174:	66 0f       	add	r22, r22
 176:	77 1f       	adc	r23, r23
 178:	8a 95       	dec	r24
 17a:	e2 f7       	brpl	.-8      	; 0x174 <DIO_Write+0xf2>
 17c:	cb 01       	movw	r24, r22
 17e:	80 95       	com	r24
 180:	84 23       	and	r24, r20
 182:	82 bb       	out	0x12, r24	; 18
 184:	08 95       	ret

00000186 <DIO_writePort>:


void DIO_writePort(DIO_Ports Portx,Uint8 data)
{
	switch(Portx)
 186:	81 30       	cpi	r24, 0x01	; 1
 188:	41 f0       	breq	.+16     	; 0x19a <DIO_writePort+0x14>
 18a:	28 f0       	brcs	.+10     	; 0x196 <DIO_writePort+0x10>
 18c:	82 30       	cpi	r24, 0x02	; 2
 18e:	39 f0       	breq	.+14     	; 0x19e <DIO_writePort+0x18>
 190:	83 30       	cpi	r24, 0x03	; 3
 192:	39 f0       	breq	.+14     	; 0x1a2 <DIO_writePort+0x1c>
 194:	08 95       	ret
	{
		case DIO_PortA:
		PORTA =data;
 196:	6b bb       	out	0x1b, r22	; 27
		break;
 198:	08 95       	ret
		
		case DIO_PortB:
		PORTB =data;
 19a:	68 bb       	out	0x18, r22	; 24
		break;
 19c:	08 95       	ret

		case DIO_PortC:
		PORTC =data;
 19e:	65 bb       	out	0x15, r22	; 21
		break;
 1a0:	08 95       	ret

		case DIO_PortD:
		PORTD =data;
 1a2:	62 bb       	out	0x12, r22	; 18
 1a4:	08 95       	ret

000001a6 <DIO_init>:
void DIO_init(void)
{
	DIO_Ports Portx;
	DIO_Channels channelpos;
	Uint8 count=0;
	for(count=DIO_ChannelA0;count<Pincount;count++)
 1a6:	80 e0       	ldi	r24, 0x00	; 0
 1a8:	a0 c0       	rjmp	.+320    	; 0x2ea <DIO_init+0x144>
	{
		Portx=count/8;
 1aa:	98 2f       	mov	r25, r24
 1ac:	96 95       	lsr	r25
 1ae:	96 95       	lsr	r25
 1b0:	96 95       	lsr	r25
		channelpos=count%8;
 1b2:	28 2f       	mov	r18, r24
 1b4:	27 70       	andi	r18, 0x07	; 7
		switch(Portx)
 1b6:	91 30       	cpi	r25, 0x01	; 1
 1b8:	61 f1       	breq	.+88     	; 0x212 <DIO_init+0x6c>
 1ba:	38 f0       	brcs	.+14     	; 0x1ca <DIO_init+0x24>
 1bc:	92 30       	cpi	r25, 0x02	; 2
 1be:	09 f4       	brne	.+2      	; 0x1c2 <DIO_init+0x1c>
 1c0:	4c c0       	rjmp	.+152    	; 0x25a <DIO_init+0xb4>
 1c2:	93 30       	cpi	r25, 0x03	; 3
 1c4:	09 f4       	brne	.+2      	; 0x1c8 <DIO_init+0x22>
 1c6:	6d c0       	rjmp	.+218    	; 0x2a2 <DIO_init+0xfc>
 1c8:	8f c0       	rjmp	.+286    	; 0x2e8 <DIO_init+0x142>
		{
			case DIO_PortA:
			if(pinconfig[count].PinDir==Output)
 1ca:	e8 2f       	mov	r30, r24
 1cc:	f0 e0       	ldi	r31, 0x00	; 0
 1ce:	ee 0f       	add	r30, r30
 1d0:	ff 1f       	adc	r31, r31
 1d2:	e0 5a       	subi	r30, 0xA0	; 160
 1d4:	ff 4f       	sbci	r31, 0xFF	; 255
 1d6:	90 81       	ld	r25, Z
 1d8:	91 30       	cpi	r25, 0x01	; 1
 1da:	69 f4       	brne	.+26     	; 0x1f6 <DIO_init+0x50>
			{
				Set_Bit(DDRA,channelpos);
 1dc:	9a b3       	in	r25, 0x1a	; 26
 1de:	41 e0       	ldi	r20, 0x01	; 1
 1e0:	50 e0       	ldi	r21, 0x00	; 0
 1e2:	ba 01       	movw	r22, r20
 1e4:	02 c0       	rjmp	.+4      	; 0x1ea <DIO_init+0x44>
 1e6:	66 0f       	add	r22, r22
 1e8:	77 1f       	adc	r23, r23
 1ea:	2a 95       	dec	r18
 1ec:	e2 f7       	brpl	.-8      	; 0x1e6 <DIO_init+0x40>
 1ee:	9b 01       	movw	r18, r22
 1f0:	29 2b       	or	r18, r25
 1f2:	2a bb       	out	0x1a, r18	; 26
 1f4:	79 c0       	rjmp	.+242    	; 0x2e8 <DIO_init+0x142>
			}
			else
			{
				Clear_Bit(DDRA,channelpos);
 1f6:	9a b3       	in	r25, 0x1a	; 26
 1f8:	41 e0       	ldi	r20, 0x01	; 1
 1fa:	50 e0       	ldi	r21, 0x00	; 0
 1fc:	ba 01       	movw	r22, r20
 1fe:	02 c0       	rjmp	.+4      	; 0x204 <DIO_init+0x5e>
 200:	66 0f       	add	r22, r22
 202:	77 1f       	adc	r23, r23
 204:	2a 95       	dec	r18
 206:	e2 f7       	brpl	.-8      	; 0x200 <DIO_init+0x5a>
 208:	9b 01       	movw	r18, r22
 20a:	20 95       	com	r18
 20c:	29 23       	and	r18, r25
 20e:	2a bb       	out	0x1a, r18	; 26
 210:	6b c0       	rjmp	.+214    	; 0x2e8 <DIO_init+0x142>
			}
			break;
			
			case DIO_PortB:
			if(pinconfig[count].PinDir==Output)
 212:	e8 2f       	mov	r30, r24
 214:	f0 e0       	ldi	r31, 0x00	; 0
 216:	ee 0f       	add	r30, r30
 218:	ff 1f       	adc	r31, r31
 21a:	e0 5a       	subi	r30, 0xA0	; 160
 21c:	ff 4f       	sbci	r31, 0xFF	; 255
 21e:	90 81       	ld	r25, Z
 220:	91 30       	cpi	r25, 0x01	; 1
 222:	69 f4       	brne	.+26     	; 0x23e <DIO_init+0x98>
			{
				Set_Bit(DDRB,channelpos);
 224:	97 b3       	in	r25, 0x17	; 23
 226:	41 e0       	ldi	r20, 0x01	; 1
 228:	50 e0       	ldi	r21, 0x00	; 0
 22a:	ba 01       	movw	r22, r20
 22c:	02 c0       	rjmp	.+4      	; 0x232 <DIO_init+0x8c>
 22e:	66 0f       	add	r22, r22
 230:	77 1f       	adc	r23, r23
 232:	2a 95       	dec	r18
 234:	e2 f7       	brpl	.-8      	; 0x22e <DIO_init+0x88>
 236:	9b 01       	movw	r18, r22
 238:	29 2b       	or	r18, r25
 23a:	27 bb       	out	0x17, r18	; 23
 23c:	55 c0       	rjmp	.+170    	; 0x2e8 <DIO_init+0x142>
			}
			else
			{
				Clear_Bit(DDRB,channelpos);
 23e:	97 b3       	in	r25, 0x17	; 23
 240:	41 e0       	ldi	r20, 0x01	; 1
 242:	50 e0       	ldi	r21, 0x00	; 0
 244:	ba 01       	movw	r22, r20
 246:	02 c0       	rjmp	.+4      	; 0x24c <DIO_init+0xa6>
 248:	66 0f       	add	r22, r22
 24a:	77 1f       	adc	r23, r23
 24c:	2a 95       	dec	r18
 24e:	e2 f7       	brpl	.-8      	; 0x248 <DIO_init+0xa2>
 250:	9b 01       	movw	r18, r22
 252:	20 95       	com	r18
 254:	29 23       	and	r18, r25
 256:	27 bb       	out	0x17, r18	; 23
 258:	47 c0       	rjmp	.+142    	; 0x2e8 <DIO_init+0x142>
			}
			break;
			
			case DIO_PortC:
			if(pinconfig[count].PinDir==Output)
 25a:	e8 2f       	mov	r30, r24
 25c:	f0 e0       	ldi	r31, 0x00	; 0
 25e:	ee 0f       	add	r30, r30
 260:	ff 1f       	adc	r31, r31
 262:	e0 5a       	subi	r30, 0xA0	; 160
 264:	ff 4f       	sbci	r31, 0xFF	; 255
 266:	90 81       	ld	r25, Z
 268:	91 30       	cpi	r25, 0x01	; 1
 26a:	69 f4       	brne	.+26     	; 0x286 <DIO_init+0xe0>
			{
				Set_Bit(DDRC,channelpos);
 26c:	94 b3       	in	r25, 0x14	; 20
 26e:	41 e0       	ldi	r20, 0x01	; 1
 270:	50 e0       	ldi	r21, 0x00	; 0
 272:	ba 01       	movw	r22, r20
 274:	02 c0       	rjmp	.+4      	; 0x27a <DIO_init+0xd4>
 276:	66 0f       	add	r22, r22
 278:	77 1f       	adc	r23, r23
 27a:	2a 95       	dec	r18
 27c:	e2 f7       	brpl	.-8      	; 0x276 <DIO_init+0xd0>
 27e:	9b 01       	movw	r18, r22
 280:	29 2b       	or	r18, r25
 282:	24 bb       	out	0x14, r18	; 20
 284:	31 c0       	rjmp	.+98     	; 0x2e8 <DIO_init+0x142>
			}
			else
			{
				Clear_Bit(DDRC,channelpos);
 286:	94 b3       	in	r25, 0x14	; 20
 288:	41 e0       	ldi	r20, 0x01	; 1
 28a:	50 e0       	ldi	r21, 0x00	; 0
 28c:	ba 01       	movw	r22, r20
 28e:	02 c0       	rjmp	.+4      	; 0x294 <DIO_init+0xee>
 290:	66 0f       	add	r22, r22
 292:	77 1f       	adc	r23, r23
 294:	2a 95       	dec	r18
 296:	e2 f7       	brpl	.-8      	; 0x290 <DIO_init+0xea>
 298:	9b 01       	movw	r18, r22
 29a:	20 95       	com	r18
 29c:	29 23       	and	r18, r25
 29e:	24 bb       	out	0x14, r18	; 20
 2a0:	23 c0       	rjmp	.+70     	; 0x2e8 <DIO_init+0x142>
			}
			break;
			
			case DIO_PortD:
			if(pinconfig[count].PinDir==Output)
 2a2:	e8 2f       	mov	r30, r24
 2a4:	f0 e0       	ldi	r31, 0x00	; 0
 2a6:	ee 0f       	add	r30, r30
 2a8:	ff 1f       	adc	r31, r31
 2aa:	e0 5a       	subi	r30, 0xA0	; 160
 2ac:	ff 4f       	sbci	r31, 0xFF	; 255
 2ae:	90 81       	ld	r25, Z
 2b0:	91 30       	cpi	r25, 0x01	; 1
 2b2:	69 f4       	brne	.+26     	; 0x2ce <DIO_init+0x128>
			{
				Set_Bit(DDRD,channelpos);
 2b4:	91 b3       	in	r25, 0x11	; 17
 2b6:	41 e0       	ldi	r20, 0x01	; 1
 2b8:	50 e0       	ldi	r21, 0x00	; 0
 2ba:	ba 01       	movw	r22, r20
 2bc:	02 c0       	rjmp	.+4      	; 0x2c2 <DIO_init+0x11c>
 2be:	66 0f       	add	r22, r22
 2c0:	77 1f       	adc	r23, r23
 2c2:	2a 95       	dec	r18
 2c4:	e2 f7       	brpl	.-8      	; 0x2be <DIO_init+0x118>
 2c6:	9b 01       	movw	r18, r22
 2c8:	29 2b       	or	r18, r25
 2ca:	21 bb       	out	0x11, r18	; 17
 2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <DIO_init+0x142>
			}
			else
			{
				Clear_Bit(DDRD,channelpos);
 2ce:	91 b3       	in	r25, 0x11	; 17
 2d0:	41 e0       	ldi	r20, 0x01	; 1
 2d2:	50 e0       	ldi	r21, 0x00	; 0
 2d4:	ba 01       	movw	r22, r20
 2d6:	02 c0       	rjmp	.+4      	; 0x2dc <DIO_init+0x136>
 2d8:	66 0f       	add	r22, r22
 2da:	77 1f       	adc	r23, r23
 2dc:	2a 95       	dec	r18
 2de:	e2 f7       	brpl	.-8      	; 0x2d8 <DIO_init+0x132>
 2e0:	9b 01       	movw	r18, r22
 2e2:	20 95       	com	r18
 2e4:	29 23       	and	r18, r25
 2e6:	21 bb       	out	0x11, r18	; 17
void DIO_init(void)
{
	DIO_Ports Portx;
	DIO_Channels channelpos;
	Uint8 count=0;
	for(count=DIO_ChannelA0;count<Pincount;count++)
 2e8:	8f 5f       	subi	r24, 0xFF	; 255
 2ea:	80 32       	cpi	r24, 0x20	; 32
 2ec:	08 f4       	brcc	.+2      	; 0x2f0 <DIO_init+0x14a>
 2ee:	5d cf       	rjmp	.-326    	; 0x1aa <DIO_init+0x4>
			
			
			
		}
	}
 2f0:	08 95       	ret

000002f2 <LCD_Commend>:
 */ 

#include "LCD.h"

void LCD_Commend(Uint8 cmd)
{
 2f2:	cf 93       	push	r28
 2f4:	c8 2f       	mov	r28, r24
	Uint8 Send_cmd;
	Send_cmd = ((LCD_Data_Port & (0x0F))| (cmd & 0xF0));
 2f6:	68 2f       	mov	r22, r24
 2f8:	60 7f       	andi	r22, 0xF0	; 240
	DIO_writePort(LCD_Data_Port,Send_cmd);
 2fa:	80 e0       	ldi	r24, 0x00	; 0
 2fc:	0e 94 c3 00 	call	0x186	; 0x186 <DIO_writePort>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 300:	8f e3       	ldi	r24, 0x3F	; 63
 302:	9f e1       	ldi	r25, 0x1F	; 31
 304:	01 97       	sbiw	r24, 0x01	; 1
 306:	f1 f7       	brne	.-4      	; 0x304 <LCD_Commend+0x12>
 308:	00 c0       	rjmp	.+0      	; 0x30a <LCD_Commend+0x18>
 30a:	00 00       	nop
	_delay_ms(2);
	DIO_Write(LCD_RS,STD_Low);
 30c:	60 e0       	ldi	r22, 0x00	; 0
 30e:	89 e0       	ldi	r24, 0x09	; 9
 310:	0e 94 41 00 	call	0x82	; 0x82 <DIO_Write>
	DIO_Write(LCD_E,STD_Low);
 314:	60 e0       	ldi	r22, 0x00	; 0
 316:	8b e0       	ldi	r24, 0x0B	; 11
 318:	0e 94 41 00 	call	0x82	; 0x82 <DIO_Write>
 31c:	8f e3       	ldi	r24, 0x3F	; 63
 31e:	9f e1       	ldi	r25, 0x1F	; 31
 320:	01 97       	sbiw	r24, 0x01	; 1
 322:	f1 f7       	brne	.-4      	; 0x320 <LCD_Commend+0x2e>
 324:	00 c0       	rjmp	.+0      	; 0x326 <LCD_Commend+0x34>
 326:	00 00       	nop
	_delay_ms(2);
	DIO_Write(LCD_E,STD_High);
 328:	61 e0       	ldi	r22, 0x01	; 1
 32a:	8b e0       	ldi	r24, 0x0B	; 11
 32c:	0e 94 41 00 	call	0x82	; 0x82 <DIO_Write>
	
	Send_cmd = ((LCD_Data_Port & (0x0F)) | (cmd<<4));
 330:	6c 2f       	mov	r22, r28
 332:	62 95       	swap	r22
 334:	60 7f       	andi	r22, 0xF0	; 240
	DIO_writePort(LCD_Data_Port,Send_cmd);
 336:	80 e0       	ldi	r24, 0x00	; 0
 338:	0e 94 c3 00 	call	0x186	; 0x186 <DIO_writePort>
	DIO_Write(LCD_RS,STD_Low);
 33c:	60 e0       	ldi	r22, 0x00	; 0
 33e:	89 e0       	ldi	r24, 0x09	; 9
 340:	0e 94 41 00 	call	0x82	; 0x82 <DIO_Write>
	DIO_Write(LCD_E,STD_Low);
 344:	60 e0       	ldi	r22, 0x00	; 0
 346:	8b e0       	ldi	r24, 0x0B	; 11
 348:	0e 94 41 00 	call	0x82	; 0x82 <DIO_Write>
 34c:	8f e3       	ldi	r24, 0x3F	; 63
 34e:	9f e1       	ldi	r25, 0x1F	; 31
 350:	01 97       	sbiw	r24, 0x01	; 1
 352:	f1 f7       	brne	.-4      	; 0x350 <LCD_Commend+0x5e>
 354:	00 c0       	rjmp	.+0      	; 0x356 <LCD_Commend+0x64>
 356:	00 00       	nop
	_delay_ms(2);
	DIO_Write(LCD_E,STD_High);
 358:	61 e0       	ldi	r22, 0x01	; 1
 35a:	8b e0       	ldi	r24, 0x0B	; 11
 35c:	0e 94 41 00 	call	0x82	; 0x82 <DIO_Write>
 360:	8f e3       	ldi	r24, 0x3F	; 63
 362:	9f e1       	ldi	r25, 0x1F	; 31
 364:	01 97       	sbiw	r24, 0x01	; 1
 366:	f1 f7       	brne	.-4      	; 0x364 <LCD_Commend+0x72>
 368:	00 c0       	rjmp	.+0      	; 0x36a <LCD_Commend+0x78>
 36a:	00 00       	nop
	_delay_ms(2);
}
 36c:	cf 91       	pop	r28
 36e:	08 95       	ret

00000370 <LCD_init>:
void LCD_init(void)
{
	DIO_Write(LCD_RW,STD_Low); // write
 370:	60 e0       	ldi	r22, 0x00	; 0
 372:	8a e0       	ldi	r24, 0x0A	; 10
 374:	0e 94 41 00 	call	0x82	; 0x82 <DIO_Write>
 378:	2f ef       	ldi	r18, 0xFF	; 255
 37a:	89 ef       	ldi	r24, 0xF9	; 249
 37c:	90 e0       	ldi	r25, 0x00	; 0
 37e:	21 50       	subi	r18, 0x01	; 1
 380:	80 40       	sbci	r24, 0x00	; 0
 382:	90 40       	sbci	r25, 0x00	; 0
 384:	e1 f7       	brne	.-8      	; 0x37e <LCD_init+0xe>
 386:	00 c0       	rjmp	.+0      	; 0x388 <LCD_init+0x18>
 388:	00 00       	nop
	_delay_ms(20);
	LCD_Commend(0x33);
 38a:	83 e3       	ldi	r24, 0x33	; 51
 38c:	0e 94 79 01 	call	0x2f2	; 0x2f2 <LCD_Commend>
 390:	8f e3       	ldi	r24, 0x3F	; 63
 392:	9f e1       	ldi	r25, 0x1F	; 31
 394:	01 97       	sbiw	r24, 0x01	; 1
 396:	f1 f7       	brne	.-4      	; 0x394 <LCD_init+0x24>
 398:	00 c0       	rjmp	.+0      	; 0x39a <LCD_init+0x2a>
 39a:	00 00       	nop
	_delay_ms(2);
	LCD_Commend(0x32);
 39c:	82 e3       	ldi	r24, 0x32	; 50
 39e:	0e 94 79 01 	call	0x2f2	; 0x2f2 <LCD_Commend>
	LCD_Commend(0x28);
 3a2:	88 e2       	ldi	r24, 0x28	; 40
 3a4:	0e 94 79 01 	call	0x2f2	; 0x2f2 <LCD_Commend>
	LCD_Commend(0x06);
 3a8:	86 e0       	ldi	r24, 0x06	; 6
 3aa:	0e 94 79 01 	call	0x2f2	; 0x2f2 <LCD_Commend>
	LCD_Commend(0x0C);
 3ae:	8c e0       	ldi	r24, 0x0C	; 12
 3b0:	0e 94 79 01 	call	0x2f2	; 0x2f2 <LCD_Commend>
	LCD_Commend(0x01);
 3b4:	81 e0       	ldi	r24, 0x01	; 1
 3b6:	0e 94 79 01 	call	0x2f2	; 0x2f2 <LCD_Commend>
 3ba:	8f e9       	ldi	r24, 0x9F	; 159
 3bc:	9f e0       	ldi	r25, 0x0F	; 15
 3be:	01 97       	sbiw	r24, 0x01	; 1
 3c0:	f1 f7       	brne	.-4      	; 0x3be <LCD_init+0x4e>
 3c2:	00 c0       	rjmp	.+0      	; 0x3c4 <LCD_init+0x54>
 3c4:	00 00       	nop
 3c6:	08 95       	ret

000003c8 <LCD_Char>:
	_delay_ms(1);
	
}
void LCD_Char(Uint8 data)
{
 3c8:	cf 93       	push	r28
 3ca:	c8 2f       	mov	r28, r24
	Uint8 Send_Data;
	Send_Data = ((LCD_Data_Port & (0x0F)) | (data & 0xF0));
 3cc:	68 2f       	mov	r22, r24
 3ce:	60 7f       	andi	r22, 0xF0	; 240
	DIO_writePort(LCD_Data_Port,Send_Data);
 3d0:	80 e0       	ldi	r24, 0x00	; 0
 3d2:	0e 94 c3 00 	call	0x186	; 0x186 <DIO_writePort>
	DIO_Write(LCD_RS,STD_High);
 3d6:	61 e0       	ldi	r22, 0x01	; 1
 3d8:	89 e0       	ldi	r24, 0x09	; 9
 3da:	0e 94 41 00 	call	0x82	; 0x82 <DIO_Write>
	DIO_Write(LCD_E,STD_Low);
 3de:	60 e0       	ldi	r22, 0x00	; 0
 3e0:	8b e0       	ldi	r24, 0x0B	; 11
 3e2:	0e 94 41 00 	call	0x82	; 0x82 <DIO_Write>
 3e6:	8f e3       	ldi	r24, 0x3F	; 63
 3e8:	9f e1       	ldi	r25, 0x1F	; 31
 3ea:	01 97       	sbiw	r24, 0x01	; 1
 3ec:	f1 f7       	brne	.-4      	; 0x3ea <LCD_Char+0x22>
 3ee:	00 c0       	rjmp	.+0      	; 0x3f0 <LCD_Char+0x28>
 3f0:	00 00       	nop
	_delay_ms(2);
	DIO_Write(LCD_E,STD_High);
 3f2:	61 e0       	ldi	r22, 0x01	; 1
 3f4:	8b e0       	ldi	r24, 0x0B	; 11
 3f6:	0e 94 41 00 	call	0x82	; 0x82 <DIO_Write>
 3fa:	8f e3       	ldi	r24, 0x3F	; 63
 3fc:	9f e1       	ldi	r25, 0x1F	; 31
 3fe:	01 97       	sbiw	r24, 0x01	; 1
 400:	f1 f7       	brne	.-4      	; 0x3fe <LCD_Char+0x36>
 402:	00 c0       	rjmp	.+0      	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
 404:	00 00       	nop
	_delay_ms(2);
	
	Send_Data = ((LCD_Data_Port & (0x0F)) | (data<<4));
 406:	6c 2f       	mov	r22, r28
 408:	62 95       	swap	r22
 40a:	60 7f       	andi	r22, 0xF0	; 240
	DIO_writePort(LCD_Data_Port,Send_Data);
 40c:	80 e0       	ldi	r24, 0x00	; 0
 40e:	0e 94 c3 00 	call	0x186	; 0x186 <DIO_writePort>
	DIO_Write(LCD_RS,STD_High);
 412:	61 e0       	ldi	r22, 0x01	; 1
 414:	89 e0       	ldi	r24, 0x09	; 9
 416:	0e 94 41 00 	call	0x82	; 0x82 <DIO_Write>
	DIO_Write(LCD_E,STD_Low);
 41a:	60 e0       	ldi	r22, 0x00	; 0
 41c:	8b e0       	ldi	r24, 0x0B	; 11
 41e:	0e 94 41 00 	call	0x82	; 0x82 <DIO_Write>
 422:	8f e3       	ldi	r24, 0x3F	; 63
 424:	9f e1       	ldi	r25, 0x1F	; 31
 426:	01 97       	sbiw	r24, 0x01	; 1
 428:	f1 f7       	brne	.-4      	; 0x426 <__EEPROM_REGION_LENGTH__+0x26>
 42a:	00 c0       	rjmp	.+0      	; 0x42c <__EEPROM_REGION_LENGTH__+0x2c>
 42c:	00 00       	nop
	_delay_ms(2);
	DIO_Write(LCD_E,STD_High);
 42e:	61 e0       	ldi	r22, 0x01	; 1
 430:	8b e0       	ldi	r24, 0x0B	; 11
 432:	0e 94 41 00 	call	0x82	; 0x82 <DIO_Write>
 436:	8f e3       	ldi	r24, 0x3F	; 63
 438:	9f e1       	ldi	r25, 0x1F	; 31
 43a:	01 97       	sbiw	r24, 0x01	; 1
 43c:	f1 f7       	brne	.-4      	; 0x43a <__EEPROM_REGION_LENGTH__+0x3a>
 43e:	00 c0       	rjmp	.+0      	; 0x440 <__EEPROM_REGION_LENGTH__+0x40>
 440:	00 00       	nop
	_delay_ms(2);
}
 442:	cf 91       	pop	r28
 444:	08 95       	ret

00000446 <main>:
#include "TWI.h"


int main(void)
{
	TWI_Init(0x05);
 446:	85 e0       	ldi	r24, 0x05	; 5
 448:	0e 94 48 02 	call	0x490	; 0x490 <TWI_Init>
	DIO_init();
 44c:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <DIO_init>
	LCD_init();
 450:	0e 94 b8 01 	call	0x370	; 0x370 <LCD_init>
	
	Uint8 data;
	Uint8 check;
	DDRC |= (1<<2);
 454:	84 b3       	in	r24, 0x14	; 20
 456:	84 60       	ori	r24, 0x04	; 4
 458:	84 bb       	out	0x14, r24	; 20
	PORTC &=~ (1<<2);
 45a:	85 b3       	in	r24, 0x15	; 21
 45c:	8b 7f       	andi	r24, 0xFB	; 251
 45e:	85 bb       	out	0x15, r24	; 21
 460:	2f ef       	ldi	r18, 0xFF	; 255
 462:	83 ed       	ldi	r24, 0xD3	; 211
 464:	90 e3       	ldi	r25, 0x30	; 48
 466:	21 50       	subi	r18, 0x01	; 1
 468:	80 40       	sbci	r24, 0x00	; 0
 46a:	90 40       	sbci	r25, 0x00	; 0
 46c:	e1 f7       	brne	.-8      	; 0x466 <main+0x20>
 46e:	00 c0       	rjmp	.+0      	; 0x470 <main+0x2a>
 470:	00 00       	nop
	
	
	while (1)
	{
		
		EEPROM_Write(2,0x01);
 472:	61 e0       	ldi	r22, 0x01	; 1
 474:	70 e0       	ldi	r23, 0x00	; 0
 476:	82 e0       	ldi	r24, 0x02	; 2
 478:	0e 94 66 02 	call	0x4cc	; 0x4cc <EEPROM_Write>
		check = EEPROM_Read(0x01);
 47c:	81 e0       	ldi	r24, 0x01	; 1
 47e:	0e 94 8c 02 	call	0x518	; 0x518 <EEPROM_Read>
 482:	f7 cf       	rjmp	.-18     	; 0x472 <main+0x2c>

00000484 <TWI_stop>:
Uint8 TWIReadACK(void)
{
	TWCR = (1<<DIO_TWINT) | (1<<DIO_TWEN) | (1<<DIO_TWEA);
	while(!(Get_Bit(TWCR,DIO_TWINT)));
	return TWI_Status();
}
 484:	86 b7       	in	r24, 0x36	; 54
 486:	84 69       	ori	r24, 0x94	; 148
 488:	86 bf       	out	0x36, r24	; 54
 48a:	08 95       	ret

0000048c <TWI_Address>:
 48c:	82 b9       	out	0x02, r24	; 2
 48e:	08 95       	ret

00000490 <TWI_Init>:
 490:	10 b8       	out	0x00, r1	; 0
 492:	0e 94 46 02 	call	0x48c	; 0x48c <TWI_Address>
 496:	86 b7       	in	r24, 0x36	; 54
 498:	84 68       	ori	r24, 0x84	; 132
 49a:	86 bf       	out	0x36, r24	; 54
 49c:	08 95       	ret

0000049e <TWI_Status>:
 49e:	81 b1       	in	r24, 0x01	; 1
 4a0:	88 7f       	andi	r24, 0xF8	; 248
 4a2:	08 95       	ret

000004a4 <TWI_start>:
 4a4:	86 b7       	in	r24, 0x36	; 54
 4a6:	84 6a       	ori	r24, 0xA4	; 164
 4a8:	86 bf       	out	0x36, r24	; 54
 4aa:	06 b6       	in	r0, 0x36	; 54
 4ac:	07 fe       	sbrs	r0, 7
 4ae:	fd cf       	rjmp	.-6      	; 0x4aa <TWI_start+0x6>
 4b0:	0e 94 4f 02 	call	0x49e	; 0x49e <TWI_Status>
 4b4:	08 95       	ret

000004b6 <TWI_Data>:
 4b6:	83 b9       	out	0x03, r24	; 3
 4b8:	84 e8       	ldi	r24, 0x84	; 132
 4ba:	86 bf       	out	0x36, r24	; 54
 4bc:	06 b6       	in	r0, 0x36	; 54
 4be:	07 fe       	sbrs	r0, 7
 4c0:	fd cf       	rjmp	.-6      	; 0x4bc <TWI_Data+0x6>
 4c2:	0e 94 4f 02 	call	0x49e	; 0x49e <TWI_Status>
 4c6:	08 95       	ret

000004c8 <TWI_Read>:
 4c8:	83 b1       	in	r24, 0x03	; 3
 4ca:	08 95       	ret

000004cc <EEPROM_Write>:


void EEPROM_Write(Uint8 data,Uint16 u16addr)
{
 4cc:	1f 93       	push	r17
 4ce:	cf 93       	push	r28
 4d0:	df 93       	push	r29
 4d2:	18 2f       	mov	r17, r24
 4d4:	eb 01       	movw	r28, r22
	
	
	if (TWI_start()==0x08)
 4d6:	0e 94 52 02 	call	0x4a4	; 0x4a4 <TWI_start>
 4da:	88 30       	cpi	r24, 0x08	; 8
 4dc:	c9 f4       	brne	.+50     	; 0x510 <EEPROM_Write+0x44>
	
	{	
	
		if (TWI_Data((0b10100000)|(Uint8)((u16addr & 0x0700)>>7))==0x18)
 4de:	ce 01       	movw	r24, r28
 4e0:	88 27       	eor	r24, r24
 4e2:	97 70       	andi	r25, 0x07	; 7
 4e4:	88 0f       	add	r24, r24
 4e6:	89 2f       	mov	r24, r25
 4e8:	88 1f       	adc	r24, r24
 4ea:	99 0b       	sbc	r25, r25
 4ec:	91 95       	neg	r25
 4ee:	80 6a       	ori	r24, 0xA0	; 160
 4f0:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <TWI_Data>
 4f4:	88 31       	cpi	r24, 0x18	; 24
 4f6:	61 f4       	brne	.+24     	; 0x510 <EEPROM_Write+0x44>
		{
			
			if (TWI_Data((Uint8)(u16addr))==0x28)
 4f8:	8c 2f       	mov	r24, r28
 4fa:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <TWI_Data>
 4fe:	88 32       	cpi	r24, 0x28	; 40
 500:	39 f4       	brne	.+14     	; 0x510 <EEPROM_Write+0x44>
			{
				
				if (TWI_Data(data)==0x28)
 502:	81 2f       	mov	r24, r17
 504:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <TWI_Data>
 508:	88 32       	cpi	r24, 0x28	; 40
 50a:	11 f4       	brne	.+4      	; 0x510 <EEPROM_Write+0x44>
				{    
					
					TWI_stop();
 50c:	0e 94 42 02 	call	0x484	; 0x484 <TWI_stop>
					
				}
			}
		}
	}
 }
 510:	df 91       	pop	r29
 512:	cf 91       	pop	r28
 514:	1f 91       	pop	r17
 516:	08 95       	ret

00000518 <EEPROM_Read>:

Uint8 EEPROM_Read(Uint8 u16addr)
{
 518:	cf 93       	push	r28
 51a:	c8 2f       	mov	r28, r24
	Uint8 check = 0 ;
	
	//Uint8 deviceaddr=0X0A;
	if (TWI_start()==0x08)
 51c:	0e 94 52 02 	call	0x4a4	; 0x4a4 <TWI_start>
 520:	88 30       	cpi	r24, 0x08	; 8
 522:	59 f5       	brne	.+86     	; 0x57a <EEPROM_Read+0x62>
	
	{
		LCD_Char('k');
 524:	8b e6       	ldi	r24, 0x6B	; 107
 526:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <LCD_Char>
		
		if (TWI_Data((0b10100000)|(Uint8)((u16addr & 0x0700)>>7))==0x18)
 52a:	80 ea       	ldi	r24, 0xA0	; 160
 52c:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <TWI_Data>
 530:	88 31       	cpi	r24, 0x18	; 24
 532:	29 f5       	brne	.+74     	; 0x57e <EEPROM_Read+0x66>
		{
			LCD_Char('f');
 534:	86 e6       	ldi	r24, 0x66	; 102
 536:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <LCD_Char>
			

			if (TWI_Data((Uint8)(u16addr))==0x28)
 53a:	8c 2f       	mov	r24, r28
 53c:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <TWI_Data>
 540:	88 32       	cpi	r24, 0x28	; 40
 542:	f9 f4       	brne	.+62     	; 0x582 <EEPROM_Read+0x6a>
			{
				LCD_Char('s');
 544:	83 e7       	ldi	r24, 0x73	; 115
 546:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <LCD_Char>
				
				if (TWI_start()==0x10)
 54a:	0e 94 52 02 	call	0x4a4	; 0x4a4 <TWI_start>
 54e:	80 31       	cpi	r24, 0x10	; 16
 550:	d1 f4       	brne	.+52     	; 0x586 <EEPROM_Read+0x6e>
				{
					LCD_Char('y');
 552:	89 e7       	ldi	r24, 0x79	; 121
 554:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <LCD_Char>
					
					if (TWI_Data(((0b10100000)|((Uint8)((u16addr & 0x0700)>>7))|1))==0x40)
 558:	81 ea       	ldi	r24, 0xA1	; 161
 55a:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <TWI_Data>
 55e:	80 34       	cpi	r24, 0x40	; 64
 560:	a1 f4       	brne	.+40     	; 0x58a <EEPROM_Read+0x72>
					{
						LCD_Char('v');
 562:	86 e7       	ldi	r24, 0x76	; 118
 564:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <LCD_Char>
						
						check=TWI_Read();
 568:	0e 94 64 02 	call	0x4c8	; 0x4c8 <TWI_Read>
 56c:	c8 2f       	mov	r28, r24
						
							TWI_stop();
 56e:	0e 94 42 02 	call	0x484	; 0x484 <TWI_stop>
							LCD_Char('w');
 572:	87 e7       	ldi	r24, 0x77	; 119
 574:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <LCD_Char>
 578:	09 c0       	rjmp	.+18     	; 0x58c <EEPROM_Read+0x74>
	}
 }

Uint8 EEPROM_Read(Uint8 u16addr)
{
	Uint8 check = 0 ;
 57a:	c0 e0       	ldi	r28, 0x00	; 0
 57c:	07 c0       	rjmp	.+14     	; 0x58c <EEPROM_Read+0x74>
 57e:	c0 e0       	ldi	r28, 0x00	; 0
 580:	05 c0       	rjmp	.+10     	; 0x58c <EEPROM_Read+0x74>
 582:	c0 e0       	ldi	r28, 0x00	; 0
 584:	03 c0       	rjmp	.+6      	; 0x58c <EEPROM_Read+0x74>
 586:	c0 e0       	ldi	r28, 0x00	; 0
 588:	01 c0       	rjmp	.+2      	; 0x58c <EEPROM_Read+0x74>
 58a:	c0 e0       	ldi	r28, 0x00	; 0
				}
			}
		}
	}
	
	LCD_Char('D');
 58c:	84 e4       	ldi	r24, 0x44	; 68
 58e:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <LCD_Char>
	return check;
 592:	8c 2f       	mov	r24, r28
 594:	cf 91       	pop	r28
 596:	08 95       	ret

00000598 <_exit>:
 598:	f8 94       	cli

0000059a <__stop_program>:
 59a:	ff cf       	rjmp	.-2      	; 0x59a <__stop_program>
