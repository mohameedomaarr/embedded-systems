
ADC_layered_arch.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000005d4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000046  00800060  000005d4  00000668  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  008000a6  008000a6  000006ae  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000006ae  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000006e0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e8  00000000  00000000  0000071c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001591  00000000  00000000  00000804  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a0a  00000000  00000000  00001d95  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000008ed  00000000  00000000  0000279f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001a0  00000000  00000000  0000308c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000745  00000000  00000000  0000322c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000bd0  00000000  00000000  00003971  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000098  00000000  00000000  00004541  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 a4 02 	jmp	0x548	; 0x548 <__vector_1>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 ed       	ldi	r30, 0xD4	; 212
  68:	f5 e0       	ldi	r31, 0x05	; 5
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 3a       	cpi	r26, 0xA6	; 166
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a6 ea       	ldi	r26, 0xA6	; 166
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a7 3a       	cpi	r26, 0xA7	; 167
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 5e 02 	call	0x4bc	; 0x4bc <main>
  8a:	0c 94 e8 02 	jmp	0x5d0	; 0x5d0 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <ADC_Init>:
 */ 


#include "ADC.h"
void ADC_Init(){
	ADMUX |= (1<<REFS0)|(1<<REFS1);
  92:	87 b1       	in	r24, 0x07	; 7
  94:	80 6c       	ori	r24, 0xC0	; 192
  96:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= (1<<ADEN)|(1<<ADATE)|(1<<ADPS0)|(1<<ADPS1)|(1<<ADPS2); 
  98:	86 b1       	in	r24, 0x06	; 6
  9a:	87 6a       	ori	r24, 0xA7	; 167
  9c:	86 b9       	out	0x06, r24	; 6
  9e:	08 95       	ret

000000a0 <ADC_read>:
	
}
unsigned short ADC_read(unsigned char channel){
	unsigned short data=0;
	ADMUX = (ADMUX & (0xE0))|(channel & (0x1F));
  a0:	97 b1       	in	r25, 0x07	; 7
  a2:	90 7e       	andi	r25, 0xE0	; 224
  a4:	8f 71       	andi	r24, 0x1F	; 31
  a6:	89 2b       	or	r24, r25
  a8:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= (1<<ADSC);
  aa:	86 b1       	in	r24, 0x06	; 6
  ac:	80 64       	ori	r24, 0x40	; 64
  ae:	86 b9       	out	0x06, r24	; 6
	while(!(ADCSRA & (1<<ADIF )));
  b0:	34 9b       	sbis	0x06, 4	; 6
  b2:	fe cf       	rjmp	.-4      	; 0xb0 <ADC_read+0x10>
	ADCSRA |= (1<<ADIF );
  b4:	86 b1       	in	r24, 0x06	; 6
  b6:	80 61       	ori	r24, 0x10	; 16
  b8:	86 b9       	out	0x06, r24	; 6
	data = ADCL;
  ba:	24 b1       	in	r18, 0x04	; 4
	data |= (unsigned short)(ADCH<<8);
  bc:	35 b1       	in	r19, 0x05	; 5
  be:	80 e0       	ldi	r24, 0x00	; 0
  c0:	93 2f       	mov	r25, r19
	return data;
	
  c2:	82 2b       	or	r24, r18
  c4:	08 95       	ret

000000c6 <DIO_Init>:

void DIO_Init(void){
	DIO_ChannelTypes DIO_channel;
	DIO_PortTypes PortX;
	uint8 count=0;
	for(count=DIO_ChannelA0;count<pin_count;count++)
  c6:	80 e0       	ldi	r24, 0x00	; 0
  c8:	a0 c0       	rjmp	.+320    	; 0x20a <DIO_Init+0x144>
	{
		PortX=count/8;
  ca:	98 2f       	mov	r25, r24
  cc:	96 95       	lsr	r25
  ce:	96 95       	lsr	r25
  d0:	96 95       	lsr	r25
		DIO_channel=count%8;
  d2:	28 2f       	mov	r18, r24
  d4:	27 70       	andi	r18, 0x07	; 7
		switch(PortX){
  d6:	91 30       	cpi	r25, 0x01	; 1
  d8:	61 f1       	breq	.+88     	; 0x132 <DIO_Init+0x6c>
  da:	38 f0       	brcs	.+14     	; 0xea <DIO_Init+0x24>
  dc:	92 30       	cpi	r25, 0x02	; 2
  de:	09 f4       	brne	.+2      	; 0xe2 <DIO_Init+0x1c>
  e0:	4c c0       	rjmp	.+152    	; 0x17a <DIO_Init+0xb4>
  e2:	93 30       	cpi	r25, 0x03	; 3
  e4:	09 f4       	brne	.+2      	; 0xe8 <DIO_Init+0x22>
  e6:	6d c0       	rjmp	.+218    	; 0x1c2 <DIO_Init+0xfc>
  e8:	8f c0       	rjmp	.+286    	; 0x208 <DIO_Init+0x142>
			case DIO_PortA :
			if (PinCfg[count].PinDir == Output)
  ea:	e8 2f       	mov	r30, r24
  ec:	f0 e0       	ldi	r31, 0x00	; 0
  ee:	ee 0f       	add	r30, r30
  f0:	ff 1f       	adc	r31, r31
  f2:	e0 5a       	subi	r30, 0xA0	; 160
  f4:	ff 4f       	sbci	r31, 0xFF	; 255
  f6:	90 81       	ld	r25, Z
  f8:	91 30       	cpi	r25, 0x01	; 1
  fa:	69 f4       	brne	.+26     	; 0x116 <DIO_Init+0x50>
			{
				set_bit(DDRA_reg,DIO_channel);
  fc:	9a b3       	in	r25, 0x1a	; 26
  fe:	41 e0       	ldi	r20, 0x01	; 1
 100:	50 e0       	ldi	r21, 0x00	; 0
 102:	ba 01       	movw	r22, r20
 104:	02 c0       	rjmp	.+4      	; 0x10a <DIO_Init+0x44>
 106:	66 0f       	add	r22, r22
 108:	77 1f       	adc	r23, r23
 10a:	2a 95       	dec	r18
 10c:	e2 f7       	brpl	.-8      	; 0x106 <DIO_Init+0x40>
 10e:	9b 01       	movw	r18, r22
 110:	29 2b       	or	r18, r25
 112:	2a bb       	out	0x1a, r18	; 26
 114:	79 c0       	rjmp	.+242    	; 0x208 <DIO_Init+0x142>
			}
			else{
				reset_bit(DDRA_reg,DIO_channel);
 116:	9a b3       	in	r25, 0x1a	; 26
 118:	41 e0       	ldi	r20, 0x01	; 1
 11a:	50 e0       	ldi	r21, 0x00	; 0
 11c:	ba 01       	movw	r22, r20
 11e:	02 c0       	rjmp	.+4      	; 0x124 <DIO_Init+0x5e>
 120:	66 0f       	add	r22, r22
 122:	77 1f       	adc	r23, r23
 124:	2a 95       	dec	r18
 126:	e2 f7       	brpl	.-8      	; 0x120 <DIO_Init+0x5a>
 128:	9b 01       	movw	r18, r22
 12a:	20 95       	com	r18
 12c:	29 23       	and	r18, r25
 12e:	2a bb       	out	0x1a, r18	; 26
 130:	6b c0       	rjmp	.+214    	; 0x208 <DIO_Init+0x142>
			}
			break;
			case DIO_PortB :
			if (PinCfg[count].PinDir == Output)
 132:	e8 2f       	mov	r30, r24
 134:	f0 e0       	ldi	r31, 0x00	; 0
 136:	ee 0f       	add	r30, r30
 138:	ff 1f       	adc	r31, r31
 13a:	e0 5a       	subi	r30, 0xA0	; 160
 13c:	ff 4f       	sbci	r31, 0xFF	; 255
 13e:	90 81       	ld	r25, Z
 140:	91 30       	cpi	r25, 0x01	; 1
 142:	69 f4       	brne	.+26     	; 0x15e <DIO_Init+0x98>
			{
				set_bit(DDRB_reg,DIO_channel);
 144:	97 b3       	in	r25, 0x17	; 23
 146:	41 e0       	ldi	r20, 0x01	; 1
 148:	50 e0       	ldi	r21, 0x00	; 0
 14a:	ba 01       	movw	r22, r20
 14c:	02 c0       	rjmp	.+4      	; 0x152 <DIO_Init+0x8c>
 14e:	66 0f       	add	r22, r22
 150:	77 1f       	adc	r23, r23
 152:	2a 95       	dec	r18
 154:	e2 f7       	brpl	.-8      	; 0x14e <DIO_Init+0x88>
 156:	9b 01       	movw	r18, r22
 158:	29 2b       	or	r18, r25
 15a:	27 bb       	out	0x17, r18	; 23
 15c:	55 c0       	rjmp	.+170    	; 0x208 <DIO_Init+0x142>
			}
			else{
				reset_bit(DDRB_reg,DIO_channel);
 15e:	97 b3       	in	r25, 0x17	; 23
 160:	41 e0       	ldi	r20, 0x01	; 1
 162:	50 e0       	ldi	r21, 0x00	; 0
 164:	ba 01       	movw	r22, r20
 166:	02 c0       	rjmp	.+4      	; 0x16c <DIO_Init+0xa6>
 168:	66 0f       	add	r22, r22
 16a:	77 1f       	adc	r23, r23
 16c:	2a 95       	dec	r18
 16e:	e2 f7       	brpl	.-8      	; 0x168 <DIO_Init+0xa2>
 170:	9b 01       	movw	r18, r22
 172:	20 95       	com	r18
 174:	29 23       	and	r18, r25
 176:	27 bb       	out	0x17, r18	; 23
 178:	47 c0       	rjmp	.+142    	; 0x208 <DIO_Init+0x142>
			}
			break;
			case DIO_PortC :
			if (PinCfg[count].PinDir == Output)
 17a:	e8 2f       	mov	r30, r24
 17c:	f0 e0       	ldi	r31, 0x00	; 0
 17e:	ee 0f       	add	r30, r30
 180:	ff 1f       	adc	r31, r31
 182:	e0 5a       	subi	r30, 0xA0	; 160
 184:	ff 4f       	sbci	r31, 0xFF	; 255
 186:	90 81       	ld	r25, Z
 188:	91 30       	cpi	r25, 0x01	; 1
 18a:	69 f4       	brne	.+26     	; 0x1a6 <DIO_Init+0xe0>
			{
				set_bit(DDRC_reg,DIO_channel);
 18c:	94 b3       	in	r25, 0x14	; 20
 18e:	41 e0       	ldi	r20, 0x01	; 1
 190:	50 e0       	ldi	r21, 0x00	; 0
 192:	ba 01       	movw	r22, r20
 194:	02 c0       	rjmp	.+4      	; 0x19a <DIO_Init+0xd4>
 196:	66 0f       	add	r22, r22
 198:	77 1f       	adc	r23, r23
 19a:	2a 95       	dec	r18
 19c:	e2 f7       	brpl	.-8      	; 0x196 <DIO_Init+0xd0>
 19e:	9b 01       	movw	r18, r22
 1a0:	29 2b       	or	r18, r25
 1a2:	24 bb       	out	0x14, r18	; 20
 1a4:	31 c0       	rjmp	.+98     	; 0x208 <DIO_Init+0x142>
			}
			else{
				reset_bit(DDRC_reg,DIO_channel);
 1a6:	94 b3       	in	r25, 0x14	; 20
 1a8:	41 e0       	ldi	r20, 0x01	; 1
 1aa:	50 e0       	ldi	r21, 0x00	; 0
 1ac:	ba 01       	movw	r22, r20
 1ae:	02 c0       	rjmp	.+4      	; 0x1b4 <DIO_Init+0xee>
 1b0:	66 0f       	add	r22, r22
 1b2:	77 1f       	adc	r23, r23
 1b4:	2a 95       	dec	r18
 1b6:	e2 f7       	brpl	.-8      	; 0x1b0 <DIO_Init+0xea>
 1b8:	9b 01       	movw	r18, r22
 1ba:	20 95       	com	r18
 1bc:	29 23       	and	r18, r25
 1be:	24 bb       	out	0x14, r18	; 20
 1c0:	23 c0       	rjmp	.+70     	; 0x208 <DIO_Init+0x142>
			}
			break;
			case DIO_PortD :
			if (PinCfg[count].PinDir == Output)
 1c2:	e8 2f       	mov	r30, r24
 1c4:	f0 e0       	ldi	r31, 0x00	; 0
 1c6:	ee 0f       	add	r30, r30
 1c8:	ff 1f       	adc	r31, r31
 1ca:	e0 5a       	subi	r30, 0xA0	; 160
 1cc:	ff 4f       	sbci	r31, 0xFF	; 255
 1ce:	90 81       	ld	r25, Z
 1d0:	91 30       	cpi	r25, 0x01	; 1
 1d2:	69 f4       	brne	.+26     	; 0x1ee <DIO_Init+0x128>
			{
				set_bit(DDRD_reg,DIO_channel);
 1d4:	91 b3       	in	r25, 0x11	; 17
 1d6:	41 e0       	ldi	r20, 0x01	; 1
 1d8:	50 e0       	ldi	r21, 0x00	; 0
 1da:	ba 01       	movw	r22, r20
 1dc:	02 c0       	rjmp	.+4      	; 0x1e2 <DIO_Init+0x11c>
 1de:	66 0f       	add	r22, r22
 1e0:	77 1f       	adc	r23, r23
 1e2:	2a 95       	dec	r18
 1e4:	e2 f7       	brpl	.-8      	; 0x1de <DIO_Init+0x118>
 1e6:	9b 01       	movw	r18, r22
 1e8:	29 2b       	or	r18, r25
 1ea:	21 bb       	out	0x11, r18	; 17
 1ec:	0d c0       	rjmp	.+26     	; 0x208 <DIO_Init+0x142>
			}
			else{
				reset_bit(DDRD_reg,DIO_channel);
 1ee:	91 b3       	in	r25, 0x11	; 17
 1f0:	41 e0       	ldi	r20, 0x01	; 1
 1f2:	50 e0       	ldi	r21, 0x00	; 0
 1f4:	ba 01       	movw	r22, r20
 1f6:	02 c0       	rjmp	.+4      	; 0x1fc <DIO_Init+0x136>
 1f8:	66 0f       	add	r22, r22
 1fa:	77 1f       	adc	r23, r23
 1fc:	2a 95       	dec	r18
 1fe:	e2 f7       	brpl	.-8      	; 0x1f8 <DIO_Init+0x132>
 200:	9b 01       	movw	r18, r22
 202:	20 95       	com	r18
 204:	29 23       	and	r18, r25
 206:	21 bb       	out	0x11, r18	; 17

void DIO_Init(void){
	DIO_ChannelTypes DIO_channel;
	DIO_PortTypes PortX;
	uint8 count=0;
	for(count=DIO_ChannelA0;count<pin_count;count++)
 208:	8f 5f       	subi	r24, 0xFF	; 255
 20a:	80 32       	cpi	r24, 0x20	; 32
 20c:	08 f4       	brcc	.+2      	; 0x210 <DIO_Init+0x14a>
 20e:	5d cf       	rjmp	.-326    	; 0xca <DIO_Init+0x4>
			}
			break;
			
		}
	}
}
 210:	08 95       	ret

00000212 <DIO_write>:
		case DIO_PIND :
		return get_bit(PIND_reg,Channelpos);
		break;
	}
	
}
 212:	98 2f       	mov	r25, r24
 214:	96 95       	lsr	r25
 216:	96 95       	lsr	r25
 218:	96 95       	lsr	r25
 21a:	87 70       	andi	r24, 0x07	; 7
 21c:	91 30       	cpi	r25, 0x01	; 1
 21e:	21 f1       	breq	.+72     	; 0x268 <DIO_write+0x56>
 220:	30 f0       	brcs	.+12     	; 0x22e <DIO_write+0x1c>
 222:	92 30       	cpi	r25, 0x02	; 2
 224:	f1 f1       	breq	.+124    	; 0x2a2 <DIO_write+0x90>
 226:	93 30       	cpi	r25, 0x03	; 3
 228:	09 f4       	brne	.+2      	; 0x22c <DIO_write+0x1a>
 22a:	58 c0       	rjmp	.+176    	; 0x2dc <DIO_write+0xca>
 22c:	08 95       	ret
 22e:	61 30       	cpi	r22, 0x01	; 1
 230:	69 f4       	brne	.+26     	; 0x24c <DIO_write+0x3a>
 232:	4b b3       	in	r20, 0x1b	; 27
 234:	21 e0       	ldi	r18, 0x01	; 1
 236:	30 e0       	ldi	r19, 0x00	; 0
 238:	b9 01       	movw	r22, r18
 23a:	02 c0       	rjmp	.+4      	; 0x240 <DIO_write+0x2e>
 23c:	66 0f       	add	r22, r22
 23e:	77 1f       	adc	r23, r23
 240:	8a 95       	dec	r24
 242:	e2 f7       	brpl	.-8      	; 0x23c <DIO_write+0x2a>
 244:	cb 01       	movw	r24, r22
 246:	84 2b       	or	r24, r20
 248:	8b bb       	out	0x1b, r24	; 27
 24a:	08 95       	ret
 24c:	4b b3       	in	r20, 0x1b	; 27
 24e:	21 e0       	ldi	r18, 0x01	; 1
 250:	30 e0       	ldi	r19, 0x00	; 0
 252:	b9 01       	movw	r22, r18
 254:	02 c0       	rjmp	.+4      	; 0x25a <DIO_write+0x48>
 256:	66 0f       	add	r22, r22
 258:	77 1f       	adc	r23, r23
 25a:	8a 95       	dec	r24
 25c:	e2 f7       	brpl	.-8      	; 0x256 <DIO_write+0x44>
 25e:	cb 01       	movw	r24, r22
 260:	80 95       	com	r24
 262:	84 23       	and	r24, r20
 264:	8b bb       	out	0x1b, r24	; 27
 266:	08 95       	ret
 268:	61 30       	cpi	r22, 0x01	; 1
 26a:	69 f4       	brne	.+26     	; 0x286 <DIO_write+0x74>
 26c:	48 b3       	in	r20, 0x18	; 24
 26e:	21 e0       	ldi	r18, 0x01	; 1
 270:	30 e0       	ldi	r19, 0x00	; 0
 272:	b9 01       	movw	r22, r18
 274:	02 c0       	rjmp	.+4      	; 0x27a <DIO_write+0x68>
 276:	66 0f       	add	r22, r22
 278:	77 1f       	adc	r23, r23
 27a:	8a 95       	dec	r24
 27c:	e2 f7       	brpl	.-8      	; 0x276 <DIO_write+0x64>
 27e:	cb 01       	movw	r24, r22
 280:	84 2b       	or	r24, r20
 282:	88 bb       	out	0x18, r24	; 24
 284:	08 95       	ret
 286:	48 b3       	in	r20, 0x18	; 24
 288:	21 e0       	ldi	r18, 0x01	; 1
 28a:	30 e0       	ldi	r19, 0x00	; 0
 28c:	b9 01       	movw	r22, r18
 28e:	02 c0       	rjmp	.+4      	; 0x294 <DIO_write+0x82>
 290:	66 0f       	add	r22, r22
 292:	77 1f       	adc	r23, r23
 294:	8a 95       	dec	r24
 296:	e2 f7       	brpl	.-8      	; 0x290 <DIO_write+0x7e>
 298:	cb 01       	movw	r24, r22
 29a:	80 95       	com	r24
 29c:	84 23       	and	r24, r20
 29e:	88 bb       	out	0x18, r24	; 24
 2a0:	08 95       	ret
 2a2:	61 30       	cpi	r22, 0x01	; 1
 2a4:	69 f4       	brne	.+26     	; 0x2c0 <DIO_write+0xae>
 2a6:	45 b3       	in	r20, 0x15	; 21
 2a8:	21 e0       	ldi	r18, 0x01	; 1
 2aa:	30 e0       	ldi	r19, 0x00	; 0
 2ac:	b9 01       	movw	r22, r18
 2ae:	02 c0       	rjmp	.+4      	; 0x2b4 <DIO_write+0xa2>
 2b0:	66 0f       	add	r22, r22
 2b2:	77 1f       	adc	r23, r23
 2b4:	8a 95       	dec	r24
 2b6:	e2 f7       	brpl	.-8      	; 0x2b0 <DIO_write+0x9e>
 2b8:	cb 01       	movw	r24, r22
 2ba:	84 2b       	or	r24, r20
 2bc:	85 bb       	out	0x15, r24	; 21
 2be:	08 95       	ret
 2c0:	45 b3       	in	r20, 0x15	; 21
 2c2:	21 e0       	ldi	r18, 0x01	; 1
 2c4:	30 e0       	ldi	r19, 0x00	; 0
 2c6:	b9 01       	movw	r22, r18
 2c8:	02 c0       	rjmp	.+4      	; 0x2ce <DIO_write+0xbc>
 2ca:	66 0f       	add	r22, r22
 2cc:	77 1f       	adc	r23, r23
 2ce:	8a 95       	dec	r24
 2d0:	e2 f7       	brpl	.-8      	; 0x2ca <DIO_write+0xb8>
 2d2:	cb 01       	movw	r24, r22
 2d4:	80 95       	com	r24
 2d6:	84 23       	and	r24, r20
 2d8:	85 bb       	out	0x15, r24	; 21
 2da:	08 95       	ret
 2dc:	61 30       	cpi	r22, 0x01	; 1
 2de:	69 f4       	brne	.+26     	; 0x2fa <DIO_write+0xe8>
 2e0:	42 b3       	in	r20, 0x12	; 18
 2e2:	21 e0       	ldi	r18, 0x01	; 1
 2e4:	30 e0       	ldi	r19, 0x00	; 0
 2e6:	b9 01       	movw	r22, r18
 2e8:	02 c0       	rjmp	.+4      	; 0x2ee <DIO_write+0xdc>
 2ea:	66 0f       	add	r22, r22
 2ec:	77 1f       	adc	r23, r23
 2ee:	8a 95       	dec	r24
 2f0:	e2 f7       	brpl	.-8      	; 0x2ea <DIO_write+0xd8>
 2f2:	cb 01       	movw	r24, r22
 2f4:	84 2b       	or	r24, r20
 2f6:	82 bb       	out	0x12, r24	; 18
 2f8:	08 95       	ret
 2fa:	42 b3       	in	r20, 0x12	; 18
 2fc:	21 e0       	ldi	r18, 0x01	; 1
 2fe:	30 e0       	ldi	r19, 0x00	; 0
 300:	b9 01       	movw	r22, r18
 302:	02 c0       	rjmp	.+4      	; 0x308 <DIO_write+0xf6>
 304:	66 0f       	add	r22, r22
 306:	77 1f       	adc	r23, r23
 308:	8a 95       	dec	r24
 30a:	e2 f7       	brpl	.-8      	; 0x304 <DIO_write+0xf2>
 30c:	cb 01       	movw	r24, r22
 30e:	80 95       	com	r24
 310:	84 23       	and	r24, r20
 312:	82 bb       	out	0x12, r24	; 18
 314:	08 95       	ret

00000316 <DIO_WritePort>:

void DIO_WritePort(DIO_PortTypes portx, uint8 data){
	switch(portx){
 316:	81 30       	cpi	r24, 0x01	; 1
 318:	41 f0       	breq	.+16     	; 0x32a <DIO_WritePort+0x14>
 31a:	28 f0       	brcs	.+10     	; 0x326 <DIO_WritePort+0x10>
 31c:	82 30       	cpi	r24, 0x02	; 2
 31e:	39 f0       	breq	.+14     	; 0x32e <DIO_WritePort+0x18>
 320:	83 30       	cpi	r24, 0x03	; 3
 322:	39 f0       	breq	.+14     	; 0x332 <DIO_WritePort+0x1c>
 324:	08 95       	ret
		case DIO_PortA:
		PORTA_reg= data;
 326:	6b bb       	out	0x1b, r22	; 27
		break;
 328:	08 95       	ret
		
		case DIO_PortB:
		PORTB_reg= data;
 32a:	68 bb       	out	0x18, r22	; 24
		break;
 32c:	08 95       	ret
		
		case DIO_PortC:
		PORTC_reg= data;
 32e:	65 bb       	out	0x15, r22	; 21
		break;
 330:	08 95       	ret
		
		case DIO_PortD:
		PORTD_reg= data;
 332:	62 bb       	out	0x12, r22	; 18
 334:	08 95       	ret

00000336 <LCD_Command>:
 * Created: 6/23/2023 5:03:16 AM
 *  Author: mohamed
 */ 
#include "LCD.h"

void LCD_Command(uint8 cmd){
 336:	cf 93       	push	r28
 338:	c8 2f       	mov	r28, r24
	uint8 send_cmd;
	send_cmd =(LCD_Data_Port & (0x0F)) | (cmd &(0xF0));
 33a:	68 2f       	mov	r22, r24
 33c:	60 7f       	andi	r22, 0xF0	; 240
 33e:	62 60       	ori	r22, 0x02	; 2
	DIO_WritePort(LCD_Data_Port,send_cmd);
 340:	82 e0       	ldi	r24, 0x02	; 2
 342:	0e 94 8b 01 	call	0x316	; 0x316 <DIO_WritePort>
	DIO_write(LCD_RS,STD_low);
 346:	60 e0       	ldi	r22, 0x00	; 0
 348:	89 e0       	ldi	r24, 0x09	; 9
 34a:	0e 94 09 01 	call	0x212	; 0x212 <DIO_write>
	DIO_write(LCD_E,STD_low);
 34e:	60 e0       	ldi	r22, 0x00	; 0
 350:	8b e0       	ldi	r24, 0x0B	; 11
 352:	0e 94 09 01 	call	0x212	; 0x212 <DIO_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 356:	8f e3       	ldi	r24, 0x3F	; 63
 358:	9f e1       	ldi	r25, 0x1F	; 31
 35a:	01 97       	sbiw	r24, 0x01	; 1
 35c:	f1 f7       	brne	.-4      	; 0x35a <LCD_Command+0x24>
 35e:	00 c0       	rjmp	.+0      	; 0x360 <LCD_Command+0x2a>
 360:	00 00       	nop
	_delay_ms(2);
	DIO_write(LCD_E,STD_high);
 362:	61 e0       	ldi	r22, 0x01	; 1
 364:	8b e0       	ldi	r24, 0x0B	; 11
 366:	0e 94 09 01 	call	0x212	; 0x212 <DIO_write>
 36a:	8f e3       	ldi	r24, 0x3F	; 63
 36c:	9c e9       	ldi	r25, 0x9C	; 156
 36e:	01 97       	sbiw	r24, 0x01	; 1
 370:	f1 f7       	brne	.-4      	; 0x36e <LCD_Command+0x38>
 372:	00 c0       	rjmp	.+0      	; 0x374 <LCD_Command+0x3e>
 374:	00 00       	nop
	_delay_ms(10);
	send_cmd =(LCD_Data_Port & (0x0F)) | (cmd << 4);
 376:	90 e1       	ldi	r25, 0x10	; 16
 378:	c9 9f       	mul	r28, r25
 37a:	b0 01       	movw	r22, r0
 37c:	11 24       	eor	r1, r1
 37e:	62 60       	ori	r22, 0x02	; 2
	DIO_WritePort(LCD_Data_Port,send_cmd);
 380:	82 e0       	ldi	r24, 0x02	; 2
 382:	0e 94 8b 01 	call	0x316	; 0x316 <DIO_WritePort>
	DIO_write(LCD_RS,STD_low);
 386:	60 e0       	ldi	r22, 0x00	; 0
 388:	89 e0       	ldi	r24, 0x09	; 9
 38a:	0e 94 09 01 	call	0x212	; 0x212 <DIO_write>
	DIO_write(LCD_E,STD_low);
 38e:	60 e0       	ldi	r22, 0x00	; 0
 390:	8b e0       	ldi	r24, 0x0B	; 11
 392:	0e 94 09 01 	call	0x212	; 0x212 <DIO_write>
 396:	8f e3       	ldi	r24, 0x3F	; 63
 398:	9f e1       	ldi	r25, 0x1F	; 31
 39a:	01 97       	sbiw	r24, 0x01	; 1
 39c:	f1 f7       	brne	.-4      	; 0x39a <LCD_Command+0x64>
 39e:	00 c0       	rjmp	.+0      	; 0x3a0 <LCD_Command+0x6a>
 3a0:	00 00       	nop
	_delay_ms(2);
	DIO_write(LCD_E,STD_high);
 3a2:	61 e0       	ldi	r22, 0x01	; 1
 3a4:	8b e0       	ldi	r24, 0x0B	; 11
 3a6:	0e 94 09 01 	call	0x212	; 0x212 <DIO_write>
 3aa:	8f e3       	ldi	r24, 0x3F	; 63
 3ac:	9f e1       	ldi	r25, 0x1F	; 31
 3ae:	01 97       	sbiw	r24, 0x01	; 1
 3b0:	f1 f7       	brne	.-4      	; 0x3ae <LCD_Command+0x78>
 3b2:	00 c0       	rjmp	.+0      	; 0x3b4 <LCD_Command+0x7e>
 3b4:	00 00       	nop
	_delay_ms(2);
}
 3b6:	cf 91       	pop	r28
 3b8:	08 95       	ret

000003ba <LCD_init>:
void LCD_init(void){
	DIO_write(LCD_RW,STD_low);
 3ba:	60 e0       	ldi	r22, 0x00	; 0
 3bc:	8a e0       	ldi	r24, 0x0A	; 10
 3be:	0e 94 09 01 	call	0x212	; 0x212 <DIO_write>
 3c2:	2f ef       	ldi	r18, 0xFF	; 255
 3c4:	89 ef       	ldi	r24, 0xF9	; 249
 3c6:	90 e0       	ldi	r25, 0x00	; 0
 3c8:	21 50       	subi	r18, 0x01	; 1
 3ca:	80 40       	sbci	r24, 0x00	; 0
 3cc:	90 40       	sbci	r25, 0x00	; 0
 3ce:	e1 f7       	brne	.-8      	; 0x3c8 <LCD_init+0xe>
 3d0:	00 c0       	rjmp	.+0      	; 0x3d2 <LCD_init+0x18>
 3d2:	00 00       	nop
	_delay_ms(20);
	LCD_Command(0x33);
 3d4:	83 e3       	ldi	r24, 0x33	; 51
 3d6:	0e 94 9b 01 	call	0x336	; 0x336 <LCD_Command>
 3da:	8f e3       	ldi	r24, 0x3F	; 63
 3dc:	9f e1       	ldi	r25, 0x1F	; 31
 3de:	01 97       	sbiw	r24, 0x01	; 1
 3e0:	f1 f7       	brne	.-4      	; 0x3de <LCD_init+0x24>
 3e2:	00 c0       	rjmp	.+0      	; 0x3e4 <LCD_init+0x2a>
 3e4:	00 00       	nop
	_delay_ms(2);
	LCD_Command(0x32);
 3e6:	82 e3       	ldi	r24, 0x32	; 50
 3e8:	0e 94 9b 01 	call	0x336	; 0x336 <LCD_Command>
	LCD_Command(0x28);
 3ec:	88 e2       	ldi	r24, 0x28	; 40
 3ee:	0e 94 9b 01 	call	0x336	; 0x336 <LCD_Command>
	LCD_Command(0x06);
 3f2:	86 e0       	ldi	r24, 0x06	; 6
 3f4:	0e 94 9b 01 	call	0x336	; 0x336 <LCD_Command>
	LCD_Command(0x0C);
 3f8:	8c e0       	ldi	r24, 0x0C	; 12
 3fa:	0e 94 9b 01 	call	0x336	; 0x336 <LCD_Command>
	LCD_Command(0x01);
 3fe:	81 e0       	ldi	r24, 0x01	; 1
 400:	0e 94 9b 01 	call	0x336	; 0x336 <LCD_Command>
 404:	8f e3       	ldi	r24, 0x3F	; 63
 406:	9f e1       	ldi	r25, 0x1F	; 31
 408:	01 97       	sbiw	r24, 0x01	; 1
 40a:	f1 f7       	brne	.-4      	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
 40c:	00 c0       	rjmp	.+0      	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
 40e:	00 00       	nop
 410:	08 95       	ret

00000412 <LCD_Send_Char>:
	_delay_ms(2);
	
}
void LCD_Send_Char(uint8 data){
 412:	cf 93       	push	r28
 414:	c8 2f       	mov	r28, r24
	uint8 send_Data;
	send_Data =(LCD_Data_Port & (0x0F)) | (data &(0xF0));
 416:	68 2f       	mov	r22, r24
 418:	60 7f       	andi	r22, 0xF0	; 240
 41a:	62 60       	ori	r22, 0x02	; 2
	DIO_WritePort(LCD_Data_Port,send_Data);
 41c:	82 e0       	ldi	r24, 0x02	; 2
 41e:	0e 94 8b 01 	call	0x316	; 0x316 <DIO_WritePort>
	DIO_write(LCD_RS,STD_high);
 422:	61 e0       	ldi	r22, 0x01	; 1
 424:	89 e0       	ldi	r24, 0x09	; 9
 426:	0e 94 09 01 	call	0x212	; 0x212 <DIO_write>
	DIO_write(LCD_E,STD_low);
 42a:	60 e0       	ldi	r22, 0x00	; 0
 42c:	8b e0       	ldi	r24, 0x0B	; 11
 42e:	0e 94 09 01 	call	0x212	; 0x212 <DIO_write>
 432:	8f e3       	ldi	r24, 0x3F	; 63
 434:	9f e1       	ldi	r25, 0x1F	; 31
 436:	01 97       	sbiw	r24, 0x01	; 1
 438:	f1 f7       	brne	.-4      	; 0x436 <LCD_Send_Char+0x24>
 43a:	00 c0       	rjmp	.+0      	; 0x43c <LCD_Send_Char+0x2a>
 43c:	00 00       	nop
	_delay_ms(2);
	DIO_write(LCD_E,STD_high);
 43e:	61 e0       	ldi	r22, 0x01	; 1
 440:	8b e0       	ldi	r24, 0x0B	; 11
 442:	0e 94 09 01 	call	0x212	; 0x212 <DIO_write>
 446:	8f e3       	ldi	r24, 0x3F	; 63
 448:	9c e9       	ldi	r25, 0x9C	; 156
 44a:	01 97       	sbiw	r24, 0x01	; 1
 44c:	f1 f7       	brne	.-4      	; 0x44a <LCD_Send_Char+0x38>
 44e:	00 c0       	rjmp	.+0      	; 0x450 <LCD_Send_Char+0x3e>
 450:	00 00       	nop
	_delay_ms(10);
	send_Data =(LCD_Data_Port & (0x0F)) | (data << 4);
 452:	90 e1       	ldi	r25, 0x10	; 16
 454:	c9 9f       	mul	r28, r25
 456:	b0 01       	movw	r22, r0
 458:	11 24       	eor	r1, r1
 45a:	62 60       	ori	r22, 0x02	; 2
	DIO_WritePort(LCD_Data_Port,send_Data);
 45c:	82 e0       	ldi	r24, 0x02	; 2
 45e:	0e 94 8b 01 	call	0x316	; 0x316 <DIO_WritePort>
	DIO_write(LCD_RS,STD_high);
 462:	61 e0       	ldi	r22, 0x01	; 1
 464:	89 e0       	ldi	r24, 0x09	; 9
 466:	0e 94 09 01 	call	0x212	; 0x212 <DIO_write>
	DIO_write(LCD_E,STD_low);
 46a:	60 e0       	ldi	r22, 0x00	; 0
 46c:	8b e0       	ldi	r24, 0x0B	; 11
 46e:	0e 94 09 01 	call	0x212	; 0x212 <DIO_write>
 472:	8f e3       	ldi	r24, 0x3F	; 63
 474:	9f e1       	ldi	r25, 0x1F	; 31
 476:	01 97       	sbiw	r24, 0x01	; 1
 478:	f1 f7       	brne	.-4      	; 0x476 <LCD_Send_Char+0x64>
 47a:	00 c0       	rjmp	.+0      	; 0x47c <LCD_Send_Char+0x6a>
 47c:	00 00       	nop
	_delay_ms(2);
	DIO_write(LCD_E,STD_high);
 47e:	61 e0       	ldi	r22, 0x01	; 1
 480:	8b e0       	ldi	r24, 0x0B	; 11
 482:	0e 94 09 01 	call	0x212	; 0x212 <DIO_write>
 486:	8f e3       	ldi	r24, 0x3F	; 63
 488:	9f e1       	ldi	r25, 0x1F	; 31
 48a:	01 97       	sbiw	r24, 0x01	; 1
 48c:	f1 f7       	brne	.-4      	; 0x48a <LCD_Send_Char+0x78>
 48e:	00 c0       	rjmp	.+0      	; 0x490 <LCD_Send_Char+0x7e>
 490:	00 00       	nop
	_delay_ms(2);
}
 492:	cf 91       	pop	r28
 494:	08 95       	ret

00000496 <LCD_string>:

void LCD_string(uint8 * string){
 496:	0f 93       	push	r16
 498:	1f 93       	push	r17
 49a:	cf 93       	push	r28
 49c:	8c 01       	movw	r16, r24
	uint8 i=0;
 49e:	c0 e0       	ldi	r28, 0x00	; 0
	while(string[i] != '\0'){
 4a0:	03 c0       	rjmp	.+6      	; 0x4a8 <LCD_string+0x12>
		LCD_Send_Char(string[i]);
 4a2:	0e 94 09 02 	call	0x412	; 0x412 <LCD_Send_Char>
		i++;
 4a6:	cf 5f       	subi	r28, 0xFF	; 255
	_delay_ms(2);
}

void LCD_string(uint8 * string){
	uint8 i=0;
	while(string[i] != '\0'){
 4a8:	f8 01       	movw	r30, r16
 4aa:	ec 0f       	add	r30, r28
 4ac:	f1 1d       	adc	r31, r1
 4ae:	80 81       	ld	r24, Z
 4b0:	81 11       	cpse	r24, r1
 4b2:	f7 cf       	rjmp	.-18     	; 0x4a2 <LCD_string+0xc>
		LCD_Send_Char(string[i]);
		i++;
	}
}
 4b4:	cf 91       	pop	r28
 4b6:	1f 91       	pop	r17
 4b8:	0f 91       	pop	r16
 4ba:	08 95       	ret

000004bc <main>:
#include <avr/interrupt.h>



int main(void)
{
 4bc:	cf 93       	push	r28
 4be:	df 93       	push	r29
 4c0:	cd b7       	in	r28, 0x3d	; 61
 4c2:	de b7       	in	r29, 0x3e	; 62
 4c4:	c4 56       	subi	r28, 0x64	; 100
 4c6:	d1 09       	sbc	r29, r1
 4c8:	0f b6       	in	r0, 0x3f	; 63
 4ca:	f8 94       	cli
 4cc:	de bf       	out	0x3e, r29	; 62
 4ce:	0f be       	out	0x3f, r0	; 63
 4d0:	cd bf       	out	0x3d, r28	; 61

    char buffer[100];
	unsigned short temp =0;
    DIO_Init();
 4d2:	0e 94 63 00 	call	0xc6	; 0xc6 <DIO_Init>
	LCD_init();
 4d6:	0e 94 dd 01 	call	0x3ba	; 0x3ba <LCD_init>
	ADC_Init();
 4da:	0e 94 49 00 	call	0x92	; 0x92 <ADC_Init>

	//interrupt_init
	MCUCR |= (1<<ISC00) | (1<<ISC01) ;
 4de:	85 b7       	in	r24, 0x35	; 53
 4e0:	83 60       	ori	r24, 0x03	; 3
 4e2:	85 bf       	out	0x35, r24	; 53
	GICR |= (1<<INT0);
 4e4:	8b b7       	in	r24, 0x3b	; 59
 4e6:	80 64       	ori	r24, 0x40	; 64
 4e8:	8b bf       	out	0x3b, r24	; 59
	sei();
 4ea:	78 94       	sei
	DDRD &=~ (1<<2);
 4ec:	81 b3       	in	r24, 0x11	; 17
 4ee:	8b 7f       	andi	r24, 0xFB	; 251
 4f0:	81 bb       	out	0x11, r24	; 17
	PIND &=~ (1<<2);
 4f2:	80 b3       	in	r24, 0x10	; 16
 4f4:	8b 7f       	andi	r24, 0xFB	; 251
 4f6:	80 bb       	out	0x10, r24	; 16
	
	
	
    while (1) 
    {
		while(!(flag));
 4f8:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__data_end>
 4fc:	88 23       	and	r24, r24
 4fe:	e1 f3       	breq	.-8      	; 0x4f8 <main+0x3c>
		temp = ADC_read(0x01);
 500:	81 e0       	ldi	r24, 0x01	; 1
 502:	0e 94 50 00 	call	0xa0	; 0xa0 <ADC_read>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 506:	4a e0       	ldi	r20, 0x0A	; 10
 508:	be 01       	movw	r22, r28
 50a:	6f 5f       	subi	r22, 0xFF	; 255
 50c:	7f 4f       	sbci	r23, 0xFF	; 255
 50e:	96 95       	lsr	r25
 510:	87 95       	ror	r24
 512:	96 95       	lsr	r25
 514:	87 95       	ror	r24
 516:	0e 94 b3 02 	call	0x566	; 0x566 <__itoa_ncheck>
		temp=temp/4;
		itoa(temp,buffer,10);
		LCD_string("current temp ");
 51a:	88 e9       	ldi	r24, 0x98	; 152
 51c:	90 e0       	ldi	r25, 0x00	; 0
 51e:	0e 94 4b 02 	call	0x496	; 0x496 <LCD_string>
		LCD_string(buffer);
 522:	ce 01       	movw	r24, r28
 524:	01 96       	adiw	r24, 0x01	; 1
 526:	0e 94 4b 02 	call	0x496	; 0x496 <LCD_string>
 52a:	2f ef       	ldi	r18, 0xFF	; 255
 52c:	87 ea       	ldi	r24, 0xA7	; 167
 52e:	91 e6       	ldi	r25, 0x61	; 97
 530:	21 50       	subi	r18, 0x01	; 1
 532:	80 40       	sbci	r24, 0x00	; 0
 534:	90 40       	sbci	r25, 0x00	; 0
 536:	e1 f7       	brne	.-8      	; 0x530 <main+0x74>
 538:	00 c0       	rjmp	.+0      	; 0x53a <main+0x7e>
 53a:	00 00       	nop
		_delay_ms(2000);
		LCD_Command(0x01);		
 53c:	81 e0       	ldi	r24, 0x01	; 1
 53e:	0e 94 9b 01 	call	0x336	; 0x336 <LCD_Command>
		flag=0;
 542:	10 92 a6 00 	sts	0x00A6, r1	; 0x8000a6 <__data_end>
		
		
    }
 546:	d8 cf       	rjmp	.-80     	; 0x4f8 <main+0x3c>

00000548 <__vector_1>:
}

ISR(INT0_vect){
 548:	1f 92       	push	r1
 54a:	0f 92       	push	r0
 54c:	0f b6       	in	r0, 0x3f	; 63
 54e:	0f 92       	push	r0
 550:	11 24       	eor	r1, r1
 552:	8f 93       	push	r24
	flag=1;
 554:	81 e0       	ldi	r24, 0x01	; 1
 556:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__data_end>
}
 55a:	8f 91       	pop	r24
 55c:	0f 90       	pop	r0
 55e:	0f be       	out	0x3f, r0	; 63
 560:	0f 90       	pop	r0
 562:	1f 90       	pop	r1
 564:	18 95       	reti

00000566 <__itoa_ncheck>:
 566:	bb 27       	eor	r27, r27
 568:	4a 30       	cpi	r20, 0x0A	; 10
 56a:	31 f4       	brne	.+12     	; 0x578 <__itoa_ncheck+0x12>
 56c:	99 23       	and	r25, r25
 56e:	22 f4       	brpl	.+8      	; 0x578 <__itoa_ncheck+0x12>
 570:	bd e2       	ldi	r27, 0x2D	; 45
 572:	90 95       	com	r25
 574:	81 95       	neg	r24
 576:	9f 4f       	sbci	r25, 0xFF	; 255
 578:	0c 94 bf 02 	jmp	0x57e	; 0x57e <__utoa_common>

0000057c <__utoa_ncheck>:
 57c:	bb 27       	eor	r27, r27

0000057e <__utoa_common>:
 57e:	fb 01       	movw	r30, r22
 580:	55 27       	eor	r21, r21
 582:	aa 27       	eor	r26, r26
 584:	88 0f       	add	r24, r24
 586:	99 1f       	adc	r25, r25
 588:	aa 1f       	adc	r26, r26
 58a:	a4 17       	cp	r26, r20
 58c:	10 f0       	brcs	.+4      	; 0x592 <__utoa_common+0x14>
 58e:	a4 1b       	sub	r26, r20
 590:	83 95       	inc	r24
 592:	50 51       	subi	r21, 0x10	; 16
 594:	b9 f7       	brne	.-18     	; 0x584 <__utoa_common+0x6>
 596:	a0 5d       	subi	r26, 0xD0	; 208
 598:	aa 33       	cpi	r26, 0x3A	; 58
 59a:	08 f0       	brcs	.+2      	; 0x59e <__utoa_common+0x20>
 59c:	a9 5d       	subi	r26, 0xD9	; 217
 59e:	a1 93       	st	Z+, r26
 5a0:	00 97       	sbiw	r24, 0x00	; 0
 5a2:	79 f7       	brne	.-34     	; 0x582 <__utoa_common+0x4>
 5a4:	b1 11       	cpse	r27, r1
 5a6:	b1 93       	st	Z+, r27
 5a8:	11 92       	st	Z+, r1
 5aa:	cb 01       	movw	r24, r22
 5ac:	0c 94 d8 02 	jmp	0x5b0	; 0x5b0 <strrev>

000005b0 <strrev>:
 5b0:	dc 01       	movw	r26, r24
 5b2:	fc 01       	movw	r30, r24
 5b4:	67 2f       	mov	r22, r23
 5b6:	71 91       	ld	r23, Z+
 5b8:	77 23       	and	r23, r23
 5ba:	e1 f7       	brne	.-8      	; 0x5b4 <strrev+0x4>
 5bc:	32 97       	sbiw	r30, 0x02	; 2
 5be:	04 c0       	rjmp	.+8      	; 0x5c8 <strrev+0x18>
 5c0:	7c 91       	ld	r23, X
 5c2:	6d 93       	st	X+, r22
 5c4:	70 83       	st	Z, r23
 5c6:	62 91       	ld	r22, -Z
 5c8:	ae 17       	cp	r26, r30
 5ca:	bf 07       	cpc	r27, r31
 5cc:	c8 f3       	brcs	.-14     	; 0x5c0 <strrev+0x10>
 5ce:	08 95       	ret

000005d0 <_exit>:
 5d0:	f8 94       	cli

000005d2 <__stop_program>:
 5d2:	ff cf       	rjmp	.-2      	; 0x5d2 <__stop_program>
