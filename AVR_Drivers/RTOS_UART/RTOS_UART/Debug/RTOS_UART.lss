
RTOS_UART.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000e72  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001c  00800060  00000e72  00000f06  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000063e  0080007c  0080007c  00000f22  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000f22  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000f54  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000288  00000000  00000000  00000f90  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002916  00000000  00000000  00001218  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c72  00000000  00000000  00003b2e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001924  00000000  00000000  000047a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000730  00000000  00000000  000060c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000f06  00000000  00000000  000067f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002337  00000000  00000000  000076fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000268  00000000  00000000  00009a31  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 7c 02 	jmp	0x4f8	; 0x4f8 <__vector_7>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e7       	ldi	r30, 0x72	; 114
  68:	fe e0       	ldi	r31, 0x0E	; 14
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ac 37       	cpi	r26, 0x7C	; 124
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	26 e0       	ldi	r18, 0x06	; 6
  78:	ac e7       	ldi	r26, 0x7C	; 124
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	aa 3b       	cpi	r26, 0xBA	; 186
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 00 01 	call	0x200	; 0x200 <main>
  8a:	0c 94 37 07 	jmp	0xe6e	; 0xe6e <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
  92:	cf 93       	push	r28
  94:	df 93       	push	r29
  96:	ec 01       	movw	r28, r24
            }
        }
    }
    #endif /* if ( portBYTE_ALIGNMENT != 1 ) */

    vTaskSuspendAll();
  98:	0e 94 b9 04 	call	0x972	; 0x972 <vTaskSuspendAll>
    {
        if( pucAlignedHeap == NULL )
  9c:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__data_end>
  a0:	90 91 7d 00 	lds	r25, 0x007D	; 0x80007d <__data_end+0x1>
  a4:	89 2b       	or	r24, r25
  a6:	31 f4       	brne	.+12     	; 0xb4 <pvPortMalloc+0x22>
        {
            /* Ensure the heap starts on a correctly aligned boundary. */
            pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) & ucHeap[ portBYTE_ALIGNMENT - 1 ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
  a8:	80 e8       	ldi	r24, 0x80	; 128
  aa:	90 e0       	ldi	r25, 0x00	; 0
  ac:	90 93 7d 00 	sts	0x007D, r25	; 0x80007d <__data_end+0x1>
  b0:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__data_end>
        }

        /* Check there is enough room left for the allocation and. */
        if( ( xWantedSize > 0 ) &&                                /* valid size */
  b4:	20 97       	sbiw	r28, 0x00	; 0
  b6:	c9 f0       	breq	.+50     	; 0xea <pvPortMalloc+0x58>
            ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
  b8:	80 91 7e 00 	lds	r24, 0x007E	; 0x80007e <xNextFreeByte>
  bc:	90 91 7f 00 	lds	r25, 0x007F	; 0x80007f <xNextFreeByte+0x1>
  c0:	9e 01       	movw	r18, r28
  c2:	28 0f       	add	r18, r24
  c4:	39 1f       	adc	r19, r25
            /* Ensure the heap starts on a correctly aligned boundary. */
            pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) & ucHeap[ portBYTE_ALIGNMENT - 1 ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
        }

        /* Check there is enough room left for the allocation and. */
        if( ( xWantedSize > 0 ) &&                                /* valid size */
  c6:	2b 3d       	cpi	r18, 0xDB	; 219
  c8:	45 e0       	ldi	r20, 0x05	; 5
  ca:	34 07       	cpc	r19, r20
  cc:	88 f4       	brcc	.+34     	; 0xf0 <pvPortMalloc+0x5e>
            ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
  ce:	82 17       	cp	r24, r18
  d0:	93 07       	cpc	r25, r19
  d2:	88 f4       	brcc	.+34     	; 0xf6 <pvPortMalloc+0x64>
            ( ( xNextFreeByte + xWantedSize ) > xNextFreeByte ) ) /* Check for overflow. */
        {
            /* Return the next free byte then increment the index past this
             * block. */
            pvReturn = pucAlignedHeap + xNextFreeByte;
  d4:	c0 91 7c 00 	lds	r28, 0x007C	; 0x80007c <__data_end>
  d8:	d0 91 7d 00 	lds	r29, 0x007D	; 0x80007d <__data_end+0x1>
  dc:	c8 0f       	add	r28, r24
  de:	d9 1f       	adc	r29, r25
            xNextFreeByte += xWantedSize;
  e0:	30 93 7f 00 	sts	0x007F, r19	; 0x80007f <xNextFreeByte+0x1>
  e4:	20 93 7e 00 	sts	0x007E, r18	; 0x80007e <xNextFreeByte>
  e8:	08 c0       	rjmp	.+16     	; 0xfa <pvPortMalloc+0x68>

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
    void * pvReturn = NULL;
  ea:	c0 e0       	ldi	r28, 0x00	; 0
  ec:	d0 e0       	ldi	r29, 0x00	; 0
  ee:	05 c0       	rjmp	.+10     	; 0xfa <pvPortMalloc+0x68>
  f0:	c0 e0       	ldi	r28, 0x00	; 0
  f2:	d0 e0       	ldi	r29, 0x00	; 0
  f4:	02 c0       	rjmp	.+4      	; 0xfa <pvPortMalloc+0x68>
  f6:	c0 e0       	ldi	r28, 0x00	; 0
  f8:	d0 e0       	ldi	r29, 0x00	; 0
            xNextFreeByte += xWantedSize;
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
  fa:	0e 94 d9 05 	call	0xbb2	; 0xbb2 <xTaskResumeAll>
        }
    }
    #endif

    return pvReturn;
}
  fe:	ce 01       	movw	r24, r28
 100:	df 91       	pop	r29
 102:	cf 91       	pop	r28
 104:	08 95       	ret

00000106 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 106:	08 95       	ret

00000108 <vListInitialise>:

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;

    ( pxList->uxNumberOfItems )++;
}
 108:	fc 01       	movw	r30, r24
 10a:	03 96       	adiw	r24, 0x03	; 3
 10c:	92 83       	std	Z+2, r25	; 0x02
 10e:	81 83       	std	Z+1, r24	; 0x01
 110:	2f ef       	ldi	r18, 0xFF	; 255
 112:	3f ef       	ldi	r19, 0xFF	; 255
 114:	34 83       	std	Z+4, r19	; 0x04
 116:	23 83       	std	Z+3, r18	; 0x03
 118:	96 83       	std	Z+6, r25	; 0x06
 11a:	85 83       	std	Z+5, r24	; 0x05
 11c:	90 87       	std	Z+8, r25	; 0x08
 11e:	87 83       	std	Z+7, r24	; 0x07
 120:	10 82       	st	Z, r1
 122:	08 95       	ret

00000124 <vListInitialiseItem>:
 124:	fc 01       	movw	r30, r24
 126:	11 86       	std	Z+9, r1	; 0x09
 128:	10 86       	std	Z+8, r1	; 0x08
 12a:	08 95       	ret

0000012c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 12c:	cf 93       	push	r28
 12e:	df 93       	push	r29
 130:	eb 01       	movw	r28, r22
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 132:	48 81       	ld	r20, Y
 134:	59 81       	ldd	r21, Y+1	; 0x01
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 136:	4f 3f       	cpi	r20, 0xFF	; 255
 138:	2f ef       	ldi	r18, 0xFF	; 255
 13a:	52 07       	cpc	r21, r18
 13c:	21 f4       	brne	.+8      	; 0x146 <vListInsert+0x1a>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 13e:	fc 01       	movw	r30, r24
 140:	a7 81       	ldd	r26, Z+7	; 0x07
 142:	b0 85       	ldd	r27, Z+8	; 0x08
 144:	0d c0       	rjmp	.+26     	; 0x160 <vListInsert+0x34>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 146:	dc 01       	movw	r26, r24
 148:	13 96       	adiw	r26, 0x03	; 3
 14a:	01 c0       	rjmp	.+2      	; 0x14e <vListInsert+0x22>
 14c:	df 01       	movw	r26, r30
 14e:	12 96       	adiw	r26, 0x02	; 2
 150:	ed 91       	ld	r30, X+
 152:	fc 91       	ld	r31, X
 154:	13 97       	sbiw	r26, 0x03	; 3
 156:	20 81       	ld	r18, Z
 158:	31 81       	ldd	r19, Z+1	; 0x01
 15a:	42 17       	cp	r20, r18
 15c:	53 07       	cpc	r21, r19
 15e:	b0 f7       	brcc	.-20     	; 0x14c <vListInsert+0x20>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 160:	12 96       	adiw	r26, 0x02	; 2
 162:	ed 91       	ld	r30, X+
 164:	fc 91       	ld	r31, X
 166:	13 97       	sbiw	r26, 0x03	; 3
 168:	fb 83       	std	Y+3, r31	; 0x03
 16a:	ea 83       	std	Y+2, r30	; 0x02
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 16c:	d5 83       	std	Z+5, r29	; 0x05
 16e:	c4 83       	std	Z+4, r28	; 0x04
    pxNewListItem->pxPrevious = pxIterator;
 170:	bd 83       	std	Y+5, r27	; 0x05
 172:	ac 83       	std	Y+4, r26	; 0x04
    pxIterator->pxNext = pxNewListItem;
 174:	13 96       	adiw	r26, 0x03	; 3
 176:	dc 93       	st	X, r29
 178:	ce 93       	st	-X, r28
 17a:	12 97       	sbiw	r26, 0x02	; 2

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 17c:	99 87       	std	Y+9, r25	; 0x09
 17e:	88 87       	std	Y+8, r24	; 0x08

    ( pxList->uxNumberOfItems )++;
 180:	fc 01       	movw	r30, r24
 182:	20 81       	ld	r18, Z
 184:	2f 5f       	subi	r18, 0xFF	; 255
 186:	20 83       	st	Z, r18
}
 188:	df 91       	pop	r29
 18a:	cf 91       	pop	r28
 18c:	08 95       	ret

0000018e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 18e:	cf 93       	push	r28
 190:	df 93       	push	r29
 192:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 194:	a0 85       	ldd	r26, Z+8	; 0x08
 196:	b1 85       	ldd	r27, Z+9	; 0x09

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 198:	c2 81       	ldd	r28, Z+2	; 0x02
 19a:	d3 81       	ldd	r29, Z+3	; 0x03
 19c:	84 81       	ldd	r24, Z+4	; 0x04
 19e:	95 81       	ldd	r25, Z+5	; 0x05
 1a0:	9d 83       	std	Y+5, r25	; 0x05
 1a2:	8c 83       	std	Y+4, r24	; 0x04
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 1a4:	c4 81       	ldd	r28, Z+4	; 0x04
 1a6:	d5 81       	ldd	r29, Z+5	; 0x05
 1a8:	82 81       	ldd	r24, Z+2	; 0x02
 1aa:	93 81       	ldd	r25, Z+3	; 0x03
 1ac:	9b 83       	std	Y+3, r25	; 0x03
 1ae:	8a 83       	std	Y+2, r24	; 0x02

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 1b0:	11 96       	adiw	r26, 0x01	; 1
 1b2:	8d 91       	ld	r24, X+
 1b4:	9c 91       	ld	r25, X
 1b6:	12 97       	sbiw	r26, 0x02	; 2
 1b8:	e8 17       	cp	r30, r24
 1ba:	f9 07       	cpc	r31, r25
 1bc:	31 f4       	brne	.+12     	; 0x1ca <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 1be:	84 81       	ldd	r24, Z+4	; 0x04
 1c0:	95 81       	ldd	r25, Z+5	; 0x05
 1c2:	12 96       	adiw	r26, 0x02	; 2
 1c4:	9c 93       	st	X, r25
 1c6:	8e 93       	st	-X, r24
 1c8:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 1ca:	11 86       	std	Z+9, r1	; 0x09
 1cc:	10 86       	std	Z+8, r1	; 0x08
    ( pxList->uxNumberOfItems )--;
 1ce:	8c 91       	ld	r24, X
 1d0:	81 50       	subi	r24, 0x01	; 1
 1d2:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
 1d4:	8c 91       	ld	r24, X
}
 1d6:	df 91       	pop	r29
 1d8:	cf 91       	pop	r28
 1da:	08 95       	ret

000001dc <uart1>:
	while (1)
	{
	}
}

void uart1( void * pv){
 1dc:	ec 01       	movw	r28, r24
	
	
	while (1)
	{
		UART_SENDSTRING(pv);
 1de:	ce 01       	movw	r24, r28
 1e0:	0e 94 24 07 	call	0xe48	; 0xe48 <UART_SENDSTRING>
		vTaskDelay(150/portTICK_PERIOD_MS);
 1e4:	86 e9       	ldi	r24, 0x96	; 150
 1e6:	90 e0       	ldi	r25, 0x00	; 0
 1e8:	0e 94 ae 06 	call	0xd5c	; 0xd5c <vTaskDelay>
 1ec:	f8 cf       	rjmp	.-16     	; 0x1de <uart1+0x2>

000001ee <uart2>:
	}
}

void uart2( void * pv){
 1ee:	ec 01       	movw	r28, r24
	
	
	while (1)
	{
		UART_SENDSTRING(pv);
 1f0:	ce 01       	movw	r24, r28
 1f2:	0e 94 24 07 	call	0xe48	; 0xe48 <UART_SENDSTRING>
		vTaskDelay(150/portTICK_PERIOD_MS);
 1f6:	86 e9       	ldi	r24, 0x96	; 150
 1f8:	90 e0       	ldi	r25, 0x00	; 0
 1fa:	0e 94 ae 06 	call	0xd5c	; 0xd5c <vTaskDelay>
 1fe:	f8 cf       	rjmp	.-16     	; 0x1f0 <uart2+0x2>

00000200 <main>:
void uart1( void * pv);
void uart2( void * pv);

int main(void)
{
	UART_INT();
 200:	0e 94 18 07 	call	0xe30	; 0xe30 <UART_INT>
	DDRC |= (1<<2)|(1<<3)|(1<<4);
 204:	84 b3       	in	r24, 0x14	; 20
 206:	8c 61       	ori	r24, 0x1C	; 28
 208:	84 bb       	out	0x14, r24	; 20
	DDRD &=~ (1<<2) ;
 20a:	81 b3       	in	r24, 0x11	; 17
 20c:	8b 7f       	andi	r24, 0xFB	; 251
 20e:	81 bb       	out	0x11, r24	; 17
	volatile char * pv ="test1\n\r";
	volatile char * ps ="test2\n\r";
	xTaskCreate(uart1,"uart1",500,(void *)pv,3,NULL);
 210:	e1 2c       	mov	r14, r1
 212:	f1 2c       	mov	r15, r1
 214:	03 e0       	ldi	r16, 0x03	; 3
 216:	21 e6       	ldi	r18, 0x61	; 97
 218:	30 e0       	ldi	r19, 0x00	; 0
 21a:	44 ef       	ldi	r20, 0xF4	; 244
 21c:	51 e0       	ldi	r21, 0x01	; 1
 21e:	69 e6       	ldi	r22, 0x69	; 105
 220:	70 e0       	ldi	r23, 0x00	; 0
 222:	8e ee       	ldi	r24, 0xEE	; 238
 224:	90 e0       	ldi	r25, 0x00	; 0
 226:	0e 94 34 04 	call	0x868	; 0x868 <xTaskCreate>
	xTaskCreate(uart2,"uart1",500,(void *)ps,1,NULL);
 22a:	01 e0       	ldi	r16, 0x01	; 1
 22c:	2f e6       	ldi	r18, 0x6F	; 111
 22e:	30 e0       	ldi	r19, 0x00	; 0
 230:	44 ef       	ldi	r20, 0xF4	; 244
 232:	51 e0       	ldi	r21, 0x01	; 1
 234:	69 e6       	ldi	r22, 0x69	; 105
 236:	70 e0       	ldi	r23, 0x00	; 0
 238:	87 ef       	ldi	r24, 0xF7	; 247
 23a:	90 e0       	ldi	r25, 0x00	; 0
 23c:	0e 94 34 04 	call	0x868	; 0x868 <xTaskCreate>
	//xTaskCreate(LED2,"LED2",50,NULL,1,NULL);
	//xTaskCreate(LED3,"LED3",50,NULL,1,NULL);
	vTaskStartScheduler();
 240:	0e 94 8d 04 	call	0x91a	; 0x91a <vTaskStartScheduler>
 244:	ff cf       	rjmp	.-2      	; 0x244 <main+0x44>

00000246 <prvSetupTimerInterrupt>:
	return pdTRUE;
}
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
 246:	1b bc       	out	0x2b, r1	; 43
 248:	89 ef       	ldi	r24, 0xF9	; 249
 24a:	8a bd       	out	0x2a, r24	; 42
 24c:	8b e0       	ldi	r24, 0x0B	; 11
 24e:	8e bd       	out	0x2e, r24	; 46
 250:	89 b7       	in	r24, 0x39	; 57
 252:	80 61       	ori	r24, 0x10	; 16
 254:	89 bf       	out	0x39, r24	; 57
 256:	08 95       	ret

00000258 <pxPortInitialiseStack>:
 258:	31 e1       	ldi	r19, 0x11	; 17
 25a:	fc 01       	movw	r30, r24
 25c:	30 83       	st	Z, r19
 25e:	31 97       	sbiw	r30, 0x01	; 1
 260:	22 e2       	ldi	r18, 0x22	; 34
 262:	20 83       	st	Z, r18
 264:	31 97       	sbiw	r30, 0x01	; 1
 266:	a3 e3       	ldi	r26, 0x33	; 51
 268:	a0 83       	st	Z, r26
 26a:	31 97       	sbiw	r30, 0x01	; 1
 26c:	60 83       	st	Z, r22
 26e:	31 97       	sbiw	r30, 0x01	; 1
 270:	70 83       	st	Z, r23
 272:	31 97       	sbiw	r30, 0x01	; 1
 274:	10 82       	st	Z, r1
 276:	31 97       	sbiw	r30, 0x01	; 1
 278:	60 e8       	ldi	r22, 0x80	; 128
 27a:	60 83       	st	Z, r22
 27c:	31 97       	sbiw	r30, 0x01	; 1
 27e:	10 82       	st	Z, r1
 280:	31 97       	sbiw	r30, 0x01	; 1
 282:	62 e0       	ldi	r22, 0x02	; 2
 284:	60 83       	st	Z, r22
 286:	31 97       	sbiw	r30, 0x01	; 1
 288:	63 e0       	ldi	r22, 0x03	; 3
 28a:	60 83       	st	Z, r22
 28c:	31 97       	sbiw	r30, 0x01	; 1
 28e:	64 e0       	ldi	r22, 0x04	; 4
 290:	60 83       	st	Z, r22
 292:	31 97       	sbiw	r30, 0x01	; 1
 294:	65 e0       	ldi	r22, 0x05	; 5
 296:	60 83       	st	Z, r22
 298:	31 97       	sbiw	r30, 0x01	; 1
 29a:	66 e0       	ldi	r22, 0x06	; 6
 29c:	60 83       	st	Z, r22
 29e:	31 97       	sbiw	r30, 0x01	; 1
 2a0:	67 e0       	ldi	r22, 0x07	; 7
 2a2:	60 83       	st	Z, r22
 2a4:	31 97       	sbiw	r30, 0x01	; 1
 2a6:	68 e0       	ldi	r22, 0x08	; 8
 2a8:	60 83       	st	Z, r22
 2aa:	31 97       	sbiw	r30, 0x01	; 1
 2ac:	69 e0       	ldi	r22, 0x09	; 9
 2ae:	60 83       	st	Z, r22
 2b0:	31 97       	sbiw	r30, 0x01	; 1
 2b2:	60 e1       	ldi	r22, 0x10	; 16
 2b4:	60 83       	st	Z, r22
 2b6:	31 97       	sbiw	r30, 0x01	; 1
 2b8:	30 83       	st	Z, r19
 2ba:	31 97       	sbiw	r30, 0x01	; 1
 2bc:	32 e1       	ldi	r19, 0x12	; 18
 2be:	30 83       	st	Z, r19
 2c0:	31 97       	sbiw	r30, 0x01	; 1
 2c2:	33 e1       	ldi	r19, 0x13	; 19
 2c4:	30 83       	st	Z, r19
 2c6:	31 97       	sbiw	r30, 0x01	; 1
 2c8:	34 e1       	ldi	r19, 0x14	; 20
 2ca:	30 83       	st	Z, r19
 2cc:	31 97       	sbiw	r30, 0x01	; 1
 2ce:	35 e1       	ldi	r19, 0x15	; 21
 2d0:	30 83       	st	Z, r19
 2d2:	31 97       	sbiw	r30, 0x01	; 1
 2d4:	36 e1       	ldi	r19, 0x16	; 22
 2d6:	30 83       	st	Z, r19
 2d8:	31 97       	sbiw	r30, 0x01	; 1
 2da:	37 e1       	ldi	r19, 0x17	; 23
 2dc:	30 83       	st	Z, r19
 2de:	31 97       	sbiw	r30, 0x01	; 1
 2e0:	38 e1       	ldi	r19, 0x18	; 24
 2e2:	30 83       	st	Z, r19
 2e4:	31 97       	sbiw	r30, 0x01	; 1
 2e6:	39 e1       	ldi	r19, 0x19	; 25
 2e8:	30 83       	st	Z, r19
 2ea:	31 97       	sbiw	r30, 0x01	; 1
 2ec:	30 e2       	ldi	r19, 0x20	; 32
 2ee:	30 83       	st	Z, r19
 2f0:	31 97       	sbiw	r30, 0x01	; 1
 2f2:	31 e2       	ldi	r19, 0x21	; 33
 2f4:	30 83       	st	Z, r19
 2f6:	31 97       	sbiw	r30, 0x01	; 1
 2f8:	20 83       	st	Z, r18
 2fa:	31 97       	sbiw	r30, 0x01	; 1
 2fc:	23 e2       	ldi	r18, 0x23	; 35
 2fe:	20 83       	st	Z, r18
 300:	31 97       	sbiw	r30, 0x01	; 1
 302:	40 83       	st	Z, r20
 304:	31 97       	sbiw	r30, 0x01	; 1
 306:	50 83       	st	Z, r21
 308:	31 97       	sbiw	r30, 0x01	; 1
 30a:	26 e2       	ldi	r18, 0x26	; 38
 30c:	20 83       	st	Z, r18
 30e:	31 97       	sbiw	r30, 0x01	; 1
 310:	27 e2       	ldi	r18, 0x27	; 39
 312:	20 83       	st	Z, r18
 314:	31 97       	sbiw	r30, 0x01	; 1
 316:	28 e2       	ldi	r18, 0x28	; 40
 318:	20 83       	st	Z, r18
 31a:	31 97       	sbiw	r30, 0x01	; 1
 31c:	29 e2       	ldi	r18, 0x29	; 41
 31e:	20 83       	st	Z, r18
 320:	31 97       	sbiw	r30, 0x01	; 1
 322:	20 e3       	ldi	r18, 0x30	; 48
 324:	20 83       	st	Z, r18
 326:	31 97       	sbiw	r30, 0x01	; 1
 328:	21 e3       	ldi	r18, 0x31	; 49
 32a:	20 83       	st	Z, r18
 32c:	86 97       	sbiw	r24, 0x26	; 38
 32e:	08 95       	ret

00000330 <xPortStartScheduler>:
 330:	0e 94 23 01 	call	0x246	; 0x246 <prvSetupTimerInterrupt>
 334:	a0 91 b8 06 	lds	r26, 0x06B8	; 0x8006b8 <pxCurrentTCB>
 338:	b0 91 b9 06 	lds	r27, 0x06B9	; 0x8006b9 <pxCurrentTCB+0x1>
 33c:	cd 91       	ld	r28, X+
 33e:	cd bf       	out	0x3d, r28	; 61
 340:	dd 91       	ld	r29, X+
 342:	de bf       	out	0x3e, r29	; 62
 344:	ff 91       	pop	r31
 346:	ef 91       	pop	r30
 348:	df 91       	pop	r29
 34a:	cf 91       	pop	r28
 34c:	bf 91       	pop	r27
 34e:	af 91       	pop	r26
 350:	9f 91       	pop	r25
 352:	8f 91       	pop	r24
 354:	7f 91       	pop	r23
 356:	6f 91       	pop	r22
 358:	5f 91       	pop	r21
 35a:	4f 91       	pop	r20
 35c:	3f 91       	pop	r19
 35e:	2f 91       	pop	r18
 360:	1f 91       	pop	r17
 362:	0f 91       	pop	r16
 364:	ff 90       	pop	r15
 366:	ef 90       	pop	r14
 368:	df 90       	pop	r13
 36a:	cf 90       	pop	r12
 36c:	bf 90       	pop	r11
 36e:	af 90       	pop	r10
 370:	9f 90       	pop	r9
 372:	8f 90       	pop	r8
 374:	7f 90       	pop	r7
 376:	6f 90       	pop	r6
 378:	5f 90       	pop	r5
 37a:	4f 90       	pop	r4
 37c:	3f 90       	pop	r3
 37e:	2f 90       	pop	r2
 380:	1f 90       	pop	r1
 382:	0f 90       	pop	r0
 384:	0f be       	out	0x3f, r0	; 63
 386:	0f 90       	pop	r0
 388:	08 95       	ret
 38a:	81 e0       	ldi	r24, 0x01	; 1
 38c:	08 95       	ret

0000038e <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
 38e:	0f 92       	push	r0
 390:	0f b6       	in	r0, 0x3f	; 63
 392:	f8 94       	cli
 394:	0f 92       	push	r0
 396:	1f 92       	push	r1
 398:	11 24       	eor	r1, r1
 39a:	2f 92       	push	r2
 39c:	3f 92       	push	r3
 39e:	4f 92       	push	r4
 3a0:	5f 92       	push	r5
 3a2:	6f 92       	push	r6
 3a4:	7f 92       	push	r7
 3a6:	8f 92       	push	r8
 3a8:	9f 92       	push	r9
 3aa:	af 92       	push	r10
 3ac:	bf 92       	push	r11
 3ae:	cf 92       	push	r12
 3b0:	df 92       	push	r13
 3b2:	ef 92       	push	r14
 3b4:	ff 92       	push	r15
 3b6:	0f 93       	push	r16
 3b8:	1f 93       	push	r17
 3ba:	2f 93       	push	r18
 3bc:	3f 93       	push	r19
 3be:	4f 93       	push	r20
 3c0:	5f 93       	push	r21
 3c2:	6f 93       	push	r22
 3c4:	7f 93       	push	r23
 3c6:	8f 93       	push	r24
 3c8:	9f 93       	push	r25
 3ca:	af 93       	push	r26
 3cc:	bf 93       	push	r27
 3ce:	cf 93       	push	r28
 3d0:	df 93       	push	r29
 3d2:	ef 93       	push	r30
 3d4:	ff 93       	push	r31
 3d6:	a0 91 b8 06 	lds	r26, 0x06B8	; 0x8006b8 <pxCurrentTCB>
 3da:	b0 91 b9 06 	lds	r27, 0x06B9	; 0x8006b9 <pxCurrentTCB+0x1>
 3de:	0d b6       	in	r0, 0x3d	; 61
 3e0:	0d 92       	st	X+, r0
 3e2:	0e b6       	in	r0, 0x3e	; 62
 3e4:	0d 92       	st	X+, r0
	vTaskSwitchContext();
 3e6:	0e 94 c4 06 	call	0xd88	; 0xd88 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
 3ea:	a0 91 b8 06 	lds	r26, 0x06B8	; 0x8006b8 <pxCurrentTCB>
 3ee:	b0 91 b9 06 	lds	r27, 0x06B9	; 0x8006b9 <pxCurrentTCB+0x1>
 3f2:	cd 91       	ld	r28, X+
 3f4:	cd bf       	out	0x3d, r28	; 61
 3f6:	dd 91       	ld	r29, X+
 3f8:	de bf       	out	0x3e, r29	; 62
 3fa:	ff 91       	pop	r31
 3fc:	ef 91       	pop	r30
 3fe:	df 91       	pop	r29
 400:	cf 91       	pop	r28
 402:	bf 91       	pop	r27
 404:	af 91       	pop	r26
 406:	9f 91       	pop	r25
 408:	8f 91       	pop	r24
 40a:	7f 91       	pop	r23
 40c:	6f 91       	pop	r22
 40e:	5f 91       	pop	r21
 410:	4f 91       	pop	r20
 412:	3f 91       	pop	r19
 414:	2f 91       	pop	r18
 416:	1f 91       	pop	r17
 418:	0f 91       	pop	r16
 41a:	ff 90       	pop	r15
 41c:	ef 90       	pop	r14
 41e:	df 90       	pop	r13
 420:	cf 90       	pop	r12
 422:	bf 90       	pop	r11
 424:	af 90       	pop	r10
 426:	9f 90       	pop	r9
 428:	8f 90       	pop	r8
 42a:	7f 90       	pop	r7
 42c:	6f 90       	pop	r6
 42e:	5f 90       	pop	r5
 430:	4f 90       	pop	r4
 432:	3f 90       	pop	r3
 434:	2f 90       	pop	r2
 436:	1f 90       	pop	r1
 438:	0f 90       	pop	r0
 43a:	0f be       	out	0x3f, r0	; 63
 43c:	0f 90       	pop	r0

	asm volatile ( "ret" );
 43e:	08 95       	ret

00000440 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
 440:	0f 92       	push	r0
 442:	0f b6       	in	r0, 0x3f	; 63
 444:	f8 94       	cli
 446:	0f 92       	push	r0
 448:	1f 92       	push	r1
 44a:	11 24       	eor	r1, r1
 44c:	2f 92       	push	r2
 44e:	3f 92       	push	r3
 450:	4f 92       	push	r4
 452:	5f 92       	push	r5
 454:	6f 92       	push	r6
 456:	7f 92       	push	r7
 458:	8f 92       	push	r8
 45a:	9f 92       	push	r9
 45c:	af 92       	push	r10
 45e:	bf 92       	push	r11
 460:	cf 92       	push	r12
 462:	df 92       	push	r13
 464:	ef 92       	push	r14
 466:	ff 92       	push	r15
 468:	0f 93       	push	r16
 46a:	1f 93       	push	r17
 46c:	2f 93       	push	r18
 46e:	3f 93       	push	r19
 470:	4f 93       	push	r20
 472:	5f 93       	push	r21
 474:	6f 93       	push	r22
 476:	7f 93       	push	r23
 478:	8f 93       	push	r24
 47a:	9f 93       	push	r25
 47c:	af 93       	push	r26
 47e:	bf 93       	push	r27
 480:	cf 93       	push	r28
 482:	df 93       	push	r29
 484:	ef 93       	push	r30
 486:	ff 93       	push	r31
 488:	a0 91 b8 06 	lds	r26, 0x06B8	; 0x8006b8 <pxCurrentTCB>
 48c:	b0 91 b9 06 	lds	r27, 0x06B9	; 0x8006b9 <pxCurrentTCB+0x1>
 490:	0d b6       	in	r0, 0x3d	; 61
 492:	0d 92       	st	X+, r0
 494:	0e b6       	in	r0, 0x3e	; 62
 496:	0d 92       	st	X+, r0
	if( xTaskIncrementTick() != pdFALSE )
 498:	0e 94 bf 04 	call	0x97e	; 0x97e <xTaskIncrementTick>
 49c:	81 11       	cpse	r24, r1
	{
		vTaskSwitchContext();
 49e:	0e 94 c4 06 	call	0xd88	; 0xd88 <vTaskSwitchContext>
	}
	portRESTORE_CONTEXT();
 4a2:	a0 91 b8 06 	lds	r26, 0x06B8	; 0x8006b8 <pxCurrentTCB>
 4a6:	b0 91 b9 06 	lds	r27, 0x06B9	; 0x8006b9 <pxCurrentTCB+0x1>
 4aa:	cd 91       	ld	r28, X+
 4ac:	cd bf       	out	0x3d, r28	; 61
 4ae:	dd 91       	ld	r29, X+
 4b0:	de bf       	out	0x3e, r29	; 62
 4b2:	ff 91       	pop	r31
 4b4:	ef 91       	pop	r30
 4b6:	df 91       	pop	r29
 4b8:	cf 91       	pop	r28
 4ba:	bf 91       	pop	r27
 4bc:	af 91       	pop	r26
 4be:	9f 91       	pop	r25
 4c0:	8f 91       	pop	r24
 4c2:	7f 91       	pop	r23
 4c4:	6f 91       	pop	r22
 4c6:	5f 91       	pop	r21
 4c8:	4f 91       	pop	r20
 4ca:	3f 91       	pop	r19
 4cc:	2f 91       	pop	r18
 4ce:	1f 91       	pop	r17
 4d0:	0f 91       	pop	r16
 4d2:	ff 90       	pop	r15
 4d4:	ef 90       	pop	r14
 4d6:	df 90       	pop	r13
 4d8:	cf 90       	pop	r12
 4da:	bf 90       	pop	r11
 4dc:	af 90       	pop	r10
 4de:	9f 90       	pop	r9
 4e0:	8f 90       	pop	r8
 4e2:	7f 90       	pop	r7
 4e4:	6f 90       	pop	r6
 4e6:	5f 90       	pop	r5
 4e8:	4f 90       	pop	r4
 4ea:	3f 90       	pop	r3
 4ec:	2f 90       	pop	r2
 4ee:	1f 90       	pop	r1
 4f0:	0f 90       	pop	r0
 4f2:	0f be       	out	0x3f, r0	; 63
 4f4:	0f 90       	pop	r0

	asm volatile ( "ret" );
 4f6:	08 95       	ret

000004f8 <__vector_7>:
	 * count is incremented after the context is saved.
	 */
	void TIMER1_COMPA_vect( void ) __attribute__ ( ( signal, naked ) );
	void TIMER1_COMPA_vect( void )
	{
		vPortYieldFromTick();
 4f8:	0e 94 20 02 	call	0x440	; 0x440 <vPortYieldFromTick>
		asm volatile ( "reti" );
 4fc:	18 95       	reti

000004fe <prvResetNextTaskUnblockTime>:
    }
    taskEXIT_CRITICAL();
    xYieldOccurred = xTaskResumeAll();

    return xYieldOccurred;
}
 4fe:	e0 91 80 06 	lds	r30, 0x0680	; 0x800680 <pxDelayedTaskList>
 502:	f0 91 81 06 	lds	r31, 0x0681	; 0x800681 <pxDelayedTaskList+0x1>
 506:	80 81       	ld	r24, Z
 508:	81 11       	cpse	r24, r1
 50a:	07 c0       	rjmp	.+14     	; 0x51a <prvResetNextTaskUnblockTime+0x1c>
 50c:	8f ef       	ldi	r24, 0xFF	; 255
 50e:	9f ef       	ldi	r25, 0xFF	; 255
 510:	90 93 60 06 	sts	0x0660, r25	; 0x800660 <xNextTaskUnblockTime+0x1>
 514:	80 93 5f 06 	sts	0x065F, r24	; 0x80065f <xNextTaskUnblockTime>
 518:	08 95       	ret
 51a:	e0 91 80 06 	lds	r30, 0x0680	; 0x800680 <pxDelayedTaskList>
 51e:	f0 91 81 06 	lds	r31, 0x0681	; 0x800681 <pxDelayedTaskList+0x1>
 522:	05 80       	ldd	r0, Z+5	; 0x05
 524:	f6 81       	ldd	r31, Z+6	; 0x06
 526:	e0 2d       	mov	r30, r0
 528:	80 81       	ld	r24, Z
 52a:	91 81       	ldd	r25, Z+1	; 0x01
 52c:	90 93 60 06 	sts	0x0660, r25	; 0x800660 <xNextTaskUnblockTime+0x1>
 530:	80 93 5f 06 	sts	0x065F, r24	; 0x80065f <xNextTaskUnblockTime>
 534:	08 95       	ret

00000536 <prvDeleteTCB>:
 536:	cf 93       	push	r28
 538:	df 93       	push	r29
 53a:	ec 01       	movw	r28, r24
 53c:	8f 89       	ldd	r24, Y+23	; 0x17
 53e:	98 8d       	ldd	r25, Y+24	; 0x18
 540:	0e 94 83 00 	call	0x106	; 0x106 <vPortFree>
 544:	ce 01       	movw	r24, r28
 546:	0e 94 83 00 	call	0x106	; 0x106 <vPortFree>
 54a:	df 91       	pop	r29
 54c:	cf 91       	pop	r28
 54e:	08 95       	ret

00000550 <prvInitialiseNewTask>:
 550:	6f 92       	push	r6
 552:	7f 92       	push	r7
 554:	8f 92       	push	r8
 556:	9f 92       	push	r9
 558:	af 92       	push	r10
 55a:	bf 92       	push	r11
 55c:	cf 92       	push	r12
 55e:	df 92       	push	r13
 560:	ef 92       	push	r14
 562:	0f 93       	push	r16
 564:	1f 93       	push	r17
 566:	cf 93       	push	r28
 568:	df 93       	push	r29
 56a:	cd b7       	in	r28, 0x3d	; 61
 56c:	de b7       	in	r29, 0x3e	; 62
 56e:	4c 01       	movw	r8, r24
 570:	f5 01       	movw	r30, r10
 572:	87 89       	ldd	r24, Z+23	; 0x17
 574:	90 8d       	ldd	r25, Z+24	; 0x18
 576:	21 50       	subi	r18, 0x01	; 1
 578:	31 09       	sbc	r19, r1
 57a:	3c 01       	movw	r6, r24
 57c:	62 0e       	add	r6, r18
 57e:	73 1e       	adc	r7, r19
 580:	61 15       	cp	r22, r1
 582:	71 05       	cpc	r23, r1
 584:	89 f4       	brne	.+34     	; 0x5a8 <prvInitialiseNewTask+0x58>
 586:	15 c0       	rjmp	.+42     	; 0x5b2 <prvInitialiseNewTask+0x62>
 588:	82 2f       	mov	r24, r18
 58a:	90 e0       	ldi	r25, 0x00	; 0
 58c:	fb 01       	movw	r30, r22
 58e:	e8 0f       	add	r30, r24
 590:	f9 1f       	adc	r31, r25
 592:	30 81       	ld	r19, Z
 594:	d5 01       	movw	r26, r10
 596:	a8 0f       	add	r26, r24
 598:	b9 1f       	adc	r27, r25
 59a:	59 96       	adiw	r26, 0x19	; 25
 59c:	3c 93       	st	X, r19
 59e:	80 81       	ld	r24, Z
 5a0:	88 23       	and	r24, r24
 5a2:	29 f0       	breq	.+10     	; 0x5ae <prvInitialiseNewTask+0x5e>
 5a4:	2f 5f       	subi	r18, 0xFF	; 255
 5a6:	01 c0       	rjmp	.+2      	; 0x5aa <prvInitialiseNewTask+0x5a>
 5a8:	20 e0       	ldi	r18, 0x00	; 0
 5aa:	28 30       	cpi	r18, 0x08	; 8
 5ac:	68 f3       	brcs	.-38     	; 0x588 <prvInitialiseNewTask+0x38>
 5ae:	f5 01       	movw	r30, r10
 5b0:	10 a2       	std	Z+32, r1	; 0x20
 5b2:	f3 e0       	ldi	r31, 0x03	; 3
 5b4:	fe 15       	cp	r31, r14
 5b6:	20 f4       	brcc	.+8      	; 0x5c0 <prvInitialiseNewTask+0x70>
 5b8:	0f 2e       	mov	r0, r31
 5ba:	f3 e0       	ldi	r31, 0x03	; 3
 5bc:	ef 2e       	mov	r14, r31
 5be:	f0 2d       	mov	r31, r0
 5c0:	f5 01       	movw	r30, r10
 5c2:	e6 8a       	std	Z+22, r14	; 0x16
 5c4:	c5 01       	movw	r24, r10
 5c6:	02 96       	adiw	r24, 0x02	; 2
 5c8:	0e 94 92 00 	call	0x124	; 0x124 <vListInitialiseItem>
 5cc:	c5 01       	movw	r24, r10
 5ce:	0c 96       	adiw	r24, 0x0c	; 12
 5d0:	0e 94 92 00 	call	0x124	; 0x124 <vListInitialiseItem>
 5d4:	f5 01       	movw	r30, r10
 5d6:	b1 86       	std	Z+9, r11	; 0x09
 5d8:	a0 86       	std	Z+8, r10	; 0x08
 5da:	84 e0       	ldi	r24, 0x04	; 4
 5dc:	90 e0       	ldi	r25, 0x00	; 0
 5de:	8e 19       	sub	r24, r14
 5e0:	91 09       	sbc	r25, r1
 5e2:	95 87       	std	Z+13, r25	; 0x0d
 5e4:	84 87       	std	Z+12, r24	; 0x0c
 5e6:	b3 8a       	std	Z+19, r11	; 0x13
 5e8:	a2 8a       	std	Z+18, r10	; 0x12
 5ea:	a8 01       	movw	r20, r16
 5ec:	b4 01       	movw	r22, r8
 5ee:	c3 01       	movw	r24, r6
 5f0:	0e 94 2c 01 	call	0x258	; 0x258 <pxPortInitialiseStack>
 5f4:	f5 01       	movw	r30, r10
 5f6:	91 83       	std	Z+1, r25	; 0x01
 5f8:	80 83       	st	Z, r24
 5fa:	c1 14       	cp	r12, r1
 5fc:	d1 04       	cpc	r13, r1
 5fe:	19 f0       	breq	.+6      	; 0x606 <prvInitialiseNewTask+0xb6>
 600:	f6 01       	movw	r30, r12
 602:	b1 82       	std	Z+1, r11	; 0x01
 604:	a0 82       	st	Z, r10
 606:	df 91       	pop	r29
 608:	cf 91       	pop	r28
 60a:	1f 91       	pop	r17
 60c:	0f 91       	pop	r16
 60e:	ef 90       	pop	r14
 610:	df 90       	pop	r13
 612:	cf 90       	pop	r12
 614:	bf 90       	pop	r11
 616:	af 90       	pop	r10
 618:	9f 90       	pop	r9
 61a:	8f 90       	pop	r8
 61c:	7f 90       	pop	r7
 61e:	6f 90       	pop	r6
 620:	08 95       	ret

00000622 <prvInitialiseTaskLists>:
 622:	cf 93       	push	r28
 624:	c0 e0       	ldi	r28, 0x00	; 0
 626:	10 c0       	rjmp	.+32     	; 0x648 <prvInitialiseTaskLists+0x26>
 628:	8c 2f       	mov	r24, r28
 62a:	90 e0       	ldi	r25, 0x00	; 0
 62c:	9c 01       	movw	r18, r24
 62e:	22 0f       	add	r18, r18
 630:	33 1f       	adc	r19, r19
 632:	22 0f       	add	r18, r18
 634:	33 1f       	adc	r19, r19
 636:	22 0f       	add	r18, r18
 638:	33 1f       	adc	r19, r19
 63a:	82 0f       	add	r24, r18
 63c:	93 1f       	adc	r25, r19
 63e:	8c 56       	subi	r24, 0x6C	; 108
 640:	99 4f       	sbci	r25, 0xF9	; 249
 642:	0e 94 84 00 	call	0x108	; 0x108 <vListInitialise>
 646:	cf 5f       	subi	r28, 0xFF	; 255
 648:	c4 30       	cpi	r28, 0x04	; 4
 64a:	70 f3       	brcs	.-36     	; 0x628 <prvInitialiseTaskLists+0x6>
 64c:	8b e8       	ldi	r24, 0x8B	; 139
 64e:	96 e0       	ldi	r25, 0x06	; 6
 650:	0e 94 84 00 	call	0x108	; 0x108 <vListInitialise>
 654:	82 e8       	ldi	r24, 0x82	; 130
 656:	96 e0       	ldi	r25, 0x06	; 6
 658:	0e 94 84 00 	call	0x108	; 0x108 <vListInitialise>
 65c:	85 e7       	ldi	r24, 0x75	; 117
 65e:	96 e0       	ldi	r25, 0x06	; 6
 660:	0e 94 84 00 	call	0x108	; 0x108 <vListInitialise>
 664:	8c e6       	ldi	r24, 0x6C	; 108
 666:	96 e0       	ldi	r25, 0x06	; 6
 668:	0e 94 84 00 	call	0x108	; 0x108 <vListInitialise>
 66c:	8b e8       	ldi	r24, 0x8B	; 139
 66e:	96 e0       	ldi	r25, 0x06	; 6
 670:	90 93 81 06 	sts	0x0681, r25	; 0x800681 <pxDelayedTaskList+0x1>
 674:	80 93 80 06 	sts	0x0680, r24	; 0x800680 <pxDelayedTaskList>
 678:	82 e8       	ldi	r24, 0x82	; 130
 67a:	96 e0       	ldi	r25, 0x06	; 6
 67c:	90 93 7f 06 	sts	0x067F, r25	; 0x80067f <pxOverflowDelayedTaskList+0x1>
 680:	80 93 7e 06 	sts	0x067E, r24	; 0x80067e <pxOverflowDelayedTaskList>
 684:	cf 91       	pop	r28
 686:	08 95       	ret

00000688 <prvAddNewTaskToReadyList>:
 688:	cf 93       	push	r28
 68a:	df 93       	push	r29
 68c:	ec 01       	movw	r28, r24
 68e:	0f b6       	in	r0, 0x3f	; 63
 690:	f8 94       	cli
 692:	0f 92       	push	r0
 694:	80 91 6a 06 	lds	r24, 0x066A	; 0x80066a <uxCurrentNumberOfTasks>
 698:	8f 5f       	subi	r24, 0xFF	; 255
 69a:	80 93 6a 06 	sts	0x066A, r24	; 0x80066a <uxCurrentNumberOfTasks>
 69e:	80 91 b8 06 	lds	r24, 0x06B8	; 0x8006b8 <pxCurrentTCB>
 6a2:	90 91 b9 06 	lds	r25, 0x06B9	; 0x8006b9 <pxCurrentTCB+0x1>
 6a6:	89 2b       	or	r24, r25
 6a8:	59 f4       	brne	.+22     	; 0x6c0 <prvAddNewTaskToReadyList+0x38>
 6aa:	d0 93 b9 06 	sts	0x06B9, r29	; 0x8006b9 <pxCurrentTCB+0x1>
 6ae:	c0 93 b8 06 	sts	0x06B8, r28	; 0x8006b8 <pxCurrentTCB>
 6b2:	80 91 6a 06 	lds	r24, 0x066A	; 0x80066a <uxCurrentNumberOfTasks>
 6b6:	81 30       	cpi	r24, 0x01	; 1
 6b8:	99 f4       	brne	.+38     	; 0x6e0 <prvAddNewTaskToReadyList+0x58>
 6ba:	0e 94 11 03 	call	0x622	; 0x622 <prvInitialiseTaskLists>
 6be:	10 c0       	rjmp	.+32     	; 0x6e0 <prvAddNewTaskToReadyList+0x58>
 6c0:	80 91 66 06 	lds	r24, 0x0666	; 0x800666 <xSchedulerRunning>
 6c4:	81 11       	cpse	r24, r1
 6c6:	0c c0       	rjmp	.+24     	; 0x6e0 <prvAddNewTaskToReadyList+0x58>
 6c8:	e0 91 b8 06 	lds	r30, 0x06B8	; 0x8006b8 <pxCurrentTCB>
 6cc:	f0 91 b9 06 	lds	r31, 0x06B9	; 0x8006b9 <pxCurrentTCB+0x1>
 6d0:	96 89       	ldd	r25, Z+22	; 0x16
 6d2:	8e 89       	ldd	r24, Y+22	; 0x16
 6d4:	89 17       	cp	r24, r25
 6d6:	20 f0       	brcs	.+8      	; 0x6e0 <prvAddNewTaskToReadyList+0x58>
 6d8:	d0 93 b9 06 	sts	0x06B9, r29	; 0x8006b9 <pxCurrentTCB+0x1>
 6dc:	c0 93 b8 06 	sts	0x06B8, r28	; 0x8006b8 <pxCurrentTCB>
 6e0:	80 91 61 06 	lds	r24, 0x0661	; 0x800661 <uxTaskNumber>
 6e4:	8f 5f       	subi	r24, 0xFF	; 255
 6e6:	80 93 61 06 	sts	0x0661, r24	; 0x800661 <uxTaskNumber>
 6ea:	8e 89       	ldd	r24, Y+22	; 0x16
 6ec:	90 91 67 06 	lds	r25, 0x0667	; 0x800667 <uxTopReadyPriority>
 6f0:	98 17       	cp	r25, r24
 6f2:	10 f4       	brcc	.+4      	; 0x6f8 <prvAddNewTaskToReadyList+0x70>
 6f4:	80 93 67 06 	sts	0x0667, r24	; 0x800667 <uxTopReadyPriority>
 6f8:	90 e0       	ldi	r25, 0x00	; 0
 6fa:	fc 01       	movw	r30, r24
 6fc:	ee 0f       	add	r30, r30
 6fe:	ff 1f       	adc	r31, r31
 700:	ee 0f       	add	r30, r30
 702:	ff 1f       	adc	r31, r31
 704:	ee 0f       	add	r30, r30
 706:	ff 1f       	adc	r31, r31
 708:	8e 0f       	add	r24, r30
 70a:	9f 1f       	adc	r25, r31
 70c:	fc 01       	movw	r30, r24
 70e:	ec 56       	subi	r30, 0x6C	; 108
 710:	f9 4f       	sbci	r31, 0xF9	; 249
 712:	01 80       	ldd	r0, Z+1	; 0x01
 714:	f2 81       	ldd	r31, Z+2	; 0x02
 716:	e0 2d       	mov	r30, r0
 718:	fd 83       	std	Y+5, r31	; 0x05
 71a:	ec 83       	std	Y+4, r30	; 0x04
 71c:	84 81       	ldd	r24, Z+4	; 0x04
 71e:	95 81       	ldd	r25, Z+5	; 0x05
 720:	9f 83       	std	Y+7, r25	; 0x07
 722:	8e 83       	std	Y+6, r24	; 0x06
 724:	a4 81       	ldd	r26, Z+4	; 0x04
 726:	b5 81       	ldd	r27, Z+5	; 0x05
 728:	ce 01       	movw	r24, r28
 72a:	02 96       	adiw	r24, 0x02	; 2
 72c:	13 96       	adiw	r26, 0x03	; 3
 72e:	9c 93       	st	X, r25
 730:	8e 93       	st	-X, r24
 732:	12 97       	sbiw	r26, 0x02	; 2
 734:	95 83       	std	Z+5, r25	; 0x05
 736:	84 83       	std	Z+4, r24	; 0x04
 738:	ee 89       	ldd	r30, Y+22	; 0x16
 73a:	f0 e0       	ldi	r31, 0x00	; 0
 73c:	cf 01       	movw	r24, r30
 73e:	88 0f       	add	r24, r24
 740:	99 1f       	adc	r25, r25
 742:	88 0f       	add	r24, r24
 744:	99 1f       	adc	r25, r25
 746:	88 0f       	add	r24, r24
 748:	99 1f       	adc	r25, r25
 74a:	e8 0f       	add	r30, r24
 74c:	f9 1f       	adc	r31, r25
 74e:	ec 56       	subi	r30, 0x6C	; 108
 750:	f9 4f       	sbci	r31, 0xF9	; 249
 752:	fb 87       	std	Y+11, r31	; 0x0b
 754:	ea 87       	std	Y+10, r30	; 0x0a
 756:	80 81       	ld	r24, Z
 758:	8f 5f       	subi	r24, 0xFF	; 255
 75a:	80 83       	st	Z, r24
 75c:	0f 90       	pop	r0
 75e:	0f be       	out	0x3f, r0	; 63
 760:	80 91 66 06 	lds	r24, 0x0666	; 0x800666 <xSchedulerRunning>
 764:	88 23       	and	r24, r24
 766:	51 f0       	breq	.+20     	; 0x77c <prvAddNewTaskToReadyList+0xf4>
 768:	e0 91 b8 06 	lds	r30, 0x06B8	; 0x8006b8 <pxCurrentTCB>
 76c:	f0 91 b9 06 	lds	r31, 0x06B9	; 0x8006b9 <pxCurrentTCB+0x1>
 770:	96 89       	ldd	r25, Z+22	; 0x16
 772:	8e 89       	ldd	r24, Y+22	; 0x16
 774:	98 17       	cp	r25, r24
 776:	10 f4       	brcc	.+4      	; 0x77c <prvAddNewTaskToReadyList+0xf4>
 778:	0e 94 c7 01 	call	0x38e	; 0x38e <vPortYield>
 77c:	df 91       	pop	r29
 77e:	cf 91       	pop	r28
 780:	08 95       	ret

00000782 <prvCheckTasksWaitingTermination>:
 782:	cf 93       	push	r28
 784:	df 93       	push	r29
 786:	1c c0       	rjmp	.+56     	; 0x7c0 <prvCheckTasksWaitingTermination+0x3e>
 788:	0f b6       	in	r0, 0x3f	; 63
 78a:	f8 94       	cli
 78c:	0f 92       	push	r0
 78e:	e0 91 71 06 	lds	r30, 0x0671	; 0x800671 <xTasksWaitingTermination+0x5>
 792:	f0 91 72 06 	lds	r31, 0x0672	; 0x800672 <xTasksWaitingTermination+0x6>
 796:	c6 81       	ldd	r28, Z+6	; 0x06
 798:	d7 81       	ldd	r29, Z+7	; 0x07
 79a:	ce 01       	movw	r24, r28
 79c:	02 96       	adiw	r24, 0x02	; 2
 79e:	0e 94 c7 00 	call	0x18e	; 0x18e <uxListRemove>
 7a2:	80 91 6a 06 	lds	r24, 0x066A	; 0x80066a <uxCurrentNumberOfTasks>
 7a6:	81 50       	subi	r24, 0x01	; 1
 7a8:	80 93 6a 06 	sts	0x066A, r24	; 0x80066a <uxCurrentNumberOfTasks>
 7ac:	80 91 6b 06 	lds	r24, 0x066B	; 0x80066b <uxDeletedTasksWaitingCleanUp>
 7b0:	81 50       	subi	r24, 0x01	; 1
 7b2:	80 93 6b 06 	sts	0x066B, r24	; 0x80066b <uxDeletedTasksWaitingCleanUp>
 7b6:	0f 90       	pop	r0
 7b8:	0f be       	out	0x3f, r0	; 63
 7ba:	ce 01       	movw	r24, r28
 7bc:	0e 94 9b 02 	call	0x536	; 0x536 <prvDeleteTCB>
 7c0:	80 91 6b 06 	lds	r24, 0x066B	; 0x80066b <uxDeletedTasksWaitingCleanUp>
 7c4:	81 11       	cpse	r24, r1
 7c6:	e0 cf       	rjmp	.-64     	; 0x788 <prvCheckTasksWaitingTermination+0x6>
 7c8:	df 91       	pop	r29
 7ca:	cf 91       	pop	r28
 7cc:	08 95       	ret

000007ce <prvIdleTask>:
 7ce:	0e 94 c1 03 	call	0x782	; 0x782 <prvCheckTasksWaitingTermination>
 7d2:	80 91 94 06 	lds	r24, 0x0694	; 0x800694 <pxReadyTasksLists>
 7d6:	82 30       	cpi	r24, 0x02	; 2
 7d8:	d0 f3       	brcs	.-12     	; 0x7ce <prvIdleTask>
 7da:	0e 94 c7 01 	call	0x38e	; 0x38e <vPortYield>
 7de:	f7 cf       	rjmp	.-18     	; 0x7ce <prvIdleTask>

000007e0 <prvAddCurrentTaskToDelayedList>:
 7e0:	0f 93       	push	r16
 7e2:	1f 93       	push	r17
 7e4:	cf 93       	push	r28
 7e6:	df 93       	push	r29
 7e8:	ec 01       	movw	r28, r24
 7ea:	00 91 68 06 	lds	r16, 0x0668	; 0x800668 <xTickCount>
 7ee:	10 91 69 06 	lds	r17, 0x0669	; 0x800669 <xTickCount+0x1>
 7f2:	80 91 b8 06 	lds	r24, 0x06B8	; 0x8006b8 <pxCurrentTCB>
 7f6:	90 91 b9 06 	lds	r25, 0x06B9	; 0x8006b9 <pxCurrentTCB+0x1>
 7fa:	02 96       	adiw	r24, 0x02	; 2
 7fc:	0e 94 c7 00 	call	0x18e	; 0x18e <uxListRemove>
 800:	c0 0f       	add	r28, r16
 802:	d1 1f       	adc	r29, r17
 804:	e0 91 b8 06 	lds	r30, 0x06B8	; 0x8006b8 <pxCurrentTCB>
 808:	f0 91 b9 06 	lds	r31, 0x06B9	; 0x8006b9 <pxCurrentTCB+0x1>
 80c:	d3 83       	std	Z+3, r29	; 0x03
 80e:	c2 83       	std	Z+2, r28	; 0x02
 810:	c0 17       	cp	r28, r16
 812:	d1 07       	cpc	r29, r17
 814:	68 f4       	brcc	.+26     	; 0x830 <__DATA_REGION_LENGTH__+0x30>
 816:	60 91 b8 06 	lds	r22, 0x06B8	; 0x8006b8 <pxCurrentTCB>
 81a:	70 91 b9 06 	lds	r23, 0x06B9	; 0x8006b9 <pxCurrentTCB+0x1>
 81e:	80 91 7e 06 	lds	r24, 0x067E	; 0x80067e <pxOverflowDelayedTaskList>
 822:	90 91 7f 06 	lds	r25, 0x067F	; 0x80067f <pxOverflowDelayedTaskList+0x1>
 826:	6e 5f       	subi	r22, 0xFE	; 254
 828:	7f 4f       	sbci	r23, 0xFF	; 255
 82a:	0e 94 96 00 	call	0x12c	; 0x12c <vListInsert>
 82e:	17 c0       	rjmp	.+46     	; 0x85e <__DATA_REGION_LENGTH__+0x5e>
 830:	60 91 b8 06 	lds	r22, 0x06B8	; 0x8006b8 <pxCurrentTCB>
 834:	70 91 b9 06 	lds	r23, 0x06B9	; 0x8006b9 <pxCurrentTCB+0x1>
 838:	80 91 80 06 	lds	r24, 0x0680	; 0x800680 <pxDelayedTaskList>
 83c:	90 91 81 06 	lds	r25, 0x0681	; 0x800681 <pxDelayedTaskList+0x1>
 840:	6e 5f       	subi	r22, 0xFE	; 254
 842:	7f 4f       	sbci	r23, 0xFF	; 255
 844:	0e 94 96 00 	call	0x12c	; 0x12c <vListInsert>
 848:	80 91 5f 06 	lds	r24, 0x065F	; 0x80065f <xNextTaskUnblockTime>
 84c:	90 91 60 06 	lds	r25, 0x0660	; 0x800660 <xNextTaskUnblockTime+0x1>
 850:	c8 17       	cp	r28, r24
 852:	d9 07       	cpc	r29, r25
 854:	20 f4       	brcc	.+8      	; 0x85e <__DATA_REGION_LENGTH__+0x5e>
 856:	d0 93 60 06 	sts	0x0660, r29	; 0x800660 <xNextTaskUnblockTime+0x1>
 85a:	c0 93 5f 06 	sts	0x065F, r28	; 0x80065f <xNextTaskUnblockTime>
 85e:	df 91       	pop	r29
 860:	cf 91       	pop	r28
 862:	1f 91       	pop	r17
 864:	0f 91       	pop	r16
 866:	08 95       	ret

00000868 <xTaskCreate>:
 868:	2f 92       	push	r2
 86a:	3f 92       	push	r3
 86c:	4f 92       	push	r4
 86e:	5f 92       	push	r5
 870:	6f 92       	push	r6
 872:	7f 92       	push	r7
 874:	8f 92       	push	r8
 876:	9f 92       	push	r9
 878:	af 92       	push	r10
 87a:	bf 92       	push	r11
 87c:	cf 92       	push	r12
 87e:	df 92       	push	r13
 880:	ef 92       	push	r14
 882:	ff 92       	push	r15
 884:	0f 93       	push	r16
 886:	1f 93       	push	r17
 888:	cf 93       	push	r28
 88a:	df 93       	push	r29
 88c:	3c 01       	movw	r6, r24
 88e:	1b 01       	movw	r2, r22
 890:	5a 01       	movw	r10, r20
 892:	29 01       	movw	r4, r18
 894:	ca 01       	movw	r24, r20
 896:	0e 94 49 00 	call	0x92	; 0x92 <pvPortMalloc>
 89a:	6c 01       	movw	r12, r24
 89c:	89 2b       	or	r24, r25
 89e:	99 f0       	breq	.+38     	; 0x8c6 <xTaskCreate+0x5e>
 8a0:	86 e2       	ldi	r24, 0x26	; 38
 8a2:	90 e0       	ldi	r25, 0x00	; 0
 8a4:	0e 94 49 00 	call	0x92	; 0x92 <pvPortMalloc>
 8a8:	ec 01       	movw	r28, r24
 8aa:	89 2b       	or	r24, r25
 8ac:	41 f0       	breq	.+16     	; 0x8be <xTaskCreate+0x56>
 8ae:	86 e2       	ldi	r24, 0x26	; 38
 8b0:	fe 01       	movw	r30, r28
 8b2:	11 92       	st	Z+, r1
 8b4:	8a 95       	dec	r24
 8b6:	e9 f7       	brne	.-6      	; 0x8b2 <xTaskCreate+0x4a>
 8b8:	d8 8e       	std	Y+24, r13	; 0x18
 8ba:	cf 8a       	std	Y+23, r12	; 0x17
 8bc:	06 c0       	rjmp	.+12     	; 0x8ca <xTaskCreate+0x62>
 8be:	c6 01       	movw	r24, r12
 8c0:	0e 94 83 00 	call	0x106	; 0x106 <vPortFree>
 8c4:	02 c0       	rjmp	.+4      	; 0x8ca <xTaskCreate+0x62>
 8c6:	c0 e0       	ldi	r28, 0x00	; 0
 8c8:	d0 e0       	ldi	r29, 0x00	; 0
 8ca:	20 97       	sbiw	r28, 0x00	; 0
 8cc:	91 f0       	breq	.+36     	; 0x8f2 <xTaskCreate+0x8a>
 8ce:	95 01       	movw	r18, r10
 8d0:	40 e0       	ldi	r20, 0x00	; 0
 8d2:	50 e0       	ldi	r21, 0x00	; 0
 8d4:	81 2c       	mov	r8, r1
 8d6:	91 2c       	mov	r9, r1
 8d8:	5e 01       	movw	r10, r28
 8da:	67 01       	movw	r12, r14
 8dc:	e0 2e       	mov	r14, r16
 8de:	82 01       	movw	r16, r4
 8e0:	b1 01       	movw	r22, r2
 8e2:	c3 01       	movw	r24, r6
 8e4:	0e 94 a8 02 	call	0x550	; 0x550 <prvInitialiseNewTask>
 8e8:	ce 01       	movw	r24, r28
 8ea:	0e 94 44 03 	call	0x688	; 0x688 <prvAddNewTaskToReadyList>
 8ee:	81 e0       	ldi	r24, 0x01	; 1
 8f0:	01 c0       	rjmp	.+2      	; 0x8f4 <xTaskCreate+0x8c>
 8f2:	8f ef       	ldi	r24, 0xFF	; 255
 8f4:	df 91       	pop	r29
 8f6:	cf 91       	pop	r28
 8f8:	1f 91       	pop	r17
 8fa:	0f 91       	pop	r16
 8fc:	ff 90       	pop	r15
 8fe:	ef 90       	pop	r14
 900:	df 90       	pop	r13
 902:	cf 90       	pop	r12
 904:	bf 90       	pop	r11
 906:	af 90       	pop	r10
 908:	9f 90       	pop	r9
 90a:	8f 90       	pop	r8
 90c:	7f 90       	pop	r7
 90e:	6f 90       	pop	r6
 910:	5f 90       	pop	r5
 912:	4f 90       	pop	r4
 914:	3f 90       	pop	r3
 916:	2f 90       	pop	r2
 918:	08 95       	ret

0000091a <vTaskStartScheduler>:
 91a:	ef 92       	push	r14
 91c:	ff 92       	push	r15
 91e:	0f 93       	push	r16
 920:	0f 2e       	mov	r0, r31
 922:	fd e5       	ldi	r31, 0x5D	; 93
 924:	ef 2e       	mov	r14, r31
 926:	f6 e0       	ldi	r31, 0x06	; 6
 928:	ff 2e       	mov	r15, r31
 92a:	f0 2d       	mov	r31, r0
 92c:	00 e0       	ldi	r16, 0x00	; 0
 92e:	20 e0       	ldi	r18, 0x00	; 0
 930:	30 e0       	ldi	r19, 0x00	; 0
 932:	45 e5       	ldi	r20, 0x55	; 85
 934:	50 e0       	ldi	r21, 0x00	; 0
 936:	67 e7       	ldi	r22, 0x77	; 119
 938:	70 e0       	ldi	r23, 0x00	; 0
 93a:	87 ee       	ldi	r24, 0xE7	; 231
 93c:	93 e0       	ldi	r25, 0x03	; 3
 93e:	0e 94 34 04 	call	0x868	; 0x868 <xTaskCreate>
 942:	81 30       	cpi	r24, 0x01	; 1
 944:	81 f4       	brne	.+32     	; 0x966 <vTaskStartScheduler+0x4c>
 946:	f8 94       	cli
 948:	8f ef       	ldi	r24, 0xFF	; 255
 94a:	9f ef       	ldi	r25, 0xFF	; 255
 94c:	90 93 60 06 	sts	0x0660, r25	; 0x800660 <xNextTaskUnblockTime+0x1>
 950:	80 93 5f 06 	sts	0x065F, r24	; 0x80065f <xNextTaskUnblockTime>
 954:	81 e0       	ldi	r24, 0x01	; 1
 956:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <xSchedulerRunning>
 95a:	10 92 69 06 	sts	0x0669, r1	; 0x800669 <xTickCount+0x1>
 95e:	10 92 68 06 	sts	0x0668, r1	; 0x800668 <xTickCount>
 962:	0e 94 98 01 	call	0x330	; 0x330 <xPortStartScheduler>
 966:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 96a:	0f 91       	pop	r16
 96c:	ff 90       	pop	r15
 96e:	ef 90       	pop	r14
 970:	08 95       	ret

00000972 <vTaskSuspendAll>:
 972:	80 91 5c 06 	lds	r24, 0x065C	; 0x80065c <uxSchedulerSuspended>
 976:	8f 5f       	subi	r24, 0xFF	; 255
 978:	80 93 5c 06 	sts	0x065C, r24	; 0x80065c <uxSchedulerSuspended>
 97c:	08 95       	ret

0000097e <xTaskIncrementTick>:
 97e:	0f 93       	push	r16
 980:	1f 93       	push	r17
 982:	cf 93       	push	r28
 984:	df 93       	push	r29
 986:	80 91 5c 06 	lds	r24, 0x065C	; 0x80065c <uxSchedulerSuspended>
 98a:	81 11       	cpse	r24, r1
 98c:	01 c1       	rjmp	.+514    	; 0xb90 <xTaskIncrementTick+0x212>
 98e:	c0 91 68 06 	lds	r28, 0x0668	; 0x800668 <xTickCount>
 992:	d0 91 69 06 	lds	r29, 0x0669	; 0x800669 <xTickCount+0x1>
 996:	8e 01       	movw	r16, r28
 998:	0f 5f       	subi	r16, 0xFF	; 255
 99a:	1f 4f       	sbci	r17, 0xFF	; 255
 99c:	10 93 69 06 	sts	0x0669, r17	; 0x800669 <xTickCount+0x1>
 9a0:	00 93 68 06 	sts	0x0668, r16	; 0x800668 <xTickCount>
 9a4:	01 15       	cp	r16, r1
 9a6:	11 05       	cpc	r17, r1
 9a8:	b9 f4       	brne	.+46     	; 0x9d8 <xTaskIncrementTick+0x5a>
 9aa:	80 91 80 06 	lds	r24, 0x0680	; 0x800680 <pxDelayedTaskList>
 9ae:	90 91 81 06 	lds	r25, 0x0681	; 0x800681 <pxDelayedTaskList+0x1>
 9b2:	20 91 7e 06 	lds	r18, 0x067E	; 0x80067e <pxOverflowDelayedTaskList>
 9b6:	30 91 7f 06 	lds	r19, 0x067F	; 0x80067f <pxOverflowDelayedTaskList+0x1>
 9ba:	30 93 81 06 	sts	0x0681, r19	; 0x800681 <pxDelayedTaskList+0x1>
 9be:	20 93 80 06 	sts	0x0680, r18	; 0x800680 <pxDelayedTaskList>
 9c2:	90 93 7f 06 	sts	0x067F, r25	; 0x80067f <pxOverflowDelayedTaskList+0x1>
 9c6:	80 93 7e 06 	sts	0x067E, r24	; 0x80067e <pxOverflowDelayedTaskList>
 9ca:	80 91 62 06 	lds	r24, 0x0662	; 0x800662 <xNumOfOverflows>
 9ce:	8f 5f       	subi	r24, 0xFF	; 255
 9d0:	80 93 62 06 	sts	0x0662, r24	; 0x800662 <xNumOfOverflows>
 9d4:	0e 94 7f 02 	call	0x4fe	; 0x4fe <prvResetNextTaskUnblockTime>
 9d8:	80 91 5f 06 	lds	r24, 0x065F	; 0x80065f <xNextTaskUnblockTime>
 9dc:	90 91 60 06 	lds	r25, 0x0660	; 0x800660 <xNextTaskUnblockTime+0x1>
 9e0:	08 17       	cp	r16, r24
 9e2:	19 07       	cpc	r17, r25
 9e4:	20 f4       	brcc	.+8      	; 0x9ee <xTaskIncrementTick+0x70>
 9e6:	80 e0       	ldi	r24, 0x00	; 0
 9e8:	b8 c0       	rjmp	.+368    	; 0xb5a <xTaskIncrementTick+0x1dc>
 9ea:	81 e0       	ldi	r24, 0x01	; 1
 9ec:	01 c0       	rjmp	.+2      	; 0x9f0 <xTaskIncrementTick+0x72>
 9ee:	80 e0       	ldi	r24, 0x00	; 0
 9f0:	e0 91 80 06 	lds	r30, 0x0680	; 0x800680 <pxDelayedTaskList>
 9f4:	f0 91 81 06 	lds	r31, 0x0681	; 0x800681 <pxDelayedTaskList+0x1>
 9f8:	90 81       	ld	r25, Z
 9fa:	91 11       	cpse	r25, r1
 9fc:	07 c0       	rjmp	.+14     	; 0xa0c <xTaskIncrementTick+0x8e>
 9fe:	2f ef       	ldi	r18, 0xFF	; 255
 a00:	3f ef       	ldi	r19, 0xFF	; 255
 a02:	30 93 60 06 	sts	0x0660, r19	; 0x800660 <xNextTaskUnblockTime+0x1>
 a06:	20 93 5f 06 	sts	0x065F, r18	; 0x80065f <xNextTaskUnblockTime>
 a0a:	a7 c0       	rjmp	.+334    	; 0xb5a <xTaskIncrementTick+0x1dc>
 a0c:	e0 91 80 06 	lds	r30, 0x0680	; 0x800680 <pxDelayedTaskList>
 a10:	f0 91 81 06 	lds	r31, 0x0681	; 0x800681 <pxDelayedTaskList+0x1>
 a14:	05 80       	ldd	r0, Z+5	; 0x05
 a16:	f6 81       	ldd	r31, Z+6	; 0x06
 a18:	e0 2d       	mov	r30, r0
 a1a:	06 80       	ldd	r0, Z+6	; 0x06
 a1c:	f7 81       	ldd	r31, Z+7	; 0x07
 a1e:	e0 2d       	mov	r30, r0
 a20:	22 81       	ldd	r18, Z+2	; 0x02
 a22:	33 81       	ldd	r19, Z+3	; 0x03
 a24:	02 17       	cp	r16, r18
 a26:	13 07       	cpc	r17, r19
 a28:	28 f4       	brcc	.+10     	; 0xa34 <xTaskIncrementTick+0xb6>
 a2a:	30 93 60 06 	sts	0x0660, r19	; 0x800660 <xNextTaskUnblockTime+0x1>
 a2e:	20 93 5f 06 	sts	0x065F, r18	; 0x80065f <xNextTaskUnblockTime>
 a32:	93 c0       	rjmp	.+294    	; 0xb5a <xTaskIncrementTick+0x1dc>
 a34:	a2 85       	ldd	r26, Z+10	; 0x0a
 a36:	b3 85       	ldd	r27, Z+11	; 0x0b
 a38:	24 81       	ldd	r18, Z+4	; 0x04
 a3a:	35 81       	ldd	r19, Z+5	; 0x05
 a3c:	46 81       	ldd	r20, Z+6	; 0x06
 a3e:	57 81       	ldd	r21, Z+7	; 0x07
 a40:	e9 01       	movw	r28, r18
 a42:	5d 83       	std	Y+5, r21	; 0x05
 a44:	4c 83       	std	Y+4, r20	; 0x04
 a46:	26 81       	ldd	r18, Z+6	; 0x06
 a48:	37 81       	ldd	r19, Z+7	; 0x07
 a4a:	44 81       	ldd	r20, Z+4	; 0x04
 a4c:	55 81       	ldd	r21, Z+5	; 0x05
 a4e:	e9 01       	movw	r28, r18
 a50:	5b 83       	std	Y+3, r21	; 0x03
 a52:	4a 83       	std	Y+2, r20	; 0x02
 a54:	11 96       	adiw	r26, 0x01	; 1
 a56:	2d 91       	ld	r18, X+
 a58:	3c 91       	ld	r19, X
 a5a:	12 97       	sbiw	r26, 0x02	; 2
 a5c:	af 01       	movw	r20, r30
 a5e:	4e 5f       	subi	r20, 0xFE	; 254
 a60:	5f 4f       	sbci	r21, 0xFF	; 255
 a62:	24 17       	cp	r18, r20
 a64:	35 07       	cpc	r19, r21
 a66:	31 f4       	brne	.+12     	; 0xa74 <xTaskIncrementTick+0xf6>
 a68:	26 81       	ldd	r18, Z+6	; 0x06
 a6a:	37 81       	ldd	r19, Z+7	; 0x07
 a6c:	12 96       	adiw	r26, 0x02	; 2
 a6e:	3c 93       	st	X, r19
 a70:	2e 93       	st	-X, r18
 a72:	11 97       	sbiw	r26, 0x01	; 1
 a74:	13 86       	std	Z+11, r1	; 0x0b
 a76:	12 86       	std	Z+10, r1	; 0x0a
 a78:	9c 91       	ld	r25, X
 a7a:	91 50       	subi	r25, 0x01	; 1
 a7c:	9c 93       	st	X, r25
 a7e:	a4 89       	ldd	r26, Z+20	; 0x14
 a80:	b5 89       	ldd	r27, Z+21	; 0x15
 a82:	10 97       	sbiw	r26, 0x00	; 0
 a84:	19 f1       	breq	.+70     	; 0xacc <xTaskIncrementTick+0x14e>
 a86:	26 85       	ldd	r18, Z+14	; 0x0e
 a88:	37 85       	ldd	r19, Z+15	; 0x0f
 a8a:	60 89       	ldd	r22, Z+16	; 0x10
 a8c:	71 89       	ldd	r23, Z+17	; 0x11
 a8e:	e9 01       	movw	r28, r18
 a90:	7d 83       	std	Y+5, r23	; 0x05
 a92:	6c 83       	std	Y+4, r22	; 0x04
 a94:	20 89       	ldd	r18, Z+16	; 0x10
 a96:	31 89       	ldd	r19, Z+17	; 0x11
 a98:	66 85       	ldd	r22, Z+14	; 0x0e
 a9a:	77 85       	ldd	r23, Z+15	; 0x0f
 a9c:	e9 01       	movw	r28, r18
 a9e:	7b 83       	std	Y+3, r23	; 0x03
 aa0:	6a 83       	std	Y+2, r22	; 0x02
 aa2:	11 96       	adiw	r26, 0x01	; 1
 aa4:	6d 91       	ld	r22, X+
 aa6:	7c 91       	ld	r23, X
 aa8:	12 97       	sbiw	r26, 0x02	; 2
 aaa:	9f 01       	movw	r18, r30
 aac:	24 5f       	subi	r18, 0xF4	; 244
 aae:	3f 4f       	sbci	r19, 0xFF	; 255
 ab0:	62 17       	cp	r22, r18
 ab2:	73 07       	cpc	r23, r19
 ab4:	31 f4       	brne	.+12     	; 0xac2 <xTaskIncrementTick+0x144>
 ab6:	20 89       	ldd	r18, Z+16	; 0x10
 ab8:	31 89       	ldd	r19, Z+17	; 0x11
 aba:	12 96       	adiw	r26, 0x02	; 2
 abc:	3c 93       	st	X, r19
 abe:	2e 93       	st	-X, r18
 ac0:	11 97       	sbiw	r26, 0x01	; 1
 ac2:	15 8a       	std	Z+21, r1	; 0x15
 ac4:	14 8a       	std	Z+20, r1	; 0x14
 ac6:	9c 91       	ld	r25, X
 ac8:	91 50       	subi	r25, 0x01	; 1
 aca:	9c 93       	st	X, r25
 acc:	26 89       	ldd	r18, Z+22	; 0x16
 ace:	90 91 67 06 	lds	r25, 0x0667	; 0x800667 <uxTopReadyPriority>
 ad2:	92 17       	cp	r25, r18
 ad4:	10 f4       	brcc	.+4      	; 0xada <xTaskIncrementTick+0x15c>
 ad6:	20 93 67 06 	sts	0x0667, r18	; 0x800667 <uxTopReadyPriority>
 ada:	30 e0       	ldi	r19, 0x00	; 0
 adc:	d9 01       	movw	r26, r18
 ade:	aa 0f       	add	r26, r26
 ae0:	bb 1f       	adc	r27, r27
 ae2:	aa 0f       	add	r26, r26
 ae4:	bb 1f       	adc	r27, r27
 ae6:	aa 0f       	add	r26, r26
 ae8:	bb 1f       	adc	r27, r27
 aea:	2a 0f       	add	r18, r26
 aec:	3b 1f       	adc	r19, r27
 aee:	d9 01       	movw	r26, r18
 af0:	ac 56       	subi	r26, 0x6C	; 108
 af2:	b9 4f       	sbci	r27, 0xF9	; 249
 af4:	11 96       	adiw	r26, 0x01	; 1
 af6:	0d 90       	ld	r0, X+
 af8:	bc 91       	ld	r27, X
 afa:	a0 2d       	mov	r26, r0
 afc:	b5 83       	std	Z+5, r27	; 0x05
 afe:	a4 83       	std	Z+4, r26	; 0x04
 b00:	14 96       	adiw	r26, 0x04	; 4
 b02:	2d 91       	ld	r18, X+
 b04:	3c 91       	ld	r19, X
 b06:	15 97       	sbiw	r26, 0x05	; 5
 b08:	37 83       	std	Z+7, r19	; 0x07
 b0a:	26 83       	std	Z+6, r18	; 0x06
 b0c:	14 96       	adiw	r26, 0x04	; 4
 b0e:	2d 91       	ld	r18, X+
 b10:	3c 91       	ld	r19, X
 b12:	15 97       	sbiw	r26, 0x05	; 5
 b14:	e9 01       	movw	r28, r18
 b16:	5b 83       	std	Y+3, r21	; 0x03
 b18:	4a 83       	std	Y+2, r20	; 0x02
 b1a:	15 96       	adiw	r26, 0x05	; 5
 b1c:	5c 93       	st	X, r21
 b1e:	4e 93       	st	-X, r20
 b20:	14 97       	sbiw	r26, 0x04	; 4
 b22:	a6 89       	ldd	r26, Z+22	; 0x16
 b24:	b0 e0       	ldi	r27, 0x00	; 0
 b26:	9d 01       	movw	r18, r26
 b28:	22 0f       	add	r18, r18
 b2a:	33 1f       	adc	r19, r19
 b2c:	22 0f       	add	r18, r18
 b2e:	33 1f       	adc	r19, r19
 b30:	22 0f       	add	r18, r18
 b32:	33 1f       	adc	r19, r19
 b34:	a2 0f       	add	r26, r18
 b36:	b3 1f       	adc	r27, r19
 b38:	ac 56       	subi	r26, 0x6C	; 108
 b3a:	b9 4f       	sbci	r27, 0xF9	; 249
 b3c:	b3 87       	std	Z+11, r27	; 0x0b
 b3e:	a2 87       	std	Z+10, r26	; 0x0a
 b40:	9c 91       	ld	r25, X
 b42:	9f 5f       	subi	r25, 0xFF	; 255
 b44:	9c 93       	st	X, r25
 b46:	26 89       	ldd	r18, Z+22	; 0x16
 b48:	e0 91 b8 06 	lds	r30, 0x06B8	; 0x8006b8 <pxCurrentTCB>
 b4c:	f0 91 b9 06 	lds	r31, 0x06B9	; 0x8006b9 <pxCurrentTCB+0x1>
 b50:	96 89       	ldd	r25, Z+22	; 0x16
 b52:	92 17       	cp	r25, r18
 b54:	08 f4       	brcc	.+2      	; 0xb58 <xTaskIncrementTick+0x1da>
 b56:	49 cf       	rjmp	.-366    	; 0x9ea <xTaskIncrementTick+0x6c>
 b58:	4b cf       	rjmp	.-362    	; 0x9f0 <xTaskIncrementTick+0x72>
 b5a:	e0 91 b8 06 	lds	r30, 0x06B8	; 0x8006b8 <pxCurrentTCB>
 b5e:	f0 91 b9 06 	lds	r31, 0x06B9	; 0x8006b9 <pxCurrentTCB+0x1>
 b62:	26 89       	ldd	r18, Z+22	; 0x16
 b64:	30 e0       	ldi	r19, 0x00	; 0
 b66:	f9 01       	movw	r30, r18
 b68:	ee 0f       	add	r30, r30
 b6a:	ff 1f       	adc	r31, r31
 b6c:	ee 0f       	add	r30, r30
 b6e:	ff 1f       	adc	r31, r31
 b70:	ee 0f       	add	r30, r30
 b72:	ff 1f       	adc	r31, r31
 b74:	2e 0f       	add	r18, r30
 b76:	3f 1f       	adc	r19, r31
 b78:	f9 01       	movw	r30, r18
 b7a:	ec 56       	subi	r30, 0x6C	; 108
 b7c:	f9 4f       	sbci	r31, 0xF9	; 249
 b7e:	90 81       	ld	r25, Z
 b80:	92 30       	cpi	r25, 0x02	; 2
 b82:	08 f0       	brcs	.+2      	; 0xb86 <xTaskIncrementTick+0x208>
 b84:	81 e0       	ldi	r24, 0x01	; 1
 b86:	90 91 63 06 	lds	r25, 0x0663	; 0x800663 <xYieldPending>
 b8a:	91 11       	cpse	r25, r1
 b8c:	0c c0       	rjmp	.+24     	; 0xba6 <xTaskIncrementTick+0x228>
 b8e:	0c c0       	rjmp	.+24     	; 0xba8 <xTaskIncrementTick+0x22a>
 b90:	80 91 64 06 	lds	r24, 0x0664	; 0x800664 <xPendedTicks>
 b94:	90 91 65 06 	lds	r25, 0x0665	; 0x800665 <xPendedTicks+0x1>
 b98:	01 96       	adiw	r24, 0x01	; 1
 b9a:	90 93 65 06 	sts	0x0665, r25	; 0x800665 <xPendedTicks+0x1>
 b9e:	80 93 64 06 	sts	0x0664, r24	; 0x800664 <xPendedTicks>
 ba2:	80 e0       	ldi	r24, 0x00	; 0
 ba4:	01 c0       	rjmp	.+2      	; 0xba8 <xTaskIncrementTick+0x22a>
 ba6:	81 e0       	ldi	r24, 0x01	; 1
 ba8:	df 91       	pop	r29
 baa:	cf 91       	pop	r28
 bac:	1f 91       	pop	r17
 bae:	0f 91       	pop	r16
 bb0:	08 95       	ret

00000bb2 <xTaskResumeAll>:
 bb2:	cf 93       	push	r28
 bb4:	df 93       	push	r29
 bb6:	0f b6       	in	r0, 0x3f	; 63
 bb8:	f8 94       	cli
 bba:	0f 92       	push	r0
 bbc:	80 91 5c 06 	lds	r24, 0x065C	; 0x80065c <uxSchedulerSuspended>
 bc0:	81 50       	subi	r24, 0x01	; 1
 bc2:	80 93 5c 06 	sts	0x065C, r24	; 0x80065c <uxSchedulerSuspended>
 bc6:	80 91 5c 06 	lds	r24, 0x065C	; 0x80065c <uxSchedulerSuspended>
 bca:	81 11       	cpse	r24, r1
 bcc:	bf c0       	rjmp	.+382    	; 0xd4c <xTaskResumeAll+0x19a>
 bce:	80 91 6a 06 	lds	r24, 0x066A	; 0x80066a <uxCurrentNumberOfTasks>
 bd2:	81 11       	cpse	r24, r1
 bd4:	96 c0       	rjmp	.+300    	; 0xd02 <xTaskResumeAll+0x150>
 bd6:	bd c0       	rjmp	.+378    	; 0xd52 <xTaskResumeAll+0x1a0>
 bd8:	e0 91 7a 06 	lds	r30, 0x067A	; 0x80067a <xPendingReadyList+0x5>
 bdc:	f0 91 7b 06 	lds	r31, 0x067B	; 0x80067b <xPendingReadyList+0x6>
 be0:	06 80       	ldd	r0, Z+6	; 0x06
 be2:	f7 81       	ldd	r31, Z+7	; 0x07
 be4:	e0 2d       	mov	r30, r0
 be6:	a4 89       	ldd	r26, Z+20	; 0x14
 be8:	b5 89       	ldd	r27, Z+21	; 0x15
 bea:	c6 85       	ldd	r28, Z+14	; 0x0e
 bec:	d7 85       	ldd	r29, Z+15	; 0x0f
 bee:	80 89       	ldd	r24, Z+16	; 0x10
 bf0:	91 89       	ldd	r25, Z+17	; 0x11
 bf2:	9d 83       	std	Y+5, r25	; 0x05
 bf4:	8c 83       	std	Y+4, r24	; 0x04
 bf6:	c0 89       	ldd	r28, Z+16	; 0x10
 bf8:	d1 89       	ldd	r29, Z+17	; 0x11
 bfa:	86 85       	ldd	r24, Z+14	; 0x0e
 bfc:	97 85       	ldd	r25, Z+15	; 0x0f
 bfe:	9b 83       	std	Y+3, r25	; 0x03
 c00:	8a 83       	std	Y+2, r24	; 0x02
 c02:	11 96       	adiw	r26, 0x01	; 1
 c04:	2d 91       	ld	r18, X+
 c06:	3c 91       	ld	r19, X
 c08:	12 97       	sbiw	r26, 0x02	; 2
 c0a:	cf 01       	movw	r24, r30
 c0c:	0c 96       	adiw	r24, 0x0c	; 12
 c0e:	28 17       	cp	r18, r24
 c10:	39 07       	cpc	r19, r25
 c12:	31 f4       	brne	.+12     	; 0xc20 <xTaskResumeAll+0x6e>
 c14:	80 89       	ldd	r24, Z+16	; 0x10
 c16:	91 89       	ldd	r25, Z+17	; 0x11
 c18:	12 96       	adiw	r26, 0x02	; 2
 c1a:	9c 93       	st	X, r25
 c1c:	8e 93       	st	-X, r24
 c1e:	11 97       	sbiw	r26, 0x01	; 1
 c20:	15 8a       	std	Z+21, r1	; 0x15
 c22:	14 8a       	std	Z+20, r1	; 0x14
 c24:	8c 91       	ld	r24, X
 c26:	81 50       	subi	r24, 0x01	; 1
 c28:	8c 93       	st	X, r24
 c2a:	a2 85       	ldd	r26, Z+10	; 0x0a
 c2c:	b3 85       	ldd	r27, Z+11	; 0x0b
 c2e:	c4 81       	ldd	r28, Z+4	; 0x04
 c30:	d5 81       	ldd	r29, Z+5	; 0x05
 c32:	86 81       	ldd	r24, Z+6	; 0x06
 c34:	97 81       	ldd	r25, Z+7	; 0x07
 c36:	9d 83       	std	Y+5, r25	; 0x05
 c38:	8c 83       	std	Y+4, r24	; 0x04
 c3a:	c6 81       	ldd	r28, Z+6	; 0x06
 c3c:	d7 81       	ldd	r29, Z+7	; 0x07
 c3e:	84 81       	ldd	r24, Z+4	; 0x04
 c40:	95 81       	ldd	r25, Z+5	; 0x05
 c42:	9b 83       	std	Y+3, r25	; 0x03
 c44:	8a 83       	std	Y+2, r24	; 0x02
 c46:	11 96       	adiw	r26, 0x01	; 1
 c48:	8d 91       	ld	r24, X+
 c4a:	9c 91       	ld	r25, X
 c4c:	12 97       	sbiw	r26, 0x02	; 2
 c4e:	9f 01       	movw	r18, r30
 c50:	2e 5f       	subi	r18, 0xFE	; 254
 c52:	3f 4f       	sbci	r19, 0xFF	; 255
 c54:	82 17       	cp	r24, r18
 c56:	93 07       	cpc	r25, r19
 c58:	31 f4       	brne	.+12     	; 0xc66 <xTaskResumeAll+0xb4>
 c5a:	86 81       	ldd	r24, Z+6	; 0x06
 c5c:	97 81       	ldd	r25, Z+7	; 0x07
 c5e:	12 96       	adiw	r26, 0x02	; 2
 c60:	9c 93       	st	X, r25
 c62:	8e 93       	st	-X, r24
 c64:	11 97       	sbiw	r26, 0x01	; 1
 c66:	13 86       	std	Z+11, r1	; 0x0b
 c68:	12 86       	std	Z+10, r1	; 0x0a
 c6a:	8c 91       	ld	r24, X
 c6c:	81 50       	subi	r24, 0x01	; 1
 c6e:	8c 93       	st	X, r24
 c70:	86 89       	ldd	r24, Z+22	; 0x16
 c72:	90 91 67 06 	lds	r25, 0x0667	; 0x800667 <uxTopReadyPriority>
 c76:	98 17       	cp	r25, r24
 c78:	10 f4       	brcc	.+4      	; 0xc7e <xTaskResumeAll+0xcc>
 c7a:	80 93 67 06 	sts	0x0667, r24	; 0x800667 <uxTopReadyPriority>
 c7e:	90 e0       	ldi	r25, 0x00	; 0
 c80:	dc 01       	movw	r26, r24
 c82:	aa 0f       	add	r26, r26
 c84:	bb 1f       	adc	r27, r27
 c86:	aa 0f       	add	r26, r26
 c88:	bb 1f       	adc	r27, r27
 c8a:	aa 0f       	add	r26, r26
 c8c:	bb 1f       	adc	r27, r27
 c8e:	8a 0f       	add	r24, r26
 c90:	9b 1f       	adc	r25, r27
 c92:	dc 01       	movw	r26, r24
 c94:	ac 56       	subi	r26, 0x6C	; 108
 c96:	b9 4f       	sbci	r27, 0xF9	; 249
 c98:	11 96       	adiw	r26, 0x01	; 1
 c9a:	0d 90       	ld	r0, X+
 c9c:	bc 91       	ld	r27, X
 c9e:	a0 2d       	mov	r26, r0
 ca0:	b5 83       	std	Z+5, r27	; 0x05
 ca2:	a4 83       	std	Z+4, r26	; 0x04
 ca4:	14 96       	adiw	r26, 0x04	; 4
 ca6:	8d 91       	ld	r24, X+
 ca8:	9c 91       	ld	r25, X
 caa:	15 97       	sbiw	r26, 0x05	; 5
 cac:	97 83       	std	Z+7, r25	; 0x07
 cae:	86 83       	std	Z+6, r24	; 0x06
 cb0:	14 96       	adiw	r26, 0x04	; 4
 cb2:	cd 91       	ld	r28, X+
 cb4:	dc 91       	ld	r29, X
 cb6:	15 97       	sbiw	r26, 0x05	; 5
 cb8:	3b 83       	std	Y+3, r19	; 0x03
 cba:	2a 83       	std	Y+2, r18	; 0x02
 cbc:	15 96       	adiw	r26, 0x05	; 5
 cbe:	3c 93       	st	X, r19
 cc0:	2e 93       	st	-X, r18
 cc2:	14 97       	sbiw	r26, 0x04	; 4
 cc4:	a6 89       	ldd	r26, Z+22	; 0x16
 cc6:	b0 e0       	ldi	r27, 0x00	; 0
 cc8:	cd 01       	movw	r24, r26
 cca:	88 0f       	add	r24, r24
 ccc:	99 1f       	adc	r25, r25
 cce:	88 0f       	add	r24, r24
 cd0:	99 1f       	adc	r25, r25
 cd2:	88 0f       	add	r24, r24
 cd4:	99 1f       	adc	r25, r25
 cd6:	a8 0f       	add	r26, r24
 cd8:	b9 1f       	adc	r27, r25
 cda:	ac 56       	subi	r26, 0x6C	; 108
 cdc:	b9 4f       	sbci	r27, 0xF9	; 249
 cde:	b3 87       	std	Z+11, r27	; 0x0b
 ce0:	a2 87       	std	Z+10, r26	; 0x0a
 ce2:	8c 91       	ld	r24, X
 ce4:	8f 5f       	subi	r24, 0xFF	; 255
 ce6:	8c 93       	st	X, r24
 ce8:	96 89       	ldd	r25, Z+22	; 0x16
 cea:	a0 91 b8 06 	lds	r26, 0x06B8	; 0x8006b8 <pxCurrentTCB>
 cee:	b0 91 b9 06 	lds	r27, 0x06B9	; 0x8006b9 <pxCurrentTCB+0x1>
 cf2:	56 96       	adiw	r26, 0x16	; 22
 cf4:	8c 91       	ld	r24, X
 cf6:	98 17       	cp	r25, r24
 cf8:	30 f0       	brcs	.+12     	; 0xd06 <xTaskResumeAll+0x154>
 cfa:	81 e0       	ldi	r24, 0x01	; 1
 cfc:	80 93 63 06 	sts	0x0663, r24	; 0x800663 <xYieldPending>
 d00:	02 c0       	rjmp	.+4      	; 0xd06 <xTaskResumeAll+0x154>
 d02:	e0 e0       	ldi	r30, 0x00	; 0
 d04:	f0 e0       	ldi	r31, 0x00	; 0
 d06:	80 91 75 06 	lds	r24, 0x0675	; 0x800675 <xPendingReadyList>
 d0a:	81 11       	cpse	r24, r1
 d0c:	65 cf       	rjmp	.-310    	; 0xbd8 <xTaskResumeAll+0x26>
 d0e:	ef 2b       	or	r30, r31
 d10:	11 f0       	breq	.+4      	; 0xd16 <xTaskResumeAll+0x164>
 d12:	0e 94 7f 02 	call	0x4fe	; 0x4fe <prvResetNextTaskUnblockTime>
 d16:	c0 91 64 06 	lds	r28, 0x0664	; 0x800664 <xPendedTicks>
 d1a:	d0 91 65 06 	lds	r29, 0x0665	; 0x800665 <xPendedTicks+0x1>
 d1e:	20 97       	sbiw	r28, 0x00	; 0
 d20:	69 f0       	breq	.+26     	; 0xd3c <xTaskResumeAll+0x18a>
 d22:	0e 94 bf 04 	call	0x97e	; 0x97e <xTaskIncrementTick>
 d26:	88 23       	and	r24, r24
 d28:	19 f0       	breq	.+6      	; 0xd30 <xTaskResumeAll+0x17e>
 d2a:	81 e0       	ldi	r24, 0x01	; 1
 d2c:	80 93 63 06 	sts	0x0663, r24	; 0x800663 <xYieldPending>
 d30:	21 97       	sbiw	r28, 0x01	; 1
 d32:	b9 f7       	brne	.-18     	; 0xd22 <xTaskResumeAll+0x170>
 d34:	10 92 65 06 	sts	0x0665, r1	; 0x800665 <xPendedTicks+0x1>
 d38:	10 92 64 06 	sts	0x0664, r1	; 0x800664 <xPendedTicks>
 d3c:	80 91 63 06 	lds	r24, 0x0663	; 0x800663 <xYieldPending>
 d40:	88 23       	and	r24, r24
 d42:	31 f0       	breq	.+12     	; 0xd50 <xTaskResumeAll+0x19e>
 d44:	0e 94 c7 01 	call	0x38e	; 0x38e <vPortYield>
 d48:	81 e0       	ldi	r24, 0x01	; 1
 d4a:	03 c0       	rjmp	.+6      	; 0xd52 <xTaskResumeAll+0x1a0>
 d4c:	80 e0       	ldi	r24, 0x00	; 0
 d4e:	01 c0       	rjmp	.+2      	; 0xd52 <xTaskResumeAll+0x1a0>
 d50:	80 e0       	ldi	r24, 0x00	; 0
 d52:	0f 90       	pop	r0
 d54:	0f be       	out	0x3f, r0	; 63
 d56:	df 91       	pop	r29
 d58:	cf 91       	pop	r28
 d5a:	08 95       	ret

00000d5c <vTaskDelay>:
 d5c:	cf 93       	push	r28
 d5e:	df 93       	push	r29
 d60:	ec 01       	movw	r28, r24
 d62:	89 2b       	or	r24, r25
 d64:	49 f0       	breq	.+18     	; 0xd78 <vTaskDelay+0x1c>
 d66:	0e 94 b9 04 	call	0x972	; 0x972 <vTaskSuspendAll>
 d6a:	60 e0       	ldi	r22, 0x00	; 0
 d6c:	ce 01       	movw	r24, r28
 d6e:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <prvAddCurrentTaskToDelayedList>
 d72:	0e 94 d9 05 	call	0xbb2	; 0xbb2 <xTaskResumeAll>
 d76:	01 c0       	rjmp	.+2      	; 0xd7a <vTaskDelay+0x1e>
 d78:	80 e0       	ldi	r24, 0x00	; 0
 d7a:	81 11       	cpse	r24, r1
 d7c:	02 c0       	rjmp	.+4      	; 0xd82 <vTaskDelay+0x26>
 d7e:	0e 94 c7 01 	call	0x38e	; 0x38e <vPortYield>
 d82:	df 91       	pop	r29
 d84:	cf 91       	pop	r28
 d86:	08 95       	ret

00000d88 <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 d88:	80 91 5c 06 	lds	r24, 0x065C	; 0x80065c <uxSchedulerSuspended>
 d8c:	88 23       	and	r24, r24
 d8e:	21 f0       	breq	.+8      	; 0xd98 <vTaskSwitchContext+0x10>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 d90:	81 e0       	ldi	r24, 0x01	; 1
 d92:	80 93 63 06 	sts	0x0663, r24	; 0x800663 <xYieldPending>
 d96:	08 95       	ret
    }
    else
    {
        xYieldPending = pdFALSE;
 d98:	10 92 63 06 	sts	0x0663, r1	; 0x800663 <xYieldPending>
        }
        #endif

        /* Select a new task to run using either the generic C or port
         * optimised asm code. */
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 d9c:	20 91 67 06 	lds	r18, 0x0667	; 0x800667 <uxTopReadyPriority>
 da0:	01 c0       	rjmp	.+2      	; 0xda4 <vTaskSwitchContext+0x1c>
 da2:	21 50       	subi	r18, 0x01	; 1
 da4:	82 2f       	mov	r24, r18
 da6:	90 e0       	ldi	r25, 0x00	; 0
 da8:	fc 01       	movw	r30, r24
 daa:	ee 0f       	add	r30, r30
 dac:	ff 1f       	adc	r31, r31
 dae:	ee 0f       	add	r30, r30
 db0:	ff 1f       	adc	r31, r31
 db2:	ee 0f       	add	r30, r30
 db4:	ff 1f       	adc	r31, r31
 db6:	e8 0f       	add	r30, r24
 db8:	f9 1f       	adc	r31, r25
 dba:	ec 56       	subi	r30, 0x6C	; 108
 dbc:	f9 4f       	sbci	r31, 0xF9	; 249
 dbe:	30 81       	ld	r19, Z
 dc0:	33 23       	and	r19, r19
 dc2:	79 f3       	breq	.-34     	; 0xda2 <vTaskSwitchContext+0x1a>
 dc4:	ac 01       	movw	r20, r24
 dc6:	44 0f       	add	r20, r20
 dc8:	55 1f       	adc	r21, r21
 dca:	44 0f       	add	r20, r20
 dcc:	55 1f       	adc	r21, r21
 dce:	44 0f       	add	r20, r20
 dd0:	55 1f       	adc	r21, r21
 dd2:	48 0f       	add	r20, r24
 dd4:	59 1f       	adc	r21, r25
 dd6:	df 01       	movw	r26, r30
 dd8:	01 80       	ldd	r0, Z+1	; 0x01
 dda:	f2 81       	ldd	r31, Z+2	; 0x02
 ddc:	e0 2d       	mov	r30, r0
 dde:	02 80       	ldd	r0, Z+2	; 0x02
 de0:	f3 81       	ldd	r31, Z+3	; 0x03
 de2:	e0 2d       	mov	r30, r0
 de4:	12 96       	adiw	r26, 0x02	; 2
 de6:	fc 93       	st	X, r31
 de8:	ee 93       	st	-X, r30
 dea:	11 97       	sbiw	r26, 0x01	; 1
 dec:	49 56       	subi	r20, 0x69	; 105
 dee:	59 4f       	sbci	r21, 0xF9	; 249
 df0:	e4 17       	cp	r30, r20
 df2:	f5 07       	cpc	r31, r21
 df4:	29 f4       	brne	.+10     	; 0xe00 <vTaskSwitchContext+0x78>
 df6:	42 81       	ldd	r20, Z+2	; 0x02
 df8:	53 81       	ldd	r21, Z+3	; 0x03
 dfa:	fd 01       	movw	r30, r26
 dfc:	52 83       	std	Z+2, r21	; 0x02
 dfe:	41 83       	std	Z+1, r20	; 0x01
 e00:	fc 01       	movw	r30, r24
 e02:	ee 0f       	add	r30, r30
 e04:	ff 1f       	adc	r31, r31
 e06:	ee 0f       	add	r30, r30
 e08:	ff 1f       	adc	r31, r31
 e0a:	ee 0f       	add	r30, r30
 e0c:	ff 1f       	adc	r31, r31
 e0e:	8e 0f       	add	r24, r30
 e10:	9f 1f       	adc	r25, r31
 e12:	fc 01       	movw	r30, r24
 e14:	ec 56       	subi	r30, 0x6C	; 108
 e16:	f9 4f       	sbci	r31, 0xF9	; 249
 e18:	01 80       	ldd	r0, Z+1	; 0x01
 e1a:	f2 81       	ldd	r31, Z+2	; 0x02
 e1c:	e0 2d       	mov	r30, r0
 e1e:	86 81       	ldd	r24, Z+6	; 0x06
 e20:	97 81       	ldd	r25, Z+7	; 0x07
 e22:	90 93 b9 06 	sts	0x06B9, r25	; 0x8006b9 <pxCurrentTCB+0x1>
 e26:	80 93 b8 06 	sts	0x06B8, r24	; 0x8006b8 <pxCurrentTCB>
 e2a:	20 93 67 06 	sts	0x0667, r18	; 0x800667 <uxTopReadyPriority>
 e2e:	08 95       	ret

00000e30 <UART_INT>:
 */ 
#include "UART.h"
void UART_INT(void){
	
	
	UCSRB = (1<<RXEN)|(1<<TXEN);
 e30:	88 e1       	ldi	r24, 0x18	; 24
 e32:	8a b9       	out	0x0a, r24	; 10
	UCSRC =(1<<URSEL)|(1<<UCSZ0)|(1<<UCSZ1);
 e34:	86 e8       	ldi	r24, 0x86	; 134
 e36:	80 bd       	out	0x20, r24	; 32
	UBRRL=UBRR_VALUE;
 e38:	87 e6       	ldi	r24, 0x67	; 103
 e3a:	89 b9       	out	0x09, r24	; 9
	UBRRH=UBRR_VALUE>>8;
 e3c:	10 bc       	out	0x20, r1	; 32
 e3e:	08 95       	ret

00000e40 <UART_SENDCHAR>:
}
void UART_SENDCHAR(char data){
	
	while(!(UCSRA & (1<<UDRE)));
 e40:	5d 9b       	sbis	0x0b, 5	; 11
 e42:	fe cf       	rjmp	.-4      	; 0xe40 <UART_SENDCHAR>
	UDR = data;
 e44:	8c b9       	out	0x0c, r24	; 12
 e46:	08 95       	ret

00000e48 <UART_SENDSTRING>:
}
void UART_SENDSTRING(char * data){
 e48:	0f 93       	push	r16
 e4a:	1f 93       	push	r17
 e4c:	cf 93       	push	r28
 e4e:	8c 01       	movw	r16, r24
	char i=0;
 e50:	c0 e0       	ldi	r28, 0x00	; 0
	while(data[i]!='\0'){
 e52:	03 c0       	rjmp	.+6      	; 0xe5a <UART_SENDSTRING+0x12>
		UART_SENDCHAR(data[i]);
 e54:	0e 94 20 07 	call	0xe40	; 0xe40 <UART_SENDCHAR>
		i++;
 e58:	cf 5f       	subi	r28, 0xFF	; 255
	while(!(UCSRA & (1<<UDRE)));
	UDR = data;
}
void UART_SENDSTRING(char * data){
	char i=0;
	while(data[i]!='\0'){
 e5a:	f8 01       	movw	r30, r16
 e5c:	ec 0f       	add	r30, r28
 e5e:	f1 1d       	adc	r31, r1
 e60:	80 81       	ld	r24, Z
 e62:	81 11       	cpse	r24, r1
 e64:	f7 cf       	rjmp	.-18     	; 0xe54 <UART_SENDSTRING+0xc>
		UART_SENDCHAR(data[i]);
		i++;
	}
}
 e66:	cf 91       	pop	r28
 e68:	1f 91       	pop	r17
 e6a:	0f 91       	pop	r16
 e6c:	08 95       	ret

00000e6e <_exit>:
 e6e:	f8 94       	cli

00000e70 <__stop_program>:
 e70:	ff cf       	rjmp	.-2      	; 0xe70 <__stop_program>
