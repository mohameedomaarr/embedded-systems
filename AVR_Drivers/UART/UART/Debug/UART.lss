
UART.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000fc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000014  00800060  000000fc  00000170  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000184  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001b4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000058  00000000  00000000  000001f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006eb  00000000  00000000  00000248  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000617  00000000  00000000  00000933  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000072a  00000000  00000000  00000f4a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000088  00000000  00000000  00001674  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000060b8  00000000  00000000  000016fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000091  00000000  00000000  000077b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  00007845  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  000021b4  00000000  00000000  0000787d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec ef       	ldi	r30, 0xFC	; 252
  68:	f0 e0       	ldi	r31, 0x00	; 0
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 37       	cpi	r26, 0x74	; 116
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 41 00 	call	0x82	; 0x82 <main>
  7a:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <main>:
#include "UART.h"


int main(void)
{
	UART_INT();
  82:	0e 94 59 00 	call	0xb2	; 0xb2 <UART_INT>
	DDRC |=(1<<7);
  86:	84 b3       	in	r24, 0x14	; 20
  88:	80 68       	ori	r24, 0x80	; 128
  8a:	84 bb       	out	0x14, r24	; 20
	
	
	UART_SENDSTRING("welcome in amit \r\n");
  8c:	80 e6       	ldi	r24, 0x60	; 96
  8e:	90 e0       	ldi	r25, 0x00	; 0
  90:	0e 94 65 00 	call	0xca	; 0xca <UART_SENDSTRING>
	while (1)
	{
		if(UART_RX() == '1'){
  94:	0e 94 78 00 	call	0xf0	; 0xf0 <UART_RX>
  98:	81 33       	cpi	r24, 0x31	; 49
  9a:	19 f4       	brne	.+6      	; 0xa2 <main+0x20>
			PORTC |=(1<<7);
  9c:	85 b3       	in	r24, 0x15	; 21
  9e:	80 68       	ori	r24, 0x80	; 128
  a0:	85 bb       	out	0x15, r24	; 21
		}
		if(UART_RX() == '2')
  a2:	0e 94 78 00 	call	0xf0	; 0xf0 <UART_RX>
  a6:	82 33       	cpi	r24, 0x32	; 50
  a8:	a9 f7       	brne	.-22     	; 0x94 <main+0x12>
		{
			
			PORTC &=~ (1<<7);
  aa:	85 b3       	in	r24, 0x15	; 21
  ac:	8f 77       	andi	r24, 0x7F	; 127
  ae:	85 bb       	out	0x15, r24	; 21
  b0:	f1 cf       	rjmp	.-30     	; 0x94 <main+0x12>

000000b2 <UART_INT>:
 */ 
#include "UART.h"
void UART_INT(void){
	
	
	UCSRB = (1<<RXEN)|(1<<TXEN);
  b2:	88 e1       	ldi	r24, 0x18	; 24
  b4:	8a b9       	out	0x0a, r24	; 10
	UCSRC =(1<<URSEL)|(1<<UCSZ0)|(1<<UCSZ1);
  b6:	86 e8       	ldi	r24, 0x86	; 134
  b8:	80 bd       	out	0x20, r24	; 32
	UBRRL=UBRR_VALUE;
  ba:	87 e6       	ldi	r24, 0x67	; 103
  bc:	89 b9       	out	0x09, r24	; 9
	UBRRH=UBRR_VALUE>>8;
  be:	10 bc       	out	0x20, r1	; 32
  c0:	08 95       	ret

000000c2 <UART_SENDCHAR>:
}
void UART_SENDCHAR(char data){
	
	while(!(UCSRA & (1<<UDRE)));
  c2:	5d 9b       	sbis	0x0b, 5	; 11
  c4:	fe cf       	rjmp	.-4      	; 0xc2 <UART_SENDCHAR>
	UDR = data;
  c6:	8c b9       	out	0x0c, r24	; 12
  c8:	08 95       	ret

000000ca <UART_SENDSTRING>:
}
void UART_SENDSTRING(char * data){
  ca:	0f 93       	push	r16
  cc:	1f 93       	push	r17
  ce:	cf 93       	push	r28
  d0:	8c 01       	movw	r16, r24
	char i=0;
  d2:	c0 e0       	ldi	r28, 0x00	; 0
	while(data[i]!='\0'){
  d4:	03 c0       	rjmp	.+6      	; 0xdc <UART_SENDSTRING+0x12>
		UART_SENDCHAR(data[i]);
  d6:	0e 94 61 00 	call	0xc2	; 0xc2 <UART_SENDCHAR>
		i++;
  da:	cf 5f       	subi	r28, 0xFF	; 255
	while(!(UCSRA & (1<<UDRE)));
	UDR = data;
}
void UART_SENDSTRING(char * data){
	char i=0;
	while(data[i]!='\0'){
  dc:	f8 01       	movw	r30, r16
  de:	ec 0f       	add	r30, r28
  e0:	f1 1d       	adc	r31, r1
  e2:	80 81       	ld	r24, Z
  e4:	81 11       	cpse	r24, r1
  e6:	f7 cf       	rjmp	.-18     	; 0xd6 <UART_SENDSTRING+0xc>
		UART_SENDCHAR(data[i]);
		i++;
	}
}
  e8:	cf 91       	pop	r28
  ea:	1f 91       	pop	r17
  ec:	0f 91       	pop	r16
  ee:	08 95       	ret

000000f0 <UART_RX>:
char UART_RX(void){
	
	while(!(UCSRA & (1<<RXC)));
  f0:	5f 9b       	sbis	0x0b, 7	; 11
  f2:	fe cf       	rjmp	.-4      	; 0xf0 <UART_RX>
	return UDR;
  f4:	8c b1       	in	r24, 0x0c	; 12
  f6:	08 95       	ret

000000f8 <_exit>:
  f8:	f8 94       	cli

000000fa <__stop_program>:
  fa:	ff cf       	rjmp	.-2      	; 0xfa <__stop_program>
