
input_capture.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000bc  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000110  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000110  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000140  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  0000017c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000584  00000000  00000000  000001a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000511  00000000  00000000  00000728  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000001f7  00000000  00000000  00000c39  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000048  00000000  00000000  00000e30  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002ea  00000000  00000000  00000e78  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000049  00000000  00000000  00001162  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  000011ab  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 4a 00 	jmp	0x94	; 0x94 <__vector_6>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include <util/delay.h>
#include <avr/interrupt.h>

int main(void)
{
	TIMSK |= (1<<TICIE1);
  6c:	89 b7       	in	r24, 0x39	; 57
  6e:	80 62       	ori	r24, 0x20	; 32
  70:	89 bf       	out	0x39, r24	; 57
	DDRC |= (1<<3);
  72:	84 b3       	in	r24, 0x14	; 20
  74:	88 60       	ori	r24, 0x08	; 8
  76:	84 bb       	out	0x14, r24	; 20
	DDRD &=~ (1<<6);
  78:	81 b3       	in	r24, 0x11	; 17
  7a:	8f 7b       	andi	r24, 0xBF	; 191
  7c:	81 bb       	out	0x11, r24	; 17
	PIND &=~ (1<<6);
  7e:	80 b3       	in	r24, 0x10	; 16
  80:	8f 7b       	andi	r24, 0xBF	; 191
  82:	80 bb       	out	0x10, r24	; 16
	TCCR1B |= (1<<ICES1);
  84:	8e b5       	in	r24, 0x2e	; 46
  86:	80 64       	ori	r24, 0x40	; 64
  88:	8e bd       	out	0x2e, r24	; 46
	TCCR1B |= (1<<CS10)|(1<<CS11);
  8a:	8e b5       	in	r24, 0x2e	; 46
  8c:	83 60       	ori	r24, 0x03	; 3
  8e:	8e bd       	out	0x2e, r24	; 46
	sei();
  90:	78 94       	sei
  92:	ff cf       	rjmp	.-2      	; 0x92 <main+0x26>

00000094 <__vector_6>:
    while (1) 
    {
    }
}

ISR(TIMER1_CAPT_vect){
  94:	1f 92       	push	r1
  96:	0f 92       	push	r0
  98:	0f b6       	in	r0, 0x3f	; 63
  9a:	0f 92       	push	r0
  9c:	11 24       	eor	r1, r1
  9e:	8f 93       	push	r24
  a0:	9f 93       	push	r25
	PORTC ^= (1<<3);
  a2:	95 b3       	in	r25, 0x15	; 21
  a4:	88 e0       	ldi	r24, 0x08	; 8
  a6:	89 27       	eor	r24, r25
  a8:	85 bb       	out	0x15, r24	; 21
	
  aa:	9f 91       	pop	r25
  ac:	8f 91       	pop	r24
  ae:	0f 90       	pop	r0
  b0:	0f be       	out	0x3f, r0	; 63
  b2:	0f 90       	pop	r0
  b4:	1f 90       	pop	r1
  b6:	18 95       	reti

000000b8 <_exit>:
  b8:	f8 94       	cli

000000ba <__stop_program>:
  ba:	ff cf       	rjmp	.-2      	; 0xba <__stop_program>
