
keypad_layered.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000102  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000156  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000156  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000188  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000067f  00000000  00000000  000001e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000057f  00000000  00000000  00000863  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002c0  00000000  00000000  00000de2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  000010a4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000337  00000000  00000000  000010c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000115  00000000  00000000  000013ff  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001514  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 7f 00 	jmp	0xfe	; 0xfe <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:



int main(void)
{
	DDRA |= (1<<4)|(1<<5)|(1<<6)|(1<<7);
  6c:	8a b3       	in	r24, 0x1a	; 26
  6e:	80 6f       	ori	r24, 0xF0	; 240
  70:	8a bb       	out	0x1a, r24	; 26
	DDRB |= (1<<1)|(1<<2);
  72:	87 b3       	in	r24, 0x17	; 23
  74:	86 60       	ori	r24, 0x06	; 6
  76:	87 bb       	out	0x17, r24	; 23
	unsigned char count =0;
	unsigned char data =0;
    /* Replace with your application code */
    while (1) 
    {
		for(count=0;count<10;count++){
  78:	40 e0       	ldi	r20, 0x00	; 0
  7a:	3e c0       	rjmp	.+124    	; 0xf8 <main+0x8c>
			for(data=0 ; data<10;data++){
				PORTA = (PORTA & 0x0F)|(data<<4);
  7c:	3b b3       	in	r19, 0x1b	; 27
  7e:	50 e1       	ldi	r21, 0x10	; 16
  80:	25 9f       	mul	r18, r21
  82:	c0 01       	movw	r24, r0
  84:	11 24       	eor	r1, r1
  86:	93 2f       	mov	r25, r19
  88:	9f 70       	andi	r25, 0x0F	; 15
  8a:	89 2b       	or	r24, r25
  8c:	8b bb       	out	0x1b, r24	; 27
				PORTB |= (1<<1);
  8e:	88 b3       	in	r24, 0x18	; 24
  90:	82 60       	ori	r24, 0x02	; 2
  92:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  94:	8f ef       	ldi	r24, 0xFF	; 255
  96:	93 ec       	ldi	r25, 0xC3	; 195
  98:	39 e0       	ldi	r19, 0x09	; 9
  9a:	81 50       	subi	r24, 0x01	; 1
  9c:	90 40       	sbci	r25, 0x00	; 0
  9e:	30 40       	sbci	r19, 0x00	; 0
  a0:	e1 f7       	brne	.-8      	; 0x9a <main+0x2e>
  a2:	00 c0       	rjmp	.+0      	; 0xa4 <main+0x38>
  a4:	00 00       	nop
				_delay_ms(200);
				PORTB &=~ (1<<1);
  a6:	88 b3       	in	r24, 0x18	; 24
  a8:	8d 7f       	andi	r24, 0xFD	; 253
  aa:	88 bb       	out	0x18, r24	; 24
  ac:	5f ef       	ldi	r21, 0xFF	; 255
  ae:	89 e6       	ldi	r24, 0x69	; 105
  b0:	98 e1       	ldi	r25, 0x18	; 24
  b2:	51 50       	subi	r21, 0x01	; 1
  b4:	80 40       	sbci	r24, 0x00	; 0
  b6:	90 40       	sbci	r25, 0x00	; 0
  b8:	e1 f7       	brne	.-8      	; 0xb2 <main+0x46>
  ba:	00 c0       	rjmp	.+0      	; 0xbc <main+0x50>
  bc:	00 00       	nop
				_delay_ms(500);
				PORTA = (PORTA & 0x0F)|(count<<4);
  be:	3b b3       	in	r19, 0x1b	; 27
  c0:	50 e1       	ldi	r21, 0x10	; 16
  c2:	45 9f       	mul	r20, r21
  c4:	c0 01       	movw	r24, r0
  c6:	11 24       	eor	r1, r1
  c8:	3f 70       	andi	r19, 0x0F	; 15
  ca:	83 2b       	or	r24, r19
  cc:	8b bb       	out	0x1b, r24	; 27
				PORTB |= (1<<2);
  ce:	88 b3       	in	r24, 0x18	; 24
  d0:	84 60       	ori	r24, 0x04	; 4
  d2:	88 bb       	out	0x18, r24	; 24
  d4:	8f ef       	ldi	r24, 0xFF	; 255
  d6:	95 ea       	ldi	r25, 0xA5	; 165
  d8:	3e e0       	ldi	r19, 0x0E	; 14
  da:	81 50       	subi	r24, 0x01	; 1
  dc:	90 40       	sbci	r25, 0x00	; 0
  de:	30 40       	sbci	r19, 0x00	; 0
  e0:	e1 f7       	brne	.-8      	; 0xda <main+0x6e>
  e2:	00 c0       	rjmp	.+0      	; 0xe4 <main+0x78>
  e4:	00 00       	nop
				_delay_ms(300);
				PORTB &=~ (1<<2);
  e6:	88 b3       	in	r24, 0x18	; 24
  e8:	8b 7f       	andi	r24, 0xFB	; 251
  ea:	88 bb       	out	0x18, r24	; 24
	unsigned char data =0;
    /* Replace with your application code */
    while (1) 
    {
		for(count=0;count<10;count++){
			for(data=0 ; data<10;data++){
  ec:	2f 5f       	subi	r18, 0xFF	; 255
  ee:	01 c0       	rjmp	.+2      	; 0xf2 <main+0x86>
  f0:	20 e0       	ldi	r18, 0x00	; 0
  f2:	2a 30       	cpi	r18, 0x0A	; 10
  f4:	18 f2       	brcs	.-122    	; 0x7c <main+0x10>
	unsigned char count =0;
	unsigned char data =0;
    /* Replace with your application code */
    while (1) 
    {
		for(count=0;count<10;count++){
  f6:	4f 5f       	subi	r20, 0xFF	; 255
  f8:	4a 30       	cpi	r20, 0x0A	; 10
  fa:	d0 f3       	brcs	.-12     	; 0xf0 <main+0x84>
  fc:	bd cf       	rjmp	.-134    	; 0x78 <main+0xc>

000000fe <_exit>:
  fe:	f8 94       	cli

00000100 <__stop_program>:
 100:	ff cf       	rjmp	.-2      	; 0x100 <__stop_program>
