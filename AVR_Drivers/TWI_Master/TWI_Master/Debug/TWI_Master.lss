
TWI_Master.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000254  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000040  00800060  00000254  000002c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000308  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000338  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000088  00000000  00000000  00000374  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000af3  00000000  00000000  000003fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000787  00000000  00000000  00000eef  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004a0  00000000  00000000  00001676  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000bc  00000000  00000000  00001b18  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000686  00000000  00000000  00001bd4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001b5  00000000  00000000  0000225a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000058  00000000  00000000  0000240f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 e5       	ldi	r30, 0x54	; 84
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 3a       	cpi	r26, 0xA0	; 160
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 e7 00 	call	0x1ce	; 0x1ce <main>
  7a:	0c 94 28 01 	jmp	0x250	; 0x250 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <DIO_INT>:
};
void DIO_INT(){
	DIO_portTypes PORTX ;
	DIO_ChannelTypes Channelpos;
	uint8 count=0;
	for(count=DIO_channelA0;count<pincount;count++)
  82:	80 e0       	ldi	r24, 0x00	; 0
  84:	a0 c0       	rjmp	.+320    	; 0x1c6 <DIO_INT+0x144>
	{
		PORTX=count/8;
  86:	98 2f       	mov	r25, r24
  88:	96 95       	lsr	r25
  8a:	96 95       	lsr	r25
  8c:	96 95       	lsr	r25
		Channelpos=count%8;
  8e:	28 2f       	mov	r18, r24
  90:	27 70       	andi	r18, 0x07	; 7
		switch(PORTX){
  92:	91 30       	cpi	r25, 0x01	; 1
  94:	61 f1       	breq	.+88     	; 0xee <DIO_INT+0x6c>
  96:	38 f0       	brcs	.+14     	; 0xa6 <DIO_INT+0x24>
  98:	92 30       	cpi	r25, 0x02	; 2
  9a:	09 f4       	brne	.+2      	; 0x9e <DIO_INT+0x1c>
  9c:	4c c0       	rjmp	.+152    	; 0x136 <DIO_INT+0xb4>
  9e:	93 30       	cpi	r25, 0x03	; 3
  a0:	09 f4       	brne	.+2      	; 0xa4 <DIO_INT+0x22>
  a2:	6d c0       	rjmp	.+218    	; 0x17e <DIO_INT+0xfc>
  a4:	8f c0       	rjmp	.+286    	; 0x1c4 <DIO_INT+0x142>
			case DIO_portA :
			if (pincfg[count].PINDIR == Output)
  a6:	e8 2f       	mov	r30, r24
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	ee 0f       	add	r30, r30
  ac:	ff 1f       	adc	r31, r31
  ae:	e0 5a       	subi	r30, 0xA0	; 160
  b0:	ff 4f       	sbci	r31, 0xFF	; 255
  b2:	90 81       	ld	r25, Z
  b4:	91 30       	cpi	r25, 0x01	; 1
  b6:	69 f4       	brne	.+26     	; 0xd2 <DIO_INT+0x50>
			{
				set_bit(DDRA_reg,Channelpos);
  b8:	9a b3       	in	r25, 0x1a	; 26
  ba:	41 e0       	ldi	r20, 0x01	; 1
  bc:	50 e0       	ldi	r21, 0x00	; 0
  be:	ba 01       	movw	r22, r20
  c0:	02 c0       	rjmp	.+4      	; 0xc6 <DIO_INT+0x44>
  c2:	66 0f       	add	r22, r22
  c4:	77 1f       	adc	r23, r23
  c6:	2a 95       	dec	r18
  c8:	e2 f7       	brpl	.-8      	; 0xc2 <DIO_INT+0x40>
  ca:	9b 01       	movw	r18, r22
  cc:	29 2b       	or	r18, r25
  ce:	2a bb       	out	0x1a, r18	; 26
  d0:	79 c0       	rjmp	.+242    	; 0x1c4 <DIO_INT+0x142>
			}
			else{
				reset_bit(DDRA_reg,Channelpos);
  d2:	9a b3       	in	r25, 0x1a	; 26
  d4:	41 e0       	ldi	r20, 0x01	; 1
  d6:	50 e0       	ldi	r21, 0x00	; 0
  d8:	ba 01       	movw	r22, r20
  da:	02 c0       	rjmp	.+4      	; 0xe0 <DIO_INT+0x5e>
  dc:	66 0f       	add	r22, r22
  de:	77 1f       	adc	r23, r23
  e0:	2a 95       	dec	r18
  e2:	e2 f7       	brpl	.-8      	; 0xdc <DIO_INT+0x5a>
  e4:	9b 01       	movw	r18, r22
  e6:	20 95       	com	r18
  e8:	29 23       	and	r18, r25
  ea:	2a bb       	out	0x1a, r18	; 26
  ec:	6b c0       	rjmp	.+214    	; 0x1c4 <DIO_INT+0x142>
			}
			break;
			case DIO_portB :
			if (pincfg[count].PINDIR == Output)
  ee:	e8 2f       	mov	r30, r24
  f0:	f0 e0       	ldi	r31, 0x00	; 0
  f2:	ee 0f       	add	r30, r30
  f4:	ff 1f       	adc	r31, r31
  f6:	e0 5a       	subi	r30, 0xA0	; 160
  f8:	ff 4f       	sbci	r31, 0xFF	; 255
  fa:	90 81       	ld	r25, Z
  fc:	91 30       	cpi	r25, 0x01	; 1
  fe:	69 f4       	brne	.+26     	; 0x11a <DIO_INT+0x98>
			{
				set_bit(DDRB_reg,Channelpos);
 100:	97 b3       	in	r25, 0x17	; 23
 102:	41 e0       	ldi	r20, 0x01	; 1
 104:	50 e0       	ldi	r21, 0x00	; 0
 106:	ba 01       	movw	r22, r20
 108:	02 c0       	rjmp	.+4      	; 0x10e <DIO_INT+0x8c>
 10a:	66 0f       	add	r22, r22
 10c:	77 1f       	adc	r23, r23
 10e:	2a 95       	dec	r18
 110:	e2 f7       	brpl	.-8      	; 0x10a <DIO_INT+0x88>
 112:	9b 01       	movw	r18, r22
 114:	29 2b       	or	r18, r25
 116:	27 bb       	out	0x17, r18	; 23
 118:	55 c0       	rjmp	.+170    	; 0x1c4 <DIO_INT+0x142>
			}
			else{
				reset_bit(DDRB_reg,Channelpos);
 11a:	97 b3       	in	r25, 0x17	; 23
 11c:	41 e0       	ldi	r20, 0x01	; 1
 11e:	50 e0       	ldi	r21, 0x00	; 0
 120:	ba 01       	movw	r22, r20
 122:	02 c0       	rjmp	.+4      	; 0x128 <DIO_INT+0xa6>
 124:	66 0f       	add	r22, r22
 126:	77 1f       	adc	r23, r23
 128:	2a 95       	dec	r18
 12a:	e2 f7       	brpl	.-8      	; 0x124 <DIO_INT+0xa2>
 12c:	9b 01       	movw	r18, r22
 12e:	20 95       	com	r18
 130:	29 23       	and	r18, r25
 132:	27 bb       	out	0x17, r18	; 23
 134:	47 c0       	rjmp	.+142    	; 0x1c4 <DIO_INT+0x142>
			}
			break;
			case DIO_portC :
			if (pincfg[count].PINDIR == Output)
 136:	e8 2f       	mov	r30, r24
 138:	f0 e0       	ldi	r31, 0x00	; 0
 13a:	ee 0f       	add	r30, r30
 13c:	ff 1f       	adc	r31, r31
 13e:	e0 5a       	subi	r30, 0xA0	; 160
 140:	ff 4f       	sbci	r31, 0xFF	; 255
 142:	90 81       	ld	r25, Z
 144:	91 30       	cpi	r25, 0x01	; 1
 146:	69 f4       	brne	.+26     	; 0x162 <DIO_INT+0xe0>
			{
				set_bit( DDRC_reg,Channelpos);
 148:	94 b3       	in	r25, 0x14	; 20
 14a:	41 e0       	ldi	r20, 0x01	; 1
 14c:	50 e0       	ldi	r21, 0x00	; 0
 14e:	ba 01       	movw	r22, r20
 150:	02 c0       	rjmp	.+4      	; 0x156 <DIO_INT+0xd4>
 152:	66 0f       	add	r22, r22
 154:	77 1f       	adc	r23, r23
 156:	2a 95       	dec	r18
 158:	e2 f7       	brpl	.-8      	; 0x152 <DIO_INT+0xd0>
 15a:	9b 01       	movw	r18, r22
 15c:	29 2b       	or	r18, r25
 15e:	24 bb       	out	0x14, r18	; 20
 160:	31 c0       	rjmp	.+98     	; 0x1c4 <DIO_INT+0x142>
			}
			else{
				reset_bit( DDRC_reg,Channelpos);
 162:	94 b3       	in	r25, 0x14	; 20
 164:	41 e0       	ldi	r20, 0x01	; 1
 166:	50 e0       	ldi	r21, 0x00	; 0
 168:	ba 01       	movw	r22, r20
 16a:	02 c0       	rjmp	.+4      	; 0x170 <DIO_INT+0xee>
 16c:	66 0f       	add	r22, r22
 16e:	77 1f       	adc	r23, r23
 170:	2a 95       	dec	r18
 172:	e2 f7       	brpl	.-8      	; 0x16c <DIO_INT+0xea>
 174:	9b 01       	movw	r18, r22
 176:	20 95       	com	r18
 178:	29 23       	and	r18, r25
 17a:	24 bb       	out	0x14, r18	; 20
 17c:	23 c0       	rjmp	.+70     	; 0x1c4 <DIO_INT+0x142>
			}
			break;
			case DIO_portD :
			if (pincfg[count].PINDIR == Output)
 17e:	e8 2f       	mov	r30, r24
 180:	f0 e0       	ldi	r31, 0x00	; 0
 182:	ee 0f       	add	r30, r30
 184:	ff 1f       	adc	r31, r31
 186:	e0 5a       	subi	r30, 0xA0	; 160
 188:	ff 4f       	sbci	r31, 0xFF	; 255
 18a:	90 81       	ld	r25, Z
 18c:	91 30       	cpi	r25, 0x01	; 1
 18e:	69 f4       	brne	.+26     	; 0x1aa <DIO_INT+0x128>
			{
				set_bit(DDRD_reg,Channelpos);
 190:	91 b3       	in	r25, 0x11	; 17
 192:	41 e0       	ldi	r20, 0x01	; 1
 194:	50 e0       	ldi	r21, 0x00	; 0
 196:	ba 01       	movw	r22, r20
 198:	02 c0       	rjmp	.+4      	; 0x19e <DIO_INT+0x11c>
 19a:	66 0f       	add	r22, r22
 19c:	77 1f       	adc	r23, r23
 19e:	2a 95       	dec	r18
 1a0:	e2 f7       	brpl	.-8      	; 0x19a <DIO_INT+0x118>
 1a2:	9b 01       	movw	r18, r22
 1a4:	29 2b       	or	r18, r25
 1a6:	21 bb       	out	0x11, r18	; 17
 1a8:	0d c0       	rjmp	.+26     	; 0x1c4 <DIO_INT+0x142>
			}
			else{
				reset_bit(DDRD_reg,Channelpos);
 1aa:	91 b3       	in	r25, 0x11	; 17
 1ac:	41 e0       	ldi	r20, 0x01	; 1
 1ae:	50 e0       	ldi	r21, 0x00	; 0
 1b0:	ba 01       	movw	r22, r20
 1b2:	02 c0       	rjmp	.+4      	; 0x1b8 <DIO_INT+0x136>
 1b4:	66 0f       	add	r22, r22
 1b6:	77 1f       	adc	r23, r23
 1b8:	2a 95       	dec	r18
 1ba:	e2 f7       	brpl	.-8      	; 0x1b4 <DIO_INT+0x132>
 1bc:	9b 01       	movw	r18, r22
 1be:	20 95       	com	r18
 1c0:	29 23       	and	r18, r25
 1c2:	21 bb       	out	0x11, r18	; 17
};
void DIO_INT(){
	DIO_portTypes PORTX ;
	DIO_ChannelTypes Channelpos;
	uint8 count=0;
	for(count=DIO_channelA0;count<pincount;count++)
 1c4:	8f 5f       	subi	r24, 0xFF	; 255
 1c6:	80 32       	cpi	r24, 0x20	; 32
 1c8:	08 f4       	brcc	.+2      	; 0x1cc <DIO_INT+0x14a>
 1ca:	5d cf       	rjmp	.-326    	; 0x86 <DIO_INT+0x4>
				reset_bit(DDRD_reg,Channelpos);
			}
			break;
		}
	}
 1cc:	08 95       	ret

000001ce <main>:
#include "TWI.h"


int main(void)
{
	DIO_INT();
 1ce:	0e 94 41 00 	call	0x82	; 0x82 <DIO_INT>
	TW_init(0x05);
 1d2:	85 e0       	ldi	r24, 0x05	; 5
 1d4:	0e 94 0c 01 	call	0x218	; 0x218 <TW_init>
	while (1)
	{
		if(TWI_start() == 0x08){
 1d8:	0e 94 16 01 	call	0x22c	; 0x22c <TWI_start>
 1dc:	88 30       	cpi	r24, 0x08	; 8
 1de:	e1 f7       	brne	.-8      	; 0x1d8 <main+0xa>
			if (TWI_DATA(0b00000010) == 0x18){
 1e0:	82 e0       	ldi	r24, 0x02	; 2
 1e2:	0e 94 1f 01 	call	0x23e	; 0x23e <TWI_DATA>
 1e6:	88 31       	cpi	r24, 0x18	; 24
 1e8:	b9 f7       	brne	.-18     	; 0x1d8 <main+0xa>
				if (TWI_DATA('M') == 0x28){
 1ea:	8d e4       	ldi	r24, 0x4D	; 77
 1ec:	0e 94 1f 01 	call	0x23e	; 0x23e <TWI_DATA>
 1f0:	88 32       	cpi	r24, 0x28	; 40
 1f2:	91 f7       	brne	.-28     	; 0x1d8 <main+0xa>
					TWI_stop();
 1f4:	0e 94 06 01 	call	0x20c	; 0x20c <TWI_stop>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1f8:	2f ef       	ldi	r18, 0xFF	; 255
 1fa:	83 ed       	ldi	r24, 0xD3	; 211
 1fc:	90 e3       	ldi	r25, 0x30	; 48
 1fe:	21 50       	subi	r18, 0x01	; 1
 200:	80 40       	sbci	r24, 0x00	; 0
 202:	90 40       	sbci	r25, 0x00	; 0
 204:	e1 f7       	brne	.-8      	; 0x1fe <main+0x30>
 206:	00 c0       	rjmp	.+0      	; 0x208 <main+0x3a>
 208:	00 00       	nop
 20a:	e6 cf       	rjmp	.-52     	; 0x1d8 <main+0xa>

0000020c <TWI_stop>:
	while (!(TWCR_reg&(1<<DIO_TWINT)));
	return (TWI_status());
}

void TWI_stop(){
	TWCR |=(1<<DIO_TWEN) | (1<<DIO_TWINT) | (1<<DIO_TWSTO);
 20c:	86 b7       	in	r24, 0x36	; 54
 20e:	84 69       	ori	r24, 0x94	; 148
 210:	86 bf       	out	0x36, r24	; 54
 212:	08 95       	ret

00000214 <TWI_MY_ADRESS>:
	
}

void TWI_MY_ADRESS(unsigned char add){
	TWAR_reg= add;
 214:	82 b9       	out	0x02, r24	; 2
 216:	08 95       	ret

00000218 <TW_init>:
#include "TWI.h"



void TW_init(uint8 My_Add){
	TWBR_reg=TWBR_VAL;
 218:	10 b8       	out	0x00, r1	; 0
	TWI_MY_ADRESS(My_Add);
 21a:	0e 94 0a 01 	call	0x214	; 0x214 <TWI_MY_ADRESS>
	TWCR_reg |= (1<<DIO_TWEN) |(1<<DIO_TWINT);
 21e:	86 b7       	in	r24, 0x36	; 54
 220:	84 68       	ori	r24, 0x84	; 132
 222:	86 bf       	out	0x36, r24	; 54
 224:	08 95       	ret

00000226 <TWI_status>:
	TWAR_reg= add;
}


unsigned char TWI_status(){
	return (TWSR_reg & (0xF8));
 226:	81 b1       	in	r24, 0x01	; 1
}
 228:	88 7f       	andi	r24, 0xF8	; 248
 22a:	08 95       	ret

0000022c <TWI_start>:
	
}

unsigned char TWI_start(){
	
	TWCR_reg |= (1<<DIO_TWEN) | (1<<DIO_TWINT) | (1<<DIO_TWSTA) ;
 22c:	86 b7       	in	r24, 0x36	; 54
 22e:	84 6a       	ori	r24, 0xA4	; 164
 230:	86 bf       	out	0x36, r24	; 54
	while (!(TWCR_reg&(1<<DIO_TWINT)));
 232:	06 b6       	in	r0, 0x36	; 54
 234:	07 fe       	sbrs	r0, 7
 236:	fd cf       	rjmp	.-6      	; 0x232 <TWI_start+0x6>
	return (TWI_status());
 238:	0e 94 13 01 	call	0x226	; 0x226 <TWI_status>
}
 23c:	08 95       	ret

0000023e <TWI_DATA>:
unsigned char TWI_status(){
	return (TWSR_reg & (0xF8));
}

unsigned char TWI_DATA(unsigned char data){
	TWDR_reg=data;
 23e:	83 b9       	out	0x03, r24	; 3
	TWCR_reg = (1<<DIO_TWINT) | (1<<DIO_TWEN);
 240:	84 e8       	ldi	r24, 0x84	; 132
 242:	86 bf       	out	0x36, r24	; 54
	
	while (!(TWCR_reg&(1<<DIO_TWINT)));
 244:	06 b6       	in	r0, 0x36	; 54
 246:	07 fe       	sbrs	r0, 7
 248:	fd cf       	rjmp	.-6      	; 0x244 <TWI_DATA+0x6>
	return (TWI_status());
 24a:	0e 94 13 01 	call	0x226	; 0x226 <TWI_status>
}
 24e:	08 95       	ret

00000250 <_exit>:
 250:	f8 94       	cli

00000252 <__stop_program>:
 252:	ff cf       	rjmp	.-2      	; 0x252 <__stop_program>
